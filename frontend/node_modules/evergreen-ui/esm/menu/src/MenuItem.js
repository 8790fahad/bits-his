import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import { Text } from '../../typography';
import { Icon } from '../../icon';
import { withTheme } from '../../theme';

var MenuItem =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(MenuItem, _React$PureComponent);

  function MenuItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (event) {
      _this.props.onSelect(event);
      /* eslint-disable react/prop-types */


      if (typeof _this.props.onClick === 'function') {
        _this.props.onClick(event);
      }
      /* eslint-enable react/prop-types */

    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyPress", function (event) {
      if (event.key === 'Enter' || event.key === ' ') {
        _this.props.onSelect(event);

        event.preventDefault();
      }
      /* eslint-disable react/prop-types */


      if (typeof _this.props.onKeyPress === 'function') {
        _this.props.onKeyPress(event);
      }
      /* eslint-enable react/prop-types */

    });

    return _this;
  }

  _createClass(MenuItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          is = _this$props.is,
          children = _this$props.children,
          theme = _this$props.theme,
          appearance = _this$props.appearance,
          secondaryText = _this$props.secondaryText,
          intent = _this$props.intent,
          icon = _this$props.icon,
          passthroughProps = _objectWithoutProperties(_this$props, ["is", "children", "theme", "appearance", "secondaryText", "intent", "icon"]);

      var themedClassName = theme.getMenuItemClassName(appearance, 'none');
      return React.createElement(Pane, _extends({
        is: is,
        role: "menuitem",
        className: themedClassName,
        onClick: this.handleClick,
        onKeyPress: this.handleKeyPress,
        height: icon ? 40 : 32,
        tabIndex: 0,
        "data-isselectable": "true",
        display: "flex",
        alignItems: "center"
      }, passthroughProps), icon && React.createElement(Icon, {
        color: intent === 'none' ? 'default' : intent,
        icon: icon,
        marginLeft: 16,
        marginRight: -4,
        size: 16,
        flexShrink: 0
      }), React.createElement(Text, {
        color: intent,
        marginLeft: 16,
        marginRight: 16,
        flex: 1
      }, children), secondaryText && React.createElement(Text, {
        marginRight: 16,
        color: "muted"
      }, secondaryText));
    }
  }]);

  return MenuItem;
}(React.PureComponent);

MenuItem.displayName = "MenuItem";

_defineProperty(MenuItem, "propTypes", {
  /**
   * Element type to use for the menu item.
   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`
   */
  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,

  /**
   * Function that is called on click and enter/space keypress.
   */
  onSelect: PropTypes.func,

  /**
   * The icon before the label.
   */
  icon: PropTypes.node,

  /**
   * The children of the component.
   */
  children: PropTypes.node,

  /**
   * Secondary text shown on the right.
   */
  secondaryText: PropTypes.node,

  /**
   * The default theme only supports one default appearance.
   */
  appearance: PropTypes.string.isRequired,

  /**
   * The intent of the menu item.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired
});

_defineProperty(MenuItem, "defaultProps", {
  is: 'div',
  intent: 'none',
  appearance: 'default',
  onSelect: function onSelect() {}
});

export default withTheme(MenuItem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZW51L3NyYy9NZW51SXRlbS5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsIlBhbmUiLCJUZXh0IiwiSWNvbiIsIndpdGhUaGVtZSIsIk1lbnVJdGVtIiwiZXZlbnQiLCJwcm9wcyIsIm9uU2VsZWN0Iiwib25DbGljayIsImtleSIsInByZXZlbnREZWZhdWx0Iiwib25LZXlQcmVzcyIsImlzIiwiY2hpbGRyZW4iLCJ0aGVtZSIsImFwcGVhcmFuY2UiLCJzZWNvbmRhcnlUZXh0IiwiaW50ZW50IiwiaWNvbiIsInBhc3N0aHJvdWdoUHJvcHMiLCJ0aGVtZWRDbGFzc05hbWUiLCJnZXRNZW51SXRlbUNsYXNzTmFtZSIsImhhbmRsZUNsaWNrIiwiaGFuZGxlS2V5UHJlc3MiLCJQdXJlQ29tcG9uZW50Iiwib25lT2ZUeXBlIiwic3RyaW5nIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJub2RlIiwib25lT2YiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixjQUFyQjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsa0JBQXJCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixZQUFyQjtBQUNBLFNBQVNDLFNBQVQsUUFBMEIsYUFBMUI7O0lBRU1DLFE7Ozs7Ozs7Ozs7Ozs7Ozs7OzswRkFvRFUsVUFBQUMsS0FBSyxFQUFJO0FBQ3JCLFlBQUtDLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkYsS0FBcEI7QUFFQTs7O0FBQ0EsVUFBSSxPQUFPLE1BQUtDLEtBQUwsQ0FBV0UsT0FBbEIsS0FBOEIsVUFBbEMsRUFBOEM7QUFDNUMsY0FBS0YsS0FBTCxDQUFXRSxPQUFYLENBQW1CSCxLQUFuQjtBQUNEO0FBQ0Q7O0FBQ0QsSzs7NkZBRWdCLFVBQUFBLEtBQUssRUFBSTtBQUN4QixVQUFJQSxLQUFLLENBQUNJLEdB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Qjs7O0FBR0FYLEVBQUFBLE1BQU0sRUFBRWxCLFNBQVMsQ0FBQytCLEtBQVYsQ0FBZ0IsQ0FBQyxNQUFELEVBQVMsU0FBVCxFQUFvQixTQUFwQixFQUErQixRQUEvQixDQUFoQixFQUNMRixVQXBDYzs7QUFzQ2pCOzs7QUFHQWQsRUFBQUEsS0FBSyxFQUFFZixTQUFTLENBQUNnQyxNQUFWLENBQWlCSDtBQXpDUCxDOztnQkFEZnhCLFEsa0JBNkNrQjtBQUNwQlEsRUFBQUEsRUFBRSxFQUFFLEtBRGdCO0FBRXBCSyxFQUFBQSxNQUFNLEVBQUUsTUFGWTtBQUdwQkYsRUFBQUEsVUFBVSxFQUFFLFNBSFE7QUFJcEJSLEVBQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFO0FBSkUsQzs7QUFpRnhCLGVBQWVKLFNBQVMsQ0FBQ0MsUUFBRCxDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi8uLi9pY29uJ1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWUnXG5cbmNsYXNzIE1lbnVJdGVtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogRWxlbWVudCB0eXBlIHRvIHVzZSBmb3IgdGhlIG1lbnUgaXRlbS5cbiAgICAgKiBGb3IgZXhhbXBsZTogYDxNZW51SXRlbSBpcz17UmVhY3RSb3V0ZXJMaW5rfT4uLi48L01lbnVJdGVtPmBcbiAgICAgKi9cbiAgICBpczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgb24gY2xpY2sgYW5kIGVudGVyL3NwYWNlIGtleXByZXNzLlxuICAgICAqL1xuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFRoZSBpY29uIGJlZm9yZSB0aGUgbGFiZWwuXG4gICAgICovXG4gICAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBTZWNvbmRhcnkgdGV4dCBzaG93biBvbiB0aGUgcmlnaHQuXG4gICAgICovXG4gICAgc2Vjb25kYXJ5VGV4dDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCB0aGVtZSBvbmx5IHN1cHBvcnRzIG9uZSBkZWZhdWx0IGFwcGVhcmFuY2UuXG4gICAgICovXG4gICAgYXBwZWFyYW5jZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGludGVudCBvZiB0aGUgbWVudSBpdGVtLlxuICAgICAqL1xuICAgIGludGVudDogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZGFuZ2VyJ10pXG4gICAgICAuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoZW1lIHByb3ZpZGVkIGJ5IFRoZW1lUHJvdmlkZXIuXG4gICAgICovXG4gICAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpczogJ2RpdicsXG4gICAgaW50ZW50OiAnbm9uZScsXG4gICAgYXBwZWFyYW5jZTogJ2RlZmF1bHQnLFxuICAgIG9uU2VsZWN0OiAoKSA9PiB7fVxuICB9XG5cbiAgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgdGhpcy5wcm9wcy5vblNlbGVjdChldmVudClcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KVxuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cbiAgfVxuXG4gIGhhbmRsZUtleVByZXNzID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicgfHwgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIHRoaXMucHJvcHMub25TZWxlY3QoZXZlbnQpXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbktleVByZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnByb3BzLm9uS2V5UHJlc3MoZXZlbnQpXG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICB0aGVtZSxcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBzZWNvbmRhcnlUZXh0LFxuICAgICAgaW50ZW50LFxuICAgICAgaWNvbixcbiAgICAgIC4uLnBhc3N0aHJvdWdoUHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgdGhlbWVkQ2xhc3NOYW1lID0gdGhlbWUuZ2V0TWVudUl0ZW1DbGFzc05hbWUoYXBwZWFyYW5jZSwgJ25vbmUnKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lXG4gICAgICAgIGlzPXtpc31cbiAgICAgICAgcm9sZT1cIm1lbnVpdGVtXCJcbiAgICAgICAgY2xhc3NOYW1lPXt0aGVtZWRDbGFzc05hbWV9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9XG4gICAgICAgIG9uS2V5UHJlc3M9e3RoaXMuaGFuZGxlS2V5UHJlc3N9XG4gICAgICAgIGhlaWdodD17aWNvbiA/IDQwIDogMzJ9XG4gICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICBkYXRhLWlzc2VsZWN0YWJsZT1cInRydWVcIlxuICAgICAgICBkaXNwbGF5PVwiZmxleFwiXG4gICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICB7Li4ucGFzc3Rocm91Z2hQcm9wc31cbiAgICAgID5cbiAgICAgICAge2ljb24gJiYgKFxuICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICBjb2xvcj17aW50ZW50ID09PSAnbm9uZScgPyAnZGVmYXVsdCcgOiBpbnRlbnR9XG4gICAgICAgICAgICBpY29uPXtpY29ufVxuICAgICAgICAgICAgbWFyZ2luTGVmdD17MTZ9XG4gICAgICAgICAgICBtYXJnaW5SaWdodD17LTR9XG4gICAgICAgICAgICBzaXplPXsxNn1cbiAgICAgICAgICAgIGZsZXhTaHJpbms9ezB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPFRleHQgY29sb3I9e2ludGVudH0gbWFyZ2luTGVmdD17MTZ9IG1hcmdpblJpZ2h0PXsxNn0gZmxleD17MX0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIHtzZWNvbmRhcnlUZXh0ICYmIChcbiAgICAgICAgICA8VGV4dCBtYXJnaW5SaWdodD17MTZ9IGNvbG9yPVwibXV0ZWRcIj5cbiAgICAgICAgICAgIHtzZWNvbmRhcnlUZXh0fVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvUGFuZT5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKE1lbnVJdGVtKVxuIl19