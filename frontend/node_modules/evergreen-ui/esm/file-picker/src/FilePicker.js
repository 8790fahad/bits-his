import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { Button } from '../../buttons';
import { TextInput } from '../../text-input';
export var CLASS_PREFIX = 'evergreen-file-picker';

var FilePicker =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(FilePicker, _PureComponent);

  function FilePicker() {
    var _this;

    _classCallCheck(this, FilePicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilePicker).call(this));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fileInputRef", function (node) {
      _this.fileInput = node;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFileChange", function (e) {
      var onChange = _this.props.onChange; // Firefox returns the same array instance each time for some reason

      var files = _toConsumableArray(e.target.files);

      _this.setState({
        files: files
      });

      if (onChange) {
        onChange(files);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleButtonClick", function () {
      _this.fileInput.click();
    });

    _this.state = {
      files: []
    };
    return _this;
  }

  _createClass(FilePicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          name = _this$props.name,
          accept = _this$props.accept,
          required = _this$props.required,
          multiple = _this$props.multiple,
          disabled = _this$props.disabled,
          capture = _this$props.capture,
          height = _this$props.height,
          onChange = _this$props.onChange,
          props = _objectWithoutProperties(_this$props, ["name", "accept", "required", "multiple", "disabled", "capture", "height", "onChange"]);

      var files = this.state.files;
      var inputValue;

      if (files.length === 0) {
        inputValue = '';
      } else if (files.length === 1) {
        inputValue = files[0].name;
      } else {
        inputValue = "".concat(files.length, " files");
      }

      var buttonText;

      if (files.length === 0) {
        buttonText = 'Select file';
      } else if (files.length === 1) {
        buttonText = 'Replace file';
      } else {
        buttonText = 'Replace files';
      }

      return React.createElement(Box, _extends({
        display: "flex",
        className: "".concat(CLASS_PREFIX, "-root")
      }, props), React.createElement(Box, {
        innerRef: this.fileInputRef,
        className: "".concat(CLASS_PREFIX, "-file-input"),
        is: "input",
        type: "file",
        name: name,
        accept: accept,
        required: required,
        multiple: multiple,
        disabled: disabled,
        capture: capture,
        onChange: this.handleFileChange,
        display: "none"
      }), React.createElement(TextInput, {
        className: "".concat(CLASS_PREFIX, "-text-input"),
        readOnly: true,
        value: inputValue,
        placeholder: "Select a file to upload\u2026" // There's a weird specifity issue when there's two differently sized inputs on the page
        ,
        borderTopRightRadius: "0 !important",
        borderBottomRightRadius: "0 !important",
        height: height,
        flex: 1,
        textOverflow: "ellipsis"
      }), React.createElement(Button, {
        className: "".concat(CLASS_PREFIX, "-button"),
        onClick: this.handleButtonClick,
        disabled: disabled,
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
        height: height,
        flexShrink: 0
      }, buttonText));
    }
  }]);

  return FilePicker;
}(PureComponent);

FilePicker.displayName = "FilePicker";

_defineProperty(FilePicker, "propTypes", {
  /**
   * Name attribute of the input.
   */
  name: PropTypes.string,

  /**
   * The accept attribute of the input.
   */
  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),

  /**
   * When true, the file picker is required.
   */
  required: PropTypes.bool,

  /**
   * When true, accept multiple files.
   */
  multiple: PropTypes.bool,

  /**
   * When true, the filepicker is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * The capture attribute of the input.
   */
  capture: PropTypes.bool,

  /**
   * The height of the file picker.
   */
  height: PropTypes.number,

  /**
   * Function called when onChange is fired
   */
  onChange: PropTypes.func
});

export { FilePicker as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,