import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Text } from '../../typography';
import { withTheme } from '../../theme';

var Tab =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Tab, _PureComponent);

  function Tab() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Tab);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tab)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (e) {
      _this.props.onClick(e);

      _this.props.onSelect();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyPress", function (e) {
      if (e.key === 'Enter' || e.key === ' ') {
        _this.props.onSelect();

        e.preventDefault();
      }

      _this.props.onKeyPress(e);
    });

    return _this;
  }

  _createClass(Tab, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          is = _this$props.is,
          height = _this$props.height,
          onSelect = _this$props.onSelect,
          isSelected = _this$props.isSelected,
          appearance = _this$props.appearance,
          props = _objectWithoutProperties(_this$props, ["theme", "is", "height", "onSelect", "isSelected", "appearance"]);

      var textSize = theme.getTextSizeForControlHeight(height);
      var elementBasedProps;

      if (is === 'a') {
        // Use aria-current when it's a link
        // https://tink.uk/using-the-aria-current-attribute/
        elementBasedProps = isSelected ? {
          'aria-current': 'page'
        } : {};
      } else {
        // Use a role="tablist" around the tabs
        // Also pass down a aria-controls="panelId"
        // https://www.stefanjudis.com/blog/aria-selected-and-when-to-use-it/
        elementBasedProps = {
          'aria-selected': isSelected,
          role: 'tab'
        };
      }

      return React.createElement(Text, _extends({
        className: theme.getTabClassName(appearance),
        is: is,
        size: textSize,
        height: height
      }, Tab.styles, props, {
        onClick: this.handleClick,
        onKeyPress: this.handleKeyPress
      }, elementBasedProps));
    }
  }]);

  return Tab;
}(PureComponent);

Tab.displayName = "Tab";

_defineProperty(Tab, "propTypes", _objectSpread({}, Text.propTypes, {
  /**
   * Function triggered when tab is selected.
   */
  onSelect: PropTypes.func,

  /**
   * When true, the tab is selected.
   */
  isSelected: PropTypes.bool,

  /**
   * The appearance of the tab.
   * The default theme only comes with a default style.
   */
  appearance: PropTypes.string,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired
}));

_defineProperty(Tab, "defaultProps", {
  onClick: function onClick() {},
  onSelect: function onSelect() {},
  onKeyPress: function onKeyPress() {},
  is: 'span',
  height: 28
});

_defineProperty(Tab, "styles", {
  display: 'inline-flex',
  fontWeight: 500,
  paddingX: 8,
  marginX: 4,
  borderRadius: 3,
  lineHeight: '28px',
  alignItems: 'center',
  justifyContent: 'center',
  textDecoration: 'none',
  tabIndex: 0
});

export default withTheme(Tab);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJzL3NyYy9UYWIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiVGV4dCIsIndpdGhUaGVtZSIsIlRhYiIsImUiLCJwcm9wcyIsIm9uQ2xpY2siLCJvblNlbGVjdCIsImtleSIsInByZXZlbnREZWZhdWx0Iiwib25LZXlQcmVzcyIsInRoZW1lIiwiaXMiLCJoZWlnaHQiLCJpc1NlbGVjdGVkIiwiYXBwZWFyYW5jZSIsInRleHRTaXplIiwiZ2V0VGV4dFNpemVGb3JDb250cm9sSGVpZ2h0IiwiZWxlbWVudEJhc2VkUHJvcHMiLCJyb2xlIiwiZ2V0VGFiQ2xhc3NOYW1lIiwic3R5bGVzIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVLZXlQcmVzcyIsInByb3BUeXBlcyIsImZ1bmMiLCJib29sIiwic3RyaW5nIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsImRpc3BsYXkiLCJmb250V2VpZ2h0IiwicGFkZGluZ1giLCJtYXJnaW5YIiwiYm9yZGVyUmFkaXVzIiwibGluZUhlaWdodCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInRleHREZWNvcmF0aW9uIiwidGFiSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGtCQUFyQjtBQUNBLFNBQVNDLFNBQVQsUUFBMEIsYUFBMUI7O0lBRU1DLEc7Ozs7Ozs7Ozs7Ozs7Ozs7OzswRkFrRFUsVUFBQUMsQ0FBQyxFQUFJO0FBQ2pCLFlBQUtDLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkYsQ0FBbkI7O0FBQ0EsWUFBS0MsS0FBTCxDQUFXRSxRQUFYO0FBQ0QsSzs7NkZBRWdCLFVBQUFILENBQUMsRUFBSTtBQUNwQixVQUFJQSxDQUFDLENBQUNJLEdBQUYsS0FBVSxPQUFWLElBQXFCSixDQUFDLENBQUNJLEdBQUYsS0FBVSxHQUFuQyxFQUF3QztBQUN0QyxjQUFLSCxLQUFMLENBQVdFLFFBQVg7O0FBQ0FILFFBQUFBLENBQUMsQ0FBQ0ssY0FBRjtBQUNEOztBQUNELFlBQUtKLEtBQUwsQ0FBV0ssVUFBWCxDQUFzQk4sQ0FBdEI7QUFDRCxLOzs7Ozs7OzZCQUVRO0FBQUEsd0JBU0gsS0FBS0MsS0FURjtBQUFBLFVBRUxNLEtBRkssZUFFTEEsS0FGSztBQUFBLFVBR0xDLEVBSEssZUFHTEEsRUFISztBQUFBLFVBSUxDLE1BSkssZUFJTEEsTUFKSztBQUFBLFVBS0xOLFFBTEssZUFLTEEsUUFMSztBQUFBLFVBTUxPLFVBTkssZUFNTEEsVUFOSztBQUFBLFVBT0xDLFVBUEssZUFPTEEsVUFQSztBQUFBLFVBUUZWLEtBUkU7O0FBV1AsVUFBTVcsUUFBUSxHQUFHTCxLQUFLLENBQUNNLDJCQUFOLENBQWtDSixNQUFsQyxDQUFqQjtBQUVBLFVBQUlLLGlCQUFKOztBQUNBLFVBQUlOLEVBQUUsS0FBSyxHQUFYLEVBQWdCO0FBQ2Q7QUFDQTtBQUNBTSxRQUFBQSxpQkFBaUIsR0FBR0osVUFBVSxHQUMxQjtBQUNFLDBCQUFnQjtBQURsQixTQUQwQixHQUkxQixFQUpKO0FBS0QsT0FSRCxNQVFPO0FBQ0w7QUFDQTtBQUNBO0FBQ0FJLFFBQUFBLGlCQUFpQixHQUFHO0FBQ2xCLDJCQUFpQkosVUFEQztBQUVsQkssVUFBQUEsSUFBSSxFQUFFO0FBRlksU0FBcEI7QUFJRDs7QUFFRCxhQUNFLG9CQUFDLElBQUQ7QUFDRSxRQUFBLFNBQVMsRUFBRVIsS0FBSyxDQUFDUyxlQUFOLENBQXNCTCxVQUF0QixDQURiO0FBRUUsUUFBQSxFQUFFLEVBQUVILEVBRk47QUFHRSxRQUFBLElBQUksRUFBRUksUUFIUjtBQUlFLFFBQUEsTUFBTSxFQUFFSDtBQUpWLFNBS01WLEdBQUcsQ0FBQ2tCLE1BTFYsRUFNTWhCLEtBTk47QUFPRSxRQUFBLE9BQU8sRUFBRSxLQUFLaUIsV0FQaEI7QUFRRSxRQUFBLFVBQVUsRUFBRSxLQUFLQztBQVJuQixTQVNNTCxpQkFUTixFQURGO0FBYUQ7Ozs7RUE1R2VuQixhOztBQUFaSSxHOztnQkFBQUEsRyxpQ0FLQ0YsSUFBSSxDQUFDdUIsUztBQUVSOzs7QUFHQWpCLEVBQUFBLFFBQVEsRUFBRVAsU0FBUyxDQUFDeUIsSTs7QUFFcEI7OztBQUdBWCxFQUFBQSxVQUFVLEVBQUVkLFNBQVMsQ0FBQzBCLEk7O0FBRXRCOzs7O0FBSUFYLEVBQUFBLFVBQVUsRUFBRWYsU0FBUyxDQUFDMkIsTTs7QUFFdEI7OztBQUdBaEIsRUFBQUEsS0FBSyxFQUFFWCxTQUFTLENBQUM0QixNQUFWLENBQWlCQzs7O2dCQTFCdEIxQixHLGtCQTZCa0I7QUFDcEJHLEVBQUFBLE9BQU8sRUFBRSxtQkFBTSxDQUFFLENBREc7QUFFcEJDLEVBQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFLENBRkU7QUFHcEJHLEVBQUFBLFVBQVUsRUFBRSxzQkFBTSxDQUFFLENBSEE7QUFJcEJFLEVBQUFBLEVBQUUsRUFBRSxNQUpnQjtBQUtwQkMsRUFBQUEsTUFBTSxFQUFFO0FBTFksQzs7Z0JBN0JsQlYsRyxZQXFDWTtBQUNkMkIsRUFBQUEsT0FBTyxFQUFFLGFBREs7QUFFZEMsRUFBQUEsVUFBVSxFQUFFLEdBRkU7QUFHZEMsRUFBQUEsUUFBUSxFQUFFLENBSEk7QUFJZEMsRUFBQUEsT0FBTyxFQUFFLENBSks7QUFLZEMsRUFBQUEsWUFBWSxFQUFFLENBTEE7QUFNZEMsRUFBQUEsVUFBVSxFQUFFLE1BTkU7QUFPZEMsRUFBQUEsVUFBVSxFQUFFLFFBUEU7QUFRZEMsRUFBQUEsY0FBYyxFQUFFLFFBUkY7QUFTZEMsRUFBQUEsY0FBYyxFQUFFLE1BVEY7QUFVZEMsRUFBQUEsUUFBUSxFQUFFO0FBVkksQzs7QUEwRWxCLGVBQWVyQyxTQUFTLENBQUNDLEdBQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcblxuY2xhc3MgVGFiIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogQ29tcG9zZXMgdGhlIFRleHQgY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLlRleHQucHJvcFR5cGVzLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdHJpZ2dlcmVkIHdoZW4gdGFiIGlzIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIHRhYiBpcyBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBpc1NlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSB0YWIuXG4gICAgICogVGhlIGRlZmF1bHQgdGhlbWUgb25seSBjb21lcyB3aXRoIGEgZGVmYXVsdCBzdHlsZS5cbiAgICAgKi9cbiAgICBhcHBlYXJhbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogVGhlbWUgcHJvdmlkZWQgYnkgVGhlbWVQcm92aWRlci5cbiAgICAgKi9cbiAgICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIG9uQ2xpY2s6ICgpID0+IHt9LFxuICAgIG9uU2VsZWN0OiAoKSA9PiB7fSxcbiAgICBvbktleVByZXNzOiAoKSA9PiB7fSxcbiAgICBpczogJ3NwYW4nLFxuICAgIGhlaWdodDogMjhcbiAgfVxuXG4gIHN0YXRpYyBzdHlsZXMgPSB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgcGFkZGluZ1g6IDgsXG4gICAgbWFyZ2luWDogNCxcbiAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgbGluZUhlaWdodDogJzI4cHgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIHRhYkluZGV4OiAwXG4gIH1cblxuICBoYW5kbGVDbGljayA9IGUgPT4ge1xuICAgIHRoaXMucHJvcHMub25DbGljayhlKVxuICAgIHRoaXMucHJvcHMub25TZWxlY3QoKVxuICB9XG5cbiAgaGFuZGxlS2V5UHJlc3MgPSBlID0+IHtcbiAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXkgPT09ICcgJykge1xuICAgICAgdGhpcy5wcm9wcy5vblNlbGVjdCgpXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbktleVByZXNzKGUpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUsXG4gICAgICBpcyxcbiAgICAgIGhlaWdodCxcbiAgICAgIG9uU2VsZWN0LFxuICAgICAgaXNTZWxlY3RlZCxcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB0ZXh0U2l6ZSA9IHRoZW1lLmdldFRleHRTaXplRm9yQ29udHJvbEhlaWdodChoZWlnaHQpXG5cbiAgICBsZXQgZWxlbWVudEJhc2VkUHJvcHNcbiAgICBpZiAoaXMgPT09ICdhJykge1xuICAgICAgLy8gVXNlIGFyaWEtY3VycmVudCB3aGVuIGl0J3MgYSBsaW5rXG4gICAgICAvLyBodHRwczovL3RpbmsudWsvdXNpbmctdGhlLWFyaWEtY3VycmVudC1hdHRyaWJ1dGUvXG4gICAgICBlbGVtZW50QmFzZWRQcm9wcyA9IGlzU2VsZWN0ZWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAnYXJpYS1jdXJyZW50JzogJ3BhZ2UnXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzZSBhIHJvbGU9XCJ0YWJsaXN0XCIgYXJvdW5kIHRoZSB0YWJzXG4gICAgICAvLyBBbHNvIHBhc3MgZG93biBhIGFyaWEtY29udHJvbHM9XCJwYW5lbElkXCJcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnN0ZWZhbmp1ZGlzLmNvbS9ibG9nL2FyaWEtc2VsZWN0ZWQtYW5kLXdoZW4tdG8tdXNlLWl0L1xuICAgICAgZWxlbWVudEJhc2VkUHJvcHMgPSB7XG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogaXNTZWxlY3RlZCxcbiAgICAgICAgcm9sZTogJ3RhYidcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRleHRcbiAgICAgICAgY2xhc3NOYW1lPXt0aGVtZS5nZXRUYWJDbGFzc05hbWUoYXBwZWFyYW5jZSl9XG4gICAgICAgIGlzPXtpc31cbiAgICAgICAgc2l6ZT17dGV4dFNpemV9XG4gICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICB7Li4uVGFiLnN0eWxlc31cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfVxuICAgICAgICBvbktleVByZXNzPXt0aGlzLmhhbmRsZUtleVByZXNzfVxuICAgICAgICB7Li4uZWxlbWVudEJhc2VkUHJvcHN9XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoVGFiKVxuIl19