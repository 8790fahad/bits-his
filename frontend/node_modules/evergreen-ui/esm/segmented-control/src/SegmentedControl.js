import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { spacing, position, layout, dimensions } from 'ui-box';
import SegmentedControlRadio from './SegmentedControlRadio';
var radioCount = 1; // Used for generating unique input names

var SegmentedControl =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(SegmentedControl, _PureComponent);

  function SegmentedControl(props, context) {
    var _this;

    _classCallCheck(this, SegmentedControl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SegmentedControl).call(this, props, context));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isControlled", function () {
      return typeof _this.props.value !== 'undefined' && _this.props.value !== null;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (value) {
      // Save a render cycle when it's a controlled input
      if (!_this.isControlled()) {
        _this.setState({
          value: value
        });
      }

      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(value);
      }
    });

    var _value = props.defaultValue;

    if (typeof _value === 'undefined' || _value === null) {
      _value = props.options[0].value;
    }

    _this.state = {
      value: _value
    };
    _this.name = "SegmentedControl-".concat(radioCount);
    radioCount += 1;
    return _this;
  }

  _createClass(SegmentedControl, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          filterOutValue = _this$props.value,
          name = _this$props.name,
          height = _this$props.height,
          options = _this$props.options,
          onChange = _this$props.onChange,
          defaultValue = _this$props.defaultValue,
          props = _objectWithoutProperties(_this$props, ["value", "name", "height", "options", "onChange", "defaultValue"]); // Allows it to behave like a controlled input


      var value = this.state.value;

      if (this.isControlled()) {
        value = this.props.value;
      }

      return React.createElement(Box, _extends({
        display: "flex",
        marginRight: -1,
        height: height
      }, props), options.map(function (option, index) {
        return React.createElement(SegmentedControlRadio, {
          key: option.value,
          id: _this2.name + index,
          name: name || _this2.name,
          label: option.label,
          value: String(option.value),
          height: height,
          checked: value === option.value,
          onChange: _this2.handleChange.bind(null, option.value),
          appearance: "default",
          isFirstItem: index === 0,
          isLastItem: index === options.length - 1
        });
      }));
    }
  }]);

  return SegmentedControl;
}(PureComponent);

SegmentedControl.displayName = "SegmentedControl";

_defineProperty(SegmentedControl, "propTypes", _objectSpread({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {
  /**
   * The options for the radios of the Segmented Control.
   */
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.node.isRequired,
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]).isRequired
  })).isRequired,

  /**
   * The current value of the Segmented Control when controlled.
   */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),

  /**
   * The default value of the Segmented Control when uncontrolled.
   */
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),

  /**
   * Function called when the value changes.
   */
  onChange: PropTypes.func,

  /**
   * The name of the radio group.
   */
  name: PropTypes.string,

  /**
   * The height of the Segmented Control.
   */
  height: PropTypes.number
}));

_defineProperty(SegmentedControl, "defaultProps", {
  height: 32
});

export { SegmentedControl as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,