import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import { StackingOrder } from '../../constants';
import createAppearance from './createAppearance';
import missingStateWarning from './missingStateWarning';
var baseStyle = {
  WebkitFontSmoothing: 'antialiased',
  WebkitAppearance: 'none',
  verticalAlign: 'middle',
  textDecoration: 'none',
  border: 'none',
  outline: 'none',
  cursor: 'pointer',
  '&::-moz-focus-inner ': {
    border: 0
  }
};
var disabledState = "[disabled], [data-disabled]";
var hoverState = '&:not([disabled]):not([data-disabled]):hover';
var focusState = '&:not([disabled]):not([data-disabled]):focus';
var focusAndActiveState = '&:not([disabled]):not([data-disabled]):focus:active, &:not([disabled]):not([data-disabled])[aria-expanded="true"]:focus, &:not([disabled]):not([data-disabled])[data-active]:focus';
var activeState = '&:not([disabled]):not([data-disabled]):active, &:not([disabled]):not([data-disabled])[aria-expanded="true"], &:not([disabled]):not([data-disabled])[data-active]';
/**
 * @param {object} items - object with a set of items.
 * @return {object} the final appearance.
 */

var createButtonAppearance = function createButtonAppearance() {
  var _objectSpread2;

  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  missingStateWarning({
    items: items,
    props: ['base', 'hover', 'focus', 'active', 'focusAndActive', 'disabled'],
    cb: function cb(prop) {
      console.error("Themer.createButtonAppearance() is missing a ".concat(prop, " state in items: "), items);
    }
  });
  return _objectSpread({}, baseStyle, createAppearance(items.base), (_objectSpread2 = {}, _defineProperty(_objectSpread2, disabledState, _objectSpread({
    cursor: 'not-allowed'
  }, createAppearance(items.disabled))), _defineProperty(_objectSpread2, hoverState, createAppearance(items.hover)), _defineProperty(_objectSpread2, focusState, _objectSpread({
    zIndex: StackingOrder.FOCUSED
  }, createAppearance(items.focus))), _defineProperty(_objectSpread2, activeState, createAppearance(items.active)), _defineProperty(_objectSpread2, focusAndActiveState, createAppearance(items.focusAndActive)), _objectSpread2));
};

export default createButtonAppearance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90aGVtZXIvc3JjL2NyZWF0ZUJ1dHRvbkFwcGVhcmFuY2UuanMiXSwibmFtZXMiOlsiU3RhY2tpbmdPcmRlciIsImNyZWF0ZUFwcGVhcmFuY2UiLCJtaXNzaW5nU3RhdGVXYXJuaW5nIiwiYmFzZVN0eWxlIiwiV2Via2l0Rm9udFNtb290aGluZyIsIldlYmtpdEFwcGVhcmFuY2UiLCJ2ZXJ0aWNhbEFsaWduIiwidGV4dERlY29yYXRpb24iLCJib3JkZXIiLCJvdXRsaW5lIiwiY3Vyc29yIiwiZGlzYWJsZWRTdGF0ZSIsImhvdmVyU3RhdGUiLCJmb2N1c1N0YXRlIiwiZm9jdXNBbmRBY3RpdmVTdGF0ZSIsImFjdGl2ZVN0YXRlIiwiY3JlYXRlQnV0dG9uQXBwZWFyYW5jZSIsIml0ZW1zIiwicHJvcHMiLCJjYiIsInByb3AiLCJjb25zb2xlIiwiZXJyb3IiLCJiYXNlIiwiZGlzYWJsZWQiLCJob3ZlciIsInpJbmRleCIsIkZPQ1VTRUQiLCJmb2N1cyIsImFjdGl2ZSIsImZvY3VzQW5kQWN0aXZlIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGFBQVQsUUFBOEIsaUJBQTlCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsdUJBQWhDO0FBRUEsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxtQkFBbUIsRUFBRSxhQURMO0FBRWhCQyxFQUFBQSxnQkFBZ0IsRUFBRSxNQUZGO0FBR2hCQyxFQUFBQSxhQUFhLEVBQUUsUUFIQztBQUloQkMsRUFBQUEsY0FBYyxFQUFFLE1BSkE7QUFLaEJDLEVBQUFBLE1BQU0sRUFBRSxNQUxRO0FBTWhCQyxFQUFBQSxPQUFPLEVBQUUsTUFOTztBQU9oQkMsRUFBQUEsTUFBTSxFQUFFLFNBUFE7QUFRaEIsMEJBQXdCO0FBQ3RCRixJQUFBQSxNQUFNLEVBQUU7QUFEYztBQVJSLENBQWxCO0FBYUEsSUFBTUcsYUFBYSxnQ0FBbkI7QUFDQSxJQUFNQyxVQUFVLEdBQUcsOENBQW5CO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLDhDQUFuQjtBQUNBLElBQU1DLG1CQUFtQixHQUN2QixvTEFERjtBQUVBLElBQU1DLFdBQVcsR0FDZixrS0FERjtBQUdBOzs7OztBQUlBLElBQU1DLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsR0FBZ0I7QUFBQTs7QUFBQSxNQUFmQyxLQUFlLHVFQUFQLEVBQU87QUFDN0NmLEVBQUFBLG1CQUFtQixDQUFDO0FBQ2xCZSxJQUFBQSxLQUFLLEVBQUxBLEtBRGtCO0FBRWxCQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQyxNQUFELEVBQVMsT0FBVCxFQUFrQixPQUFsQixFQUEyQixRQUEzQixFQUFxQyxnQkFBckMsRUFBdUQsVUFBdkQsQ0FGVztBQUdsQkMsSUFBQUEsRUFBRSxFQUFFLFlBQUFDLElBQUksRUFBSTtBQUNWQyxNQUFBQSxPQUFPLENBQUNDLEtBQVIsd0RBQ2tERixJQURsRCx3QkFFRUgsS0FGRjtBQUlEO0FBUmlCLEdBQUQsQ0FBbkI7QUFXQSwyQkFDS2QsU0FETCxFQUVLRixnQkFBZ0IsQ0FBQ2dCLEtBQUssQ0FBQ00sSUFBUCxDQUZyQix3REFHR1osYUFISDtBQUlJRCxJQUFBQSxNQUFNLEVBQUU7QUFKWixLQUtPVCxnQkFBZ0IsQ0FBQ2dCLEtBQUssQ0FBQ08sUUFBUCxDQUx2QixvQ0FPR1osVUFQSCxFQU9nQlgsZ0JBQWdCLENBQUNnQixLQUFLLENBQUNRLEtBQVAsQ0FQaEMsbUNBUUdaLFVBUkg7QUFTSWEsSUFBQUEsTUFBTSxFQUFFMUIsYUFBYSxDQUFDMkI7QUFUMUIsS0FVTzFCLGdCQUFnQixDQUFDZ0IsS0FBSyxDQUFDVyxLQUFQLENBVnZCLG9DQVlHYixXQVpILEVBWWlCZCxnQkFBZ0IsQ0FBQ2dCLEtBQUssQ0FBQ1ksTUFBUCxDQVpqQyxtQ0FhR2YsbUJBYkgsRUFheUJiLGdCQUFnQixDQUFDZ0IsS0FBSyxDQUFDYSxjQUFQLENBYnpDO0FBZUQsQ0EzQkQ7O0FBNEJBLGVBQWVkLHNCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2tpbmdPcmRlciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCBjcmVhdGVBcHBlYXJhbmNlIGZyb20gJy4vY3JlYXRlQXBwZWFyYW5jZSdcbmltcG9ydCBtaXNzaW5nU3RhdGVXYXJuaW5nIGZyb20gJy4vbWlzc2luZ1N0YXRlV2FybmluZydcblxuY29uc3QgYmFzZVN0eWxlID0ge1xuICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICBib3JkZXI6ICdub25lJyxcbiAgb3V0bGluZTogJ25vbmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXIgJzoge1xuICAgIGJvcmRlcjogMFxuICB9XG59XG5cbmNvbnN0IGRpc2FibGVkU3RhdGUgPSBgW2Rpc2FibGVkXSwgW2RhdGEtZGlzYWJsZWRdYFxuY29uc3QgaG92ZXJTdGF0ZSA9ICcmOm5vdChbZGlzYWJsZWRdKTpub3QoW2RhdGEtZGlzYWJsZWRdKTpob3ZlcidcbmNvbnN0IGZvY3VzU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkXSk6bm90KFtkYXRhLWRpc2FibGVkXSk6Zm9jdXMnXG5jb25zdCBmb2N1c0FuZEFjdGl2ZVN0YXRlID1cbiAgJyY6bm90KFtkaXNhYmxlZF0pOm5vdChbZGF0YS1kaXNhYmxlZF0pOmZvY3VzOmFjdGl2ZSwgJjpub3QoW2Rpc2FibGVkXSk6bm90KFtkYXRhLWRpc2FibGVkXSlbYXJpYS1leHBhbmRlZD1cInRydWVcIl06Zm9jdXMsICY6bm90KFtkaXNhYmxlZF0pOm5vdChbZGF0YS1kaXNhYmxlZF0pW2RhdGEtYWN0aXZlXTpmb2N1cydcbmNvbnN0IGFjdGl2ZVN0YXRlID1cbiAgJyY6bm90KFtkaXNhYmxlZF0pOm5vdChbZGF0YS1kaXNhYmxlZF0pOmFjdGl2ZSwgJjpub3QoW2Rpc2FibGVkXSk6bm90KFtkYXRhLWRpc2FibGVkXSlbYXJpYS1leHBhbmRlZD1cInRydWVcIl0sICY6bm90KFtkaXNhYmxlZF0pOm5vdChbZGF0YS1kaXNhYmxlZF0pW2RhdGEtYWN0aXZlXSdcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbXMgLSBvYmplY3Qgd2l0aCBhIHNldCBvZiBpdGVtcy5cbiAqIEByZXR1cm4ge29iamVjdH0gdGhlIGZpbmFsIGFwcGVhcmFuY2UuXG4gKi9cbmNvbnN0IGNyZWF0ZUJ1dHRvbkFwcGVhcmFuY2UgPSAoaXRlbXMgPSB7fSkgPT4ge1xuICBtaXNzaW5nU3RhdGVXYXJuaW5nKHtcbiAgICBpdGVtcyxcbiAgICBwcm9wczogWydiYXNlJywgJ2hvdmVyJywgJ2ZvY3VzJywgJ2FjdGl2ZScsICdmb2N1c0FuZEFjdGl2ZScsICdkaXNhYmxlZCddLFxuICAgIGNiOiBwcm9wID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBUaGVtZXIuY3JlYXRlQnV0dG9uQXBwZWFyYW5jZSgpIGlzIG1pc3NpbmcgYSAke3Byb3B9IHN0YXRlIGluIGl0ZW1zOiBgLFxuICAgICAgICBpdGVtc1xuICAgICAgKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIC4uLmJhc2VTdHlsZSxcbiAgICAuLi5jcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmJhc2UpLFxuICAgIFtkaXNhYmxlZFN0YXRlXToge1xuICAgICAgY3Vyc29yOiAnbm90LWFsbG93ZWQnLFxuICAgICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5kaXNhYmxlZClcbiAgICB9LFxuICAgIFtob3ZlclN0YXRlXTogY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5ob3ZlciksXG4gICAgW2ZvY3VzU3RhdGVdOiB7XG4gICAgICB6SW5kZXg6IFN0YWNraW5nT3JkZXIuRk9DVVNFRCxcbiAgICAgIC4uLmNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuZm9jdXMpXG4gICAgfSxcbiAgICBbYWN0aXZlU3RhdGVdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmFjdGl2ZSksXG4gICAgW2ZvY3VzQW5kQWN0aXZlU3RhdGVdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmZvY3VzQW5kQWN0aXZlKVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCdXR0b25BcHBlYXJhbmNlXG4iXX0=