import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import { StackingOrder } from '../../constants';
import missingStateWarning from './missingStateWarning';
import createAppearance from './createAppearance';
var baseStyle = {
  WebkitAppearance: 'none',
  border: 'none'
};
var invalidState = '&[aria-invalid="true"]';
var placeholder = '&::placeholder';
var focusState = '&:focus';
var disabledState = '&:disabled';
/**
 * @param {object} items - object with a set of states.
 * @return {object} the final appearance.
 */

var createInputAppearance = function createInputAppearance() {
  var _objectSpread2;

  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  missingStateWarning({
    items: items,
    props: ['base', 'invalid', 'placeholder', 'focus', 'disabled'],
    cb: function cb(prop) {
      console.error("Themer.createCheckboxAppearance() is missing a ".concat(prop, " item "), items);
    }
  });
  return _objectSpread({}, baseStyle, createAppearance(items.base), (_objectSpread2 = {}, _defineProperty(_objectSpread2, invalidState, createAppearance(items.invalid)), _defineProperty(_objectSpread2, placeholder, createAppearance(items.placeholder)), _defineProperty(_objectSpread2, focusState, _objectSpread({
    zIndex: StackingOrder.FOCUSED
  }, createAppearance(items.focus))), _defineProperty(_objectSpread2, disabledState, _objectSpread({
    cursor: 'not-allowed'
  }, createAppearance(items.disabled))), _objectSpread2));
};

export default createInputAppearance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90aGVtZXIvc3JjL2NyZWF0ZUlucHV0QXBwZWFyYW5jZS5qcyJdLCJuYW1lcyI6WyJTdGFja2luZ09yZGVyIiwibWlzc2luZ1N0YXRlV2FybmluZyIsImNyZWF0ZUFwcGVhcmFuY2UiLCJiYXNlU3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiYm9yZGVyIiwiaW52YWxpZFN0YXRlIiwicGxhY2Vob2xkZXIiLCJmb2N1c1N0YXRlIiwiZGlzYWJsZWRTdGF0ZSIsImNyZWF0ZUlucHV0QXBwZWFyYW5jZSIsIml0ZW1zIiwicHJvcHMiLCJjYiIsInByb3AiLCJjb25zb2xlIiwiZXJyb3IiLCJiYXNlIiwiaW52YWxpZCIsInpJbmRleCIsIkZPQ1VTRUQiLCJmb2N1cyIsImN1cnNvciIsImRpc2FibGVkIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGFBQVQsUUFBOEIsaUJBQTlCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsdUJBQWhDO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBRUEsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxnQkFBZ0IsRUFBRSxNQURGO0FBRWhCQyxFQUFBQSxNQUFNLEVBQUU7QUFGUSxDQUFsQjtBQUtBLElBQU1DLFlBQVksR0FBRyx3QkFBckI7QUFDQSxJQUFNQyxXQUFXLEdBQUcsZ0JBQXBCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLFNBQW5CO0FBQ0EsSUFBTUMsYUFBYSxHQUFHLFlBQXRCO0FBRUE7Ozs7O0FBSUEsSUFBTUMscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixHQUFnQjtBQUFBOztBQUFBLE1BQWZDLEtBQWUsdUVBQVAsRUFBTztBQUM1Q1YsRUFBQUEsbUJBQW1CLENBQUM7QUFDbEJVLElBQUFBLEtBQUssRUFBTEEsS0FEa0I7QUFFbEJDLElBQUFBLEtBQUssRUFBRSxDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLGFBQXBCLEVBQW1DLE9BQW5DLEVBQTRDLFVBQTVDLENBRlc7QUFHbEJDLElBQUFBLEVBQUUsRUFBRSxZQUFBQyxJQUFJLEVBQUk7QUFDVkMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLDBEQUNvREYsSUFEcEQsYUFFRUgsS0FGRjtBQUlEO0FBUmlCLEdBQUQsQ0FBbkI7QUFXQSwyQkFDS1IsU0FETCxFQUVLRCxnQkFBZ0IsQ0FBQ1MsS0FBSyxDQUFDTSxJQUFQLENBRnJCLHdEQUdHWCxZQUhILEVBR2tCSixnQkFBZ0IsQ0FBQ1MsS0FBSyxDQUFDTyxPQUFQLENBSGxDLG1DQUlHWCxXQUpILEVBSWlCTCxnQkFBZ0IsQ0FBQ1MsS0FBSyxDQUFDSixXQUFQLENBSmpDLG1DQUtHQyxVQUxIO0FBTUlXLElBQUFBLE1BQU0sRUFBRW5CLGFBQWEsQ0FBQ29CO0FBTjFCLEtBT09sQixnQkFBZ0IsQ0FBQ1MsS0FBSyxDQUFDVSxLQUFQLENBUHZCLG9DQVNHWixhQVRIO0FBVUlhLElBQUFBLE1BQU0sRUFBRTtBQVZaLEtBV09wQixnQkFBZ0IsQ0FBQ1MsS0FBSyxDQUFDWSxRQUFQLENBWHZCO0FBY0QsQ0ExQkQ7O0FBNEJBLGVBQWViLHFCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2tpbmdPcmRlciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCBtaXNzaW5nU3RhdGVXYXJuaW5nIGZyb20gJy4vbWlzc2luZ1N0YXRlV2FybmluZydcbmltcG9ydCBjcmVhdGVBcHBlYXJhbmNlIGZyb20gJy4vY3JlYXRlQXBwZWFyYW5jZSdcblxuY29uc3QgYmFzZVN0eWxlID0ge1xuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIGJvcmRlcjogJ25vbmUnXG59XG5cbmNvbnN0IGludmFsaWRTdGF0ZSA9ICcmW2FyaWEtaW52YWxpZD1cInRydWVcIl0nXG5jb25zdCBwbGFjZWhvbGRlciA9ICcmOjpwbGFjZWhvbGRlcidcbmNvbnN0IGZvY3VzU3RhdGUgPSAnJjpmb2N1cydcbmNvbnN0IGRpc2FibGVkU3RhdGUgPSAnJjpkaXNhYmxlZCdcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbXMgLSBvYmplY3Qgd2l0aCBhIHNldCBvZiBzdGF0ZXMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBmaW5hbCBhcHBlYXJhbmNlLlxuICovXG5jb25zdCBjcmVhdGVJbnB1dEFwcGVhcmFuY2UgPSAoaXRlbXMgPSB7fSkgPT4ge1xuICBtaXNzaW5nU3RhdGVXYXJuaW5nKHtcbiAgICBpdGVtcyxcbiAgICBwcm9wczogWydiYXNlJywgJ2ludmFsaWQnLCAncGxhY2Vob2xkZXInLCAnZm9jdXMnLCAnZGlzYWJsZWQnXSxcbiAgICBjYjogcHJvcCA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgVGhlbWVyLmNyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZSgpIGlzIG1pc3NpbmcgYSAke3Byb3B9IGl0ZW0gYCxcbiAgICAgICAgaXRlbXNcbiAgICAgIClcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5iYXNlU3R5bGUsXG4gICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5iYXNlKSxcbiAgICBbaW52YWxpZFN0YXRlXTogY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5pbnZhbGlkKSxcbiAgICBbcGxhY2Vob2xkZXJdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLnBsYWNlaG9sZGVyKSxcbiAgICBbZm9jdXNTdGF0ZV06IHtcbiAgICAgIHpJbmRleDogU3RhY2tpbmdPcmRlci5GT0NVU0VELFxuICAgICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5mb2N1cylcbiAgICB9LFxuICAgIFtkaXNhYmxlZFN0YXRlXToge1xuICAgICAgY3Vyc29yOiAnbm90LWFsbG93ZWQnLFxuICAgICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5kaXNhYmxlZClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSW5wdXRBcHBlYXJhbmNlXG4iXX0=