import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import createAppearance from './createAppearance';
import missingStateWarning from './missingStateWarning';
var defaultState = '& + div';
var disabledState = '&[disabled] + div';
var hoverState = '&:not([disabled]):hover + div';
var focusState = '&:not([disabled]):focus + div';
var activeState = '&:not([disabled]):active + div';
var checkedState = '&:checked + div, &[type=checkbox]:indeterminate + div';
var checkedHoverState = '&:not([disabled]):checked:hover + div, &[type=checkbox]:not([disabled]):indeterminate:hover + div';
var checkedActiveState = '&:not([disabled]):checked:active + div, &[type=checkbox]:not([disabled]):indeterminate:active + div';
var checkedDisabledState = '&[disabled]:checked + div, &[type=checkbox][disabled]:indeterminate + div';
var hiddenCheckboxStyle = {
  border: '0',
  clip: 'rect(1px, 1px, 1px, 1px)',
  height: '1',
  overflow: 'hidden',
  padding: '0',
  position: 'absolute',
  whiteSpace: 'nowrap',
  width: '1',
  opacity: '0'
};
var baseStyle = {
  WebkitFontSmoothing: 'antialiased',
  textDecoration: 'none',
  WebkitAppearance: 'none',
  border: 'none',
  outline: 'none',
  cursor: 'pointer'
};
var checkedStyles = {
  '& > svg': {
    display: 'block'
  }
  /**
   * @param {object} items - object with a set of items.
   * @return {object} the final appearance.
   */

};

var createCheckboxAppearance = function createCheckboxAppearance() {
  var _objectSpread2;

  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  missingStateWarning({
    items: items,
    props: ['base', 'hover', 'focus', 'active', 'disabled', 'checked', 'checkedDisabled', 'checkedHover', 'checkedActive'],
    cb: function cb(prop) {
      console.error("Themer.createCheckboxAppearance() is missing a ".concat(prop, " state in items: "), items);
    }
  });
  return _objectSpread({}, hiddenCheckboxStyle, (_objectSpread2 = {
    '& + div > svg': {
      display: 'none'
    }
  }, _defineProperty(_objectSpread2, defaultState, _objectSpread({}, baseStyle, createAppearance(items.base))), _defineProperty(_objectSpread2, hoverState, createAppearance(items.hover)), _defineProperty(_objectSpread2, focusState, createAppearance(items.focus)), _defineProperty(_objectSpread2, activeState, createAppearance(items.active)), _defineProperty(_objectSpread2, disabledState, createAppearance(items.disabled)), _defineProperty(_objectSpread2, checkedState, _objectSpread({}, checkedStyles, createAppearance(items.checked))), _defineProperty(_objectSpread2, checkedHoverState, _objectSpread({}, checkedStyles, createAppearance(items.checkedHover))), _defineProperty(_objectSpread2, checkedDisabledState, _objectSpread({}, checkedStyles, createAppearance(items.checkedDisabled))), _defineProperty(_objectSpread2, checkedActiveState, _objectSpread({}, checkedStyles, createAppearance(items.checkedActive))), _objectSpread2));
};

export default createCheckboxAppearance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90aGVtZXIvc3JjL2NyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZS5qcyJdLCJuYW1lcyI6WyJjcmVhdGVBcHBlYXJhbmNlIiwibWlzc2luZ1N0YXRlV2FybmluZyIsImRlZmF1bHRTdGF0ZSIsImRpc2FibGVkU3RhdGUiLCJob3ZlclN0YXRlIiwiZm9jdXNTdGF0ZSIsImFjdGl2ZVN0YXRlIiwiY2hlY2tlZFN0YXRlIiwiY2hlY2tlZEhvdmVyU3RhdGUiLCJjaGVja2VkQWN0aXZlU3RhdGUiLCJjaGVja2VkRGlzYWJsZWRTdGF0ZSIsImhpZGRlbkNoZWNrYm94U3R5bGUiLCJib3JkZXIiLCJjbGlwIiwiaGVpZ2h0Iiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwicG9zaXRpb24iLCJ3aGl0ZVNwYWNlIiwid2lkdGgiLCJvcGFjaXR5IiwiYmFzZVN0eWxlIiwiV2Via2l0Rm9udFNtb290aGluZyIsInRleHREZWNvcmF0aW9uIiwiV2Via2l0QXBwZWFyYW5jZSIsIm91dGxpbmUiLCJjdXJzb3IiLCJjaGVja2VkU3R5bGVzIiwiZGlzcGxheSIsImNyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZSIsIml0ZW1zIiwicHJvcHMiLCJjYiIsInByb3AiLCJjb25zb2xlIiwiZXJyb3IiLCJiYXNlIiwiaG92ZXIiLCJmb2N1cyIsImFjdGl2ZSIsImRpc2FibGVkIiwiY2hlY2tlZCIsImNoZWNrZWRIb3ZlciIsImNoZWNrZWREaXNhYmxlZCIsImNoZWNrZWRBY3RpdmUiXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBT0EsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsdUJBQWhDO0FBRUEsSUFBTUMsWUFBWSxHQUFHLFNBQXJCO0FBQ0EsSUFBTUMsYUFBYSxHQUFHLG1CQUF0QjtBQUNBLElBQU1DLFVBQVUsR0FBRywrQkFBbkI7QUFDQSxJQUFNQyxVQUFVLEdBQUcsK0JBQW5CO0FBQ0EsSUFBTUMsV0FBVyxHQUFHLGdDQUFwQjtBQUNBLElB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bmltcG9ydCBtaXNzaW5nU3RhdGVXYXJuaW5nIGZyb20gJy4vbWlzc2luZ1N0YXRlV2FybmluZydcblxuY29uc3QgZGVmYXVsdFN0YXRlID0gJyYgKyBkaXYnXG5jb25zdCBkaXNhYmxlZFN0YXRlID0gJyZbZGlzYWJsZWRdICsgZGl2J1xuY29uc3QgaG92ZXJTdGF0ZSA9ICcmOm5vdChbZGlzYWJsZWRdKTpob3ZlciArIGRpdidcbmNvbnN0IGZvY3VzU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgKyBkaXYnXG5jb25zdCBhY3RpdmVTdGF0ZSA9ICcmOm5vdChbZGlzYWJsZWRdKTphY3RpdmUgKyBkaXYnXG5jb25zdCBjaGVja2VkU3RhdGUgPSAnJjpjaGVja2VkICsgZGl2LCAmW3R5cGU9Y2hlY2tib3hdOmluZGV0ZXJtaW5hdGUgKyBkaXYnXG5jb25zdCBjaGVja2VkSG92ZXJTdGF0ZSA9XG4gICcmOm5vdChbZGlzYWJsZWRdKTpjaGVja2VkOmhvdmVyICsgZGl2LCAmW3R5cGU9Y2hlY2tib3hdOm5vdChbZGlzYWJsZWRdKTppbmRldGVybWluYXRlOmhvdmVyICsgZGl2J1xuY29uc3QgY2hlY2tlZEFjdGl2ZVN0YXRlID1cbiAgJyY6bm90KFtkaXNhYmxlZF0pOmNoZWNrZWQ6YWN0aXZlICsgZGl2LCAmW3R5cGU9Y2hlY2tib3hdOm5vdChbZGlzYWJsZWRdKTppbmRldGVybWluYXRlOmFjdGl2ZSArIGRpdidcbmNvbnN0IGNoZWNrZWREaXNhYmxlZFN0YXRlID1cbiAgJyZbZGlzYWJsZWRdOmNoZWNrZWQgKyBkaXYsICZbdHlwZT1jaGVja2JveF1bZGlzYWJsZWRdOmluZGV0ZXJtaW5hdGUgKyBkaXYnXG5cbmNvbnN0IGhpZGRlbkNoZWNrYm94U3R5bGUgPSB7XG4gIGJvcmRlcjogJzAnLFxuICBjbGlwOiAncmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpJyxcbiAgaGVpZ2h0OiAnMScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcGFkZGluZzogJzAnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIHdpZHRoOiAnMScsXG4gIG9wYWNpdHk6ICcwJ1xufVxuXG5jb25zdCBiYXNlU3R5bGUgPSB7XG4gIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIG91dGxpbmU6ICdub25lJyxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn1cblxuY29uc3QgY2hlY2tlZFN0eWxlcyA9IHtcbiAgJyYgPiBzdmcnOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gb2JqZWN0IHdpdGggYSBzZXQgb2YgaXRlbXMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBmaW5hbCBhcHBlYXJhbmNlLlxuICovXG5jb25zdCBjcmVhdGVDaGVja2JveEFwcGVhcmFuY2UgPSAoaXRlbXMgPSB7fSkgPT4ge1xuICBtaXNzaW5nU3RhdGVXYXJuaW5nKHtcbiAgICBpdGVtcyxcbiAgICBwcm9wczogW1xuICAgICAgJ2Jhc2UnLFxuICAgICAgJ2hvdmVyJyxcbiAgICAgICdmb2N1cycsXG4gICAgICAnYWN0aXZlJyxcbiAgICAgICdkaXNhYmxlZCcsXG4gICAgICAnY2hlY2tlZCcsXG4gICAgICAnY2hlY2tlZERpc2FibGVkJyxcbiAgICAgICdjaGVja2VkSG92ZXInLFxuICAgICAgJ2NoZWNrZWRBY3RpdmUnXG4gICAgXSxcbiAgICBjYjogcHJvcCA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgVGhlbWVyLmNyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZSgpIGlzIG1pc3NpbmcgYSAke3Byb3B9IHN0YXRlIGluIGl0ZW1zOiBgLFxuICAgICAgICBpdGVtc1xuICAgICAgKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIC4uLmhpZGRlbkNoZWNrYm94U3R5bGUsXG4gICAgJyYgKyBkaXYgPiBzdmcnOiB7IGRpc3BsYXk6ICdub25lJyB9LFxuICAgIFtkZWZhdWx0U3RhdGVdOiB7IC4uLmJhc2VTdHlsZSwgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5iYXNlKSB9LFxuICAgIFtob3ZlclN0YXRlXTogY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5ob3ZlciksXG4gICAgW2ZvY3VzU3RhdGVdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmZvY3VzKSxcbiAgICBbYWN0aXZlU3RhdGVdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmFjdGl2ZSksXG4gICAgW2Rpc2FibGVkU3RhdGVdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmRpc2FibGVkKSxcbiAgICBbY2hlY2tlZFN0YXRlXTogeyAuLi5jaGVja2VkU3R5bGVzLCAuLi5jcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmNoZWNrZWQpIH0sXG4gICAgW2NoZWNrZWRIb3ZlclN0YXRlXToge1xuICAgICAgLi4uY2hlY2tlZFN0eWxlcyxcbiAgICAgIC4uLmNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuY2hlY2tlZEhvdmVyKVxuICAgIH0sXG4gICAgW2NoZWNrZWREaXNhYmxlZFN0YXRlXToge1xuICAgICAgLi4uY2hlY2tlZFN0eWxlcyxcbiAgICAgIC4uLmNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuY2hlY2tlZERpc2FibGVkKVxuICAgIH0sXG4gICAgW2NoZWNrZWRBY3RpdmVTdGF0ZV06IHtcbiAgICAgIC4uLmNoZWNrZWRTdHlsZXMsXG4gICAgICAuLi5jcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmNoZWNrZWRBY3RpdmUpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZVxuIl19