import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import { withTheme } from '../../theme';
import { Portal } from '../../portal';
import { Stack } from '../../stack';
import TextTableCell from './TextTableCell';
import TableCell from './TableCell';
import EditableCellField from './EditableCellField';

var EditableCell =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(EditableCell, _React$PureComponent);

  function EditableCell() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, EditableCell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      value: _this.props.children
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMainRef", function (ref) {
      _this.mainRef = ref;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onOverlayRef", function (ref) {
      _this.overlayRef = ref;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDoubleClick", function () {
      if (_this.props.disabled || !_this.props.isSelectable) return;

      _this.setState({
        isEditing: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (e) {
      if (_this.props.disabled) return;
      var key = e.key;
      /**
       * When the user presses a character on the keyboard, use that character
       * as the value in the text field.
       */

      if (key.match(/^[a-z]{0,10}$/) && !e.metaKey && !e.ctrlKey && !e.altKey) {
        _this.setState({
          isEditing: true,
          value: key
        });
      } else if (key === 'Enter') {
        _this.setState({
          isEditing: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFieldChangeComplete", function (value) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          isSelectable = _this$props.isSelectable;
      var currentValue = _this.state.value;

      _this.setState({
        isEditing: false,
        value: value
      });

      if (currentValue !== value && typeof onChange === 'function') {
        onChange(value);
      }

      if (_this.mainRef && isSelectable) {
        _this.mainRef.focus();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFieldCancel", function () {
      _this.setState({
        isEditing: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function () {
      _this.mainRef.focus();
    });

    return _this;
  }

  _createClass(EditableCell, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          theme = _this$props2.theme,
          size = _this$props2.size,
          disabled = _this$props2.disabled,
          placeholder = _this$props2.placeholder,
          isSelectable = _this$props2.isSelectable,
          _this$props2$textProp = _this$props2.textProps,
          textProps = _this$props2$textProp === void 0 ? {} : _this$props2$textProp,
          props = _objectWithoutProperties(_this$props2, ["children", "theme", "size", "disabled", "placeholder", "isSelectable", "textProps"]);

      var _this$state = this.state,
          isEditing = _this$state.isEditing,
          value = _this$state.value;
      return React.createElement(React.Fragment, null, React.createElement(TextTableCell, _extends({
        innerRef: this.onMainRef,
        isSelectable: isSelectable && !disabled,
        onClick: this.handleClick,
        onDoubleClick: this.handleDoubleClick,
        onKeyDown: this.handleKeyDown,
        cursor: disabled ? 'not-allowed' : isSelectable ? 'default' : 'text',
        textProps: _objectSpread({
          size: size,
          opacity: disabled || !children && placeholder ? 0.5 : 1
        }, textProps)
      }, props), children ? children : placeholder), isEditing && React.createElement(Portal, null, React.createElement(Stack, null, function (zIndex) {
        return React.createElement(EditableCellField, {
          zIndex: zIndex,
          getTargetRef: function getTargetRef() {
            return _this2.mainRef;
          },
          value: value,
          onEscape: _this2.handleFieldEscape,
          onChangeComplete: _this2.handleFieldChangeComplete,
          onCancel: _this2.handleFieldCancel,
          size: size
        });
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.children !== state.value) {
        return {
          value: props.children
        };
      }

      return null;
    }
  }]);

  return EditableCell;
}(React.PureComponent);

EditableCell.displayName = "EditableCell";

_defineProperty(EditableCell, "propTypes", _objectSpread({}, TableCell.propTypes, {
  /*
  * Makes the TableCell focusable.
  * Will add tabIndex={-1 || this.props.tabIndex}.
  */
  isSelectable: PropTypes.bool.isRequired,

  /**
   * When true, the cell can't be edited.
   */
  disabled: PropTypes.bool,

  /**
   * Optional placeholder when children is falsy.
   */
  placeholder: PropTypes.node,

  /**
   * The size used for the TextTableCell and Textarea.
   */
  size: PropTypes.oneOf([300, 400]).isRequired,

  /**
   * This is the value of the cell.
   */
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Function called when value changes. (value: string) => void.
   */
  onChange: PropTypes.func
}));

_defineProperty(EditableCell, "defaultProps", {
  size: 300,
  isSelectable: true
});

export default withTheme(EditableCell);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvRWRpdGFibGVDZWxsLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHJvcFR5cGVzIiwid2l0aFRoZW1lIiwiUG9ydGFsIiwiU3RhY2siLCJUZXh0VGFibGVDZWxsIiwiVGFibGVDZWxsIiwiRWRpdGFibGVDZWxsRmllbGQiLCJFZGl0YWJsZUNlbGwiLCJ2YWx1ZSIsInByb3BzIiwiY2hpbGRyZW4iLCJyZWYiLCJtYWluUmVmIiwib3ZlcmxheVJlZiIsImRpc2FibGVkIiwiaXNTZWxlY3RhYmxlIiwic2V0U3RhdGUiLCJpc0VkaXRpbmciLCJlIiwia2V5IiwibWF0Y2giLCJtZXRhS2V5IiwiY3RybEtleSIsImFsdEtleSIsIm9uQ2hhbmdlIiwiY3VycmVudFZhbHVlIiwic3RhdGUiLCJmb2N1cyIsInRoZW1lIiwic2l6ZSIsInBsYWNlaG9sZGVyIiwidGV4dFByb3BzIiwib25NYWluUmVmIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVEb3VibGVDbGljayIsImhhbmRsZUtleURvd24iLCJvcGFjaXR5IiwiekluZGV4IiwiaGFuZGxlRmllbGRFc2NhcGUiLCJoYW5kbGVGaWVsZENoYW5nZUNvbXBsZXRlIiwiaGFuZGxlRmllbGRDYW5jZWwiLCJQdXJlQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiYm9vbCIsImlzUmVxdWlyZWQiLCJub2RlIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJudW1iZXIiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGFBQTFCO0FBQ0EsU0FBU0MsTUFBVCxRQUF1QixjQUF2QjtBQUNBLFNBQVNDLEtBQVQsUUFBc0IsYUFBdEI7QUFDQSxPQUFPQyxhQUFQLE1BQTBCLGlCQUExQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsYUFBdEI7QUFDQSxPQUFPQyxpQkFBUCxNQUE4QixxQkFBOUI7O0lBRU1DLFk7Ozs7Ozs7Ozs7Ozs7Ozs7OztvRkFxREk7QUFDTkMsTUFBQUEsS0FBSyxFQUFFLE1BQUtDLEtBQUwsQ0FBV0M7QUFEWixLOzt3RkFJSSxVQUFBQyxHQUFHLEVBQUk7QUFDakIsWUFBS0MsT0FBTCxHQUFlRCxHQUFmO0FBQ0QsSzs7MkZBRWMsVUFBQUEsR0FBRyxFQUFJO0FBQ3BCLFlBQUtFLFVBQUwsR0FBa0JGLEdBQWxCO0FBQ0QsSzs7Z0dBRW1CLFlBQU07QUFDeEIsVUFBSSxNQUFLRixLQUFMLENBQVdLLFFBQVgsSUFBdUIsQ0FBQyxNQUFLTCxLQUFMLENBQVdNLFlBQXZDLEVBQXFEOztBQUVyRCxZQUFLQyxRQUFMLENBQWM7QUFDWkMsUUFBQUEsU0FBUyxFQUFFO0FBREMsT0FBZDtBQUdELEs7OzRGQUVlLFVBQUFDLENBQUMsRUFBSTtBQUNuQixVQUFJLE1BQUtULEtBQUwsQ0FBV0ssUUFBZixFQUF5QjtBQUROLFVBRVhLLEdBRlcsR0FFSEQsQ0FGRyxDQUVYQyxHQUZXO0FBSW5COzs7OztBQUlBLFVBQUlBLEdBQUcsQ0FBQ0MsS0FBSixDQUFVLGVBQVYsS0FBOEIsQ0FBQ0YsQ0FBQyxDQUFDRyxPQUFqQyxJQUE0QyxDQUFDSCxDQUFDLENBQUNJLE9BQS9DLElBQTBELENBQUNKLENBQUMsQ0FBQ0ssTUFBakUsRUFBeUU7QUFDdkUsY0FBS1AsUUFBTCxDQUFjO0FBQ1pDLFVBQUFBLFNBQVMsRUFBRSxJQURDO0FBRVpULFVBQUFBLEtBQUssRUFBRVc7QUFGSyxTQUFkO0FBSUQsT0FMRCxNQUtPLElBQUlBLEdBQUcsS0FBSyxPQUFaLEVBQXFCO0FBQzFCLGNBQUtILFFBQUwsQ0FBYztBQUNaQyxVQUFBQSxTQUFTLEVBQUU7QUFEQyxTQUFkO0FBR0Q7QUFDRixLOzt3R0FFMkIsVUFBQVQsS0FBSyxFQUFJO0FBQUEsd0JBQ0EsTUFBS0MsS0FETDtBQUFBLFVBQzNCZSxRQUQyQixlQUMzQkEsUUFEMkI7QUFBQSxVQUNqQlQsWUFEaUIsZUFDakJBLFlBRGlCO0FBRW5DLFVBQU1VLFlBQVksR0FBRyxNQUFLQyxLQUFMLENBQVdsQixLQUFoQzs7QUFFQSxZQUFLUSxRQUFMLENBQWM7QUFDWkMsUUFBQUEsU0FBUyxFQUFFLEtBREM7QUFFWlQsUUFBQUEsS0FBSyxFQUFMQTtBQUZZLE9BQWQ7O0FBS0EsVUFBSWlCLFlBQVksS0FBS2pCLEtBQWpCLElBQTBCLE9BQU9nQixRQUFQLEtBQW9CLFVBQWxELEVBQThEO0FBQzVEQSxRQUFBQSxRQUFRLENBQUNoQixLQUFELENBQVI7QUFDRDs7QUFFRCxVQUFJLE1BQUtJLE9BQUwsSUFBZ0JHLFlBQXBCLEVBQWtDO0FBQ2hDLGNBQUtILE9BQUwsQ0FBYWUsS0FBYjtBQUNEO0FBQ0YsSzs7Z0dBRW1CLFlBQU07QUFDeEIsWUFBS1gsUUFBTCxDQUFjO0FBQUVDLFFBQUFBLFNBQVMsRUFBRTtBQUFiLE9BQWQ7QUFDRCxLOzswRkFFYSxZQUFNO0FBQ2xCLFlBQUtMLE9BQUwsQ0FBYWUsS0FBYjtBQUNELEs7Ozs7Ozs7NkJBRVE7QUFBQTs7QUFBQSx5QkFVSCxLQUFLbEIsS0FWRjtBQUFBLFVBRUxDLFFBRkssZ0JBRUxBLFFBRks7QUFBQSxVQUdMa0IsS0FISyxnQkFHTEEsS0FISztBQUFBLFVBSUxDLElBSkssZ0JBSUxBLElBSks7QUFBQSxVQUtMZixRQUxLLGdCQUtMQSxRQUxLO0FBQUEsVUFNTGdCLFdBTkssZ0JBTUxBLFdBTks7QUFBQSxVQU9MZixZQVBLLGdCQU9MQSxZQVBLO0FBQUEsK0NBUUxnQixTQVJLO0FBQUEsVUFRTEEsU0FSSyxzQ0FRTyxFQVJQO0FBQUEsVUFTRnRCLEtBVEU7O0FBQUEsd0JBV3NCLEtBQUtpQixLQVgzQjtBQUFBLFVBV0NULFNBWEQsZUFXQ0EsU0FYRDtBQUFBLFVBV1lULEtBWFosZUFXWUEsS0FYWjtBQWFQLGFBQ0Usb0JBQUMsS0FBRCxDQUFPLFFBQVAsUUFDRSxvQkFBQyxhQUFEO0FBQ0UsUUFBQSxRQUFRLEVBQUUsS0FBS3dCLFNBRGpCO0FBRUUsUUFBQSxZQUFZLEVBQUVqQixZQUFZLElBQUksQ0FBQ0QsUUFGakM7QUFHRSxRQUFBLE9BQU8sRUFBRSxLQUFLbUIsV0FIaEI7QUFJRSxRQUFBLGFBQWEsRUFBRSxLQUFLQyxpQkFKdEI7QUFLRSxRQUFBLFNBQVMsRUFBRSxLQUFLQyxhQUxsQjtBQU1FLFFBQUEsTUFBTSxFQUFFckIsUUFBUSxHQUFHLGFBQUgsR0FBbUJDLFlBQVksR0FBRyxTQUFILEdBQWUsTUFOaEU7QUFPRSxRQUFBLFNBQVM7QUFDUGMsVUFBQUEsSUFBSSxFQUFKQSxJQURPO0FBRVBPLFVBQUFBLE9BQU8sRUFBRXRCLFFBQVEsSUFBSyxDQUFDSixRQUFELElBQWFvQixXQUExQixHQUF5QyxHQUF6QyxHQUErQztBQUZqRCxXQUdKQyxTQUhJO0FBUFgsU0FZTXRCLEtBWk4sR0FjR0MsUUFBUSxHQUFHQSxRQUFILEdBQWNvQixXQWR6QixDQURGLEVBaUJHYixTQUFTLElBQ1Isb0JBQUMsTUFBRCxRQUNFLG9CQUFDLEtBQUQsUUFDRyxVQUFBb0IsTUFBTTtBQUFBLGVBQ0wsb0JBQUMsaUJBQUQ7QUFDRSxVQUFBLE1BQU0sRUFBRUEsTUFEVjtBQUVFLFVBQUEsWUFBWSxFQUFFO0FBQUEsbUJBQU0sTUFBSSxDQUFDekIsT0FBWDtBQUFBLFdBRmhCO0FBR0UsVUFBQSxLQUFLLEVBQUVKLEtBSFQ7QUFJRSxVQUFBLFFBQVEsRUFBRSxNQUFJLENBQUM4QixpQkFKakI7QUFLRSxVQUFBLGdCQUFnQixFQUFFLE1BQUksQ0FBQ0MseUJBTHpCO0FBTUUsVUFBQSxRQUFRLEVBQUUsTUFBSSxDQUFDQyxpQkFOakI7QUFPRSxVQUFBLElBQUksRUFBRVg7QUFQUixVQURLO0FBQUEsT0FEVCxDQURGLENBbEJKLENBREY7QUFxQ0Q7Ozs2Q0E3SCtCcEIsSyxFQUFPaUIsSyxFQUFPO0FBQzVDLFVBQUlqQixLQUFLLENBQUNDLFFBQU4sS0FBbUJnQixLQUFLLENBQUNsQixLQUE3QixFQUFvQztBQUNsQyxlQUFPO0FBQ0xBLFVBQUFBLEtBQUssRUFBRUMsS0FBSyxDQUFDQztBQURSLFNBQVA7QUFHRDs7QUFDRCxhQUFPLElBQVA7QUFDRDs7OztFQW5Ed0JYLEtBQUssQ0FBQzBDLGE7O0FBQTNCbEMsWTs7Z0JBQUFBLFksaUNBS0NGLFNBQVMsQ0FBQ3FDLFM7QUFFYjs7OztBQUlBM0IsRUFBQUEsWUFBWSxFQUFFZixTQUFTLENBQUMyQyxJQUFWLENBQWVDLFU7O0FBRTdCOzs7QUFHQTlCLEVBQUFBLFFBQVEsRUFBRWQsU0FBUyxDQUFDMkMsSTs7QUFFcEI7OztBQUdBYixFQUFBQSxXQUFXLEVBQUU5QixTQUFTLENBQUM2QyxJOztBQUV2Qjs7O0FBR0FoQixFQUFBQSxJQUFJLEVBQUU3QixTQUFTLENBQUM4QyxLQUFWLENBQWdCLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBaEIsRUFBNEJGLFU7O0FBRWxDOzs7QUFHQWxDLEVBQUFBLFFBQVEsRUFBRVYsU0FBUyxDQUFDK0MsU0FBVixDQUFvQixDQUFDL0MsU0FBUyxDQUFDZ0QsTUFBWCxFQUFtQmhELFNBQVMsQ0FBQ2lELE1BQTdCLENBQXBCLEM7O0FBRVY7OztBQUdBekIsRUFBQUEsUUFBUSxFQUFFeEIsU0FBUyxDQUFDa0Q7OztnQkFwQ2xCM0MsWSxrQkF1Q2tCO0FBQ3BCc0IsRUFBQUEsSUFBSSxFQUFFLEdBRGM7QUFFcEJkLEVBQUFBLFlBQVksRUFBRTtBQUZNLEM7O0FBcUl4QixlQUFlZCxTQUFTLENBQUNNLFlBQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gJy4uLy4uL3BvcnRhbCdcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vLi4vc3RhY2snXG5pbXBvcnQgVGV4dFRhYmxlQ2VsbCBmcm9tICcuL1RleHRUYWJsZUNlbGwnXG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4vVGFibGVDZWxsJ1xuaW1wb3J0IEVkaXRhYmxlQ2VsbEZpZWxkIGZyb20gJy4vRWRpdGFibGVDZWxsRmllbGQnXG5cbmNsYXNzIEVkaXRhYmxlQ2VsbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBUYWJsZUNlbGwgY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLlRhYmxlQ2VsbC5wcm9wVHlwZXMsXG5cbiAgICAvKlxuICAgICogTWFrZXMgdGhlIFRhYmxlQ2VsbCBmb2N1c2FibGUuXG4gICAgKiBXaWxsIGFkZCB0YWJJbmRleD17LTEgfHwgdGhpcy5wcm9wcy50YWJJbmRleH0uXG4gICAgKi9cbiAgICBpc1NlbGVjdGFibGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBjZWxsIGNhbid0IGJlIGVkaXRlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCBwbGFjZWhvbGRlciB3aGVuIGNoaWxkcmVuIGlzIGZhbHN5LlxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIHVzZWQgZm9yIHRoZSBUZXh0VGFibGVDZWxsIGFuZCBUZXh0YXJlYS5cbiAgICAgKi9cbiAgICBzaXplOiBQcm9wVHlwZXMub25lT2YoWzMwMCwgNDAwXSkuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIHZhbHVlIG9mIHRoZSBjZWxsLlxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB2YWx1ZSBjaGFuZ2VzLiAodmFsdWU6IHN0cmluZykgPT4gdm9pZC5cbiAgICAgKi9cbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgc2l6ZTogMzAwLFxuICAgIGlzU2VsZWN0YWJsZTogdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICBpZiAocHJvcHMuY2hpbGRyZW4gIT09IHN0YXRlLnZhbHVlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcHJvcHMuY2hpbGRyZW5cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHN0YXRlID0ge1xuICAgIHZhbHVlOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gIH1cblxuICBvbk1haW5SZWYgPSByZWYgPT4ge1xuICAgIHRoaXMubWFpblJlZiA9IHJlZlxuICB9XG5cbiAgb25PdmVybGF5UmVmID0gcmVmID0+IHtcbiAgICB0aGlzLm92ZXJsYXlSZWYgPSByZWZcbiAgfVxuXG4gIGhhbmRsZURvdWJsZUNsaWNrID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8ICF0aGlzLnByb3BzLmlzU2VsZWN0YWJsZSkgcmV0dXJuXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVLZXlEb3duID0gZSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVyblxuICAgIGNvbnN0IHsga2V5IH0gPSBlXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB1c2VyIHByZXNzZXMgYSBjaGFyYWN0ZXIgb24gdGhlIGtleWJvYXJkLCB1c2UgdGhhdCBjaGFyYWN0ZXJcbiAgICAgKiBhcyB0aGUgdmFsdWUgaW4gdGhlIHRleHQgZmllbGQuXG4gICAgICovXG4gICAgaWYgKGtleS5tYXRjaCgvXlthLXpdezAsMTB9JC8pICYmICFlLm1ldGFLZXkgJiYgIWUuY3RybEtleSAmJiAhZS5hbHRLZXkpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0VkaXRpbmc6IHRydWUsXG4gICAgICAgIHZhbHVlOiBrZXlcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdFbnRlcicpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0VkaXRpbmc6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRmllbGRDaGFuZ2VDb21wbGV0ZSA9IHZhbHVlID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCBpc1NlbGVjdGFibGUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICB2YWx1ZVxuICAgIH0pXG5cbiAgICBpZiAoY3VycmVudFZhbHVlICE9PSB2YWx1ZSAmJiB0eXBlb2Ygb25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uQ2hhbmdlKHZhbHVlKVxuICAgIH1cblxuICAgIGlmICh0aGlzLm1haW5SZWYgJiYgaXNTZWxlY3RhYmxlKSB7XG4gICAgICB0aGlzLm1haW5SZWYuZm9jdXMoKVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUZpZWxkQ2FuY2VsID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0VkaXRpbmc6IGZhbHNlIH0pXG4gIH1cblxuICBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICB0aGlzLm1haW5SZWYuZm9jdXMoKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgdGhlbWUsXG4gICAgICBzaXplLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIGlzU2VsZWN0YWJsZSxcbiAgICAgIHRleHRQcm9wcyA9IHt9LFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgaXNFZGl0aW5nLCB2YWx1ZSB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPFRleHRUYWJsZUNlbGxcbiAgICAgICAgICBpbm5lclJlZj17dGhpcy5vbk1haW5SZWZ9XG4gICAgICAgICAgaXNTZWxlY3RhYmxlPXtpc1NlbGVjdGFibGUgJiYgIWRpc2FibGVkfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9XG4gICAgICAgICAgb25Eb3VibGVDbGljaz17dGhpcy5oYW5kbGVEb3VibGVDbGlja31cbiAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgICAgICBjdXJzb3I9e2Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6IGlzU2VsZWN0YWJsZSA/ICdkZWZhdWx0JyA6ICd0ZXh0J31cbiAgICAgICAgICB0ZXh0UHJvcHM9e3tcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBvcGFjaXR5OiBkaXNhYmxlZCB8fCAoIWNoaWxkcmVuICYmIHBsYWNlaG9sZGVyKSA/IDAuNSA6IDEsXG4gICAgICAgICAgICAuLi50ZXh0UHJvcHNcbiAgICAgICAgICB9fVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgPlxuICAgICAgICAgIHtjaGlsZHJlbiA/IGNoaWxkcmVuIDogcGxhY2Vob2xkZXJ9XG4gICAgICAgIDwvVGV4dFRhYmxlQ2VsbD5cbiAgICAgICAge2lzRWRpdGluZyAmJiAoXG4gICAgICAgICAgPFBvcnRhbD5cbiAgICAgICAgICAgIDxTdGFjaz5cbiAgICAgICAgICAgICAge3pJbmRleCA9PiAoXG4gICAgICAgICAgICAgICAgPEVkaXRhYmxlQ2VsbEZpZWxkXG4gICAgICAgICAgICAgICAgICB6SW5kZXg9e3pJbmRleH1cbiAgICAgICAgICAgICAgICAgIGdldFRhcmdldFJlZj17KCkgPT4gdGhpcy5tYWluUmVmfVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgb25Fc2NhcGU9e3RoaXMuaGFuZGxlRmllbGRFc2NhcGV9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZUNvbXBsZXRlPXt0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlQ29tcGxldGV9XG4gICAgICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy5oYW5kbGVGaWVsZENhbmNlbH1cbiAgICAgICAgICAgICAgICAgIHNpemU9e3NpemV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvU3RhY2s+XG4gICAgICAgICAgPC9Qb3J0YWw+XG4gICAgICAgICl9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRWRpdGFibGVDZWxsKVxuIl19