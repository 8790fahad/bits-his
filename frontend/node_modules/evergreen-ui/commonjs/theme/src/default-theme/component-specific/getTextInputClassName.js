"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _themer = require("../../../../themer");

var _memoizeClassName = _interopRequireDefault(require("../utils/memoizeClassName"));

var _scales = _interopRequireDefault(require("../foundational-styles/scales"));

var _palette = _interopRequireDefault(require("../foundational-styles/palette"));

var InputAppearances = {};
InputAppearances.default = _themer.Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(_scales.default.neutral.N5A, ", inset 0 1px 2px ").concat(_scales.default.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(_palette.default.red.base, ", inset 0 1px 2px ").concat(_scales.default.neutral.N4A)
  },
  placeholder: {
    color: _scales.default.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(_scales.default.neutral.N4A, ", inset 0 0 0 1px ").concat(_scales.default.blue.B7, ", 0 0 0 3px ").concat(_scales.default.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(_scales.default.neutral.N4A),
    backgroundColor: _scales.default.neutral.N2
  }
});
InputAppearances.neutral = _themer.Themer.createInputAppearance({
  base: {
    backgroundColor: _scales.default.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(_palette.default.red.base)
  },
  placeholder: {
    color: _scales.default.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(_scales.default.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(_scales.default.neutral.N4A),
    backgroundColor: _scales.default.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance
 * @return {Object} the appearance object.
 */

var getTextInputAppearance = function getTextInputAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return InputAppearances.neutral;

    default:
      return InputAppearances.default;
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance
 * @return {string} the appearance class name.
 */


var _default = (0, _memoizeClassName.default)(getTextInputAppearance);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dElucHV0Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbIklucHV0QXBwZWFyYW5jZXMiLCJkZWZhdWx0IiwiVGhlbWVyIiwiY3JlYXRlSW5wdXRBcHBlYXJhbmNlIiwiYmFzZSIsImJhY2tncm91bmRDb2xvciIsImJveFNoYWRvdyIsInNjYWxlcyIsIm5ldXRyYWwiLCJONUEiLCJONEEiLCJpbnZhbGlkIiwicGFsZXR0ZSIsInJlZCIsInBsYWNlaG9sZGVyIiwiY29sb3IiLCJONkEiLCJmb2N1cyIsIm91dGxpbmUiLCJibHVlIiwiQjciLCJCNEEiLCJkaXNhYmxlZCIsIk4yIiwiTjJBIiwiQjZBIiwiZ2V0VGV4dElucHV0QXBwZWFyYW5jZSIsImFwcGVhcmFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGdCQUFnQixHQUFHLEVBQXpCO0FBRUFBLGdCQUFnQixDQUFDQyxPQUFqQixHQUEyQkMsZUFBT0MscUJBQVAsQ0FBNkI7QUFDdERDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUUsT0FEYjtBQUVKQyxJQUFBQSxTQUFTLDRCQUFxQkMsZ0JBQU9DLE9BQVAsQ0FBZUMsR0FBcEMsK0JBQ1BGLGdCQUFPQyxPQUFQLENBQWVFLEdBRFI7QUFGTCxHQURnRDtBQU90REMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BMLElBQUFBLFNBQVMsNEJBQXFCTSxpQkFBUUMsR0FBUixDQUFZVCxJQUFqQywrQkFDUEcsZ0JBQU9DLE9BQVAsQ0FBZUUsR0FEUjtBQURGLEdBUDZDO0FBWXRESSxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsS0FBSyxFQUFFUixnQkFBT0MsT0FBUCxDQUFlUTtBQURYLEdBWnlDO0FBZXREQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTFosSUFBQUEsU0FBUywwQkFBbUJDLGdCQUFPQyxPQUFQLENBQWVFLEdBQWxDLCtCQUNQSCxnQkFBT1ksSUFBUCxDQUFZQyxFQURMLHlCQUVNYixnQkFBT1ksSUFBUCxDQUFZRSxHQUZsQjtBQUZKLEdBZitDO0FBcUJ0REMsRUFBQUEsUUFBUSxFQUFFO0FBQ1JoQixJQUFBQSxTQUFTLDRCQUFxQkMsZ0JBQU9DLE9BQVAsQ0FBZUUsR0FBcEMsQ0FERDtBQUVSTCxJQUFBQSxlQUFlLEVBQUVFLGdCQUFPQyxPQUFQLENBQWVlO0FBRnhCO0FBckI0QyxDQUE3QixDQUEzQjtBQTJCQXZCLGdCQUFnQixDQUFDUSxPQUFqQixHQUEyQk4sZUFBT0MscUJBQVAsQ0FBNkI7QUFDdERDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUVFLGdCQUFPQyxPQUFQLENBQWVnQjtBQUQ1QixHQURnRDtBQUl0RGIsRUFBQUEsT0FBTyxFQUFFO0FBQ1BMLElBQUFBLFNBQVMsNEJBQXFCTSxpQkFBUUMsR0FBUixDQUFZVCxJQUFqQztBQURGLEdBSjZDO0FBT3REVSxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsS0FBSyxFQUFFUixnQkFBT0MsT0FBUCxDQUFlUTtBQURYLEdBUHlDO0FBVXREQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTGIsSUFBQUEsZUFBZSxFQUFFLE9BRlo7QUFHTEMsSUFBQUEsU0FBUyxzQkFBZUMsZ0JBQU9ZLElBQVAsQ0FBWU0sR0FBM0I7QUFISixHQVYrQztBQWV0REgsRUFBQUEsUUFBUSxFQUFFO0FBQ1JoQixJQUFBQSxTQUFTLDRCQUFxQkMsZ0JBQU9DLE9BQVAsQ0FBZUUsR0FBcEMsQ0FERDtBQUVSTCxJQUFBQSxlQUFlLEVBQUVFLGdCQUFPQyxPQUFQLENBQWVlO0FBRnhCO0FBZjRDLENBQTdCLENBQTNCO0FBcUJBOzs7Ozs7QUFLQSxJQUFNRyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUFDLFVBQVUsRUFBSTtBQUMzQyxVQUFRQSxVQUFSO0FBQ0UsU0FBSyxTQUFMO0FBQ0UsYUFBTzNCLGdCQUFnQixDQUFDUSxPQUF4Qjs7QUFDRjtBQUNFLGFBQU9SLGdCQUFnQixDQUFDQyxPQUF4QjtBQUpKO0FBTUQsQ0FQRDtBQVNBOzs7Ozs7O2VBS2UsK0JBQWlCeUIsc0JBQWpCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaGVtZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZXInXG5pbXBvcnQgbWVtb2l6ZUNsYXNzTmFtZSBmcm9tICcuLi91dGlscy9tZW1vaXplQ2xhc3NOYW1lJ1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3NjYWxlcydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvcGFsZXR0ZSdcblxuY29uc3QgSW5wdXRBcHBlYXJhbmNlcyA9IHt9XG5cbklucHV0QXBwZWFyYW5jZXMuZGVmYXVsdCA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk41QX0sIGluc2V0IDAgMXB4IDJweCAke1xuICAgICAgc2NhbGVzLm5ldXRyYWwuTjRBXG4gICAgfWBcbiAgfSxcbiAgaW52YWxpZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3BhbGV0dGUucmVkLmJhc2V9LCBpbnNldCAwIDFweCAycHggJHtcbiAgICAgIHNjYWxlcy5uZXV0cmFsLk40QVxuICAgIH1gXG4gIH0sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMnB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfSwgaW5zZXQgMCAwIDAgMXB4ICR7XG4gICAgICBzY2FsZXMuYmx1ZS5CN1xuICAgIH0sIDAgMCAwIDNweCAke3NjYWxlcy5ibHVlLkI0QX1gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG5JbnB1dEFwcGVhcmFuY2VzLm5ldXRyYWwgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJBXG4gIH0sXG4gIGludmFsaWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtwYWxldHRlLnJlZC5iYXNlfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAycHggJHtzY2FsZXMuYmx1ZS5CNkF9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuLyoqXG4gKiBHZXQgdGhlIGFwcGVhcmFuY2Ugb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBhcHBlYXJhbmNlIG9iamVjdC5cbiAqL1xuY29uc3QgZ2V0VGV4dElucHV0QXBwZWFyYW5jZSA9IGFwcGVhcmFuY2UgPT4ge1xuICBzd2l0Y2ggKGFwcGVhcmFuY2UpIHtcbiAgICBjYXNlICduZXV0cmFsJzpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLm5ldXRyYWxcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIElucHV0QXBwZWFyYW5jZXMuZGVmYXVsdFxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBjbGFzc05hbWUgb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBhcHBlYXJhbmNlIGNsYXNzIG5hbWUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDbGFzc05hbWUoZ2V0VGV4dElucHV0QXBwZWFyYW5jZSlcbiJdfQ==