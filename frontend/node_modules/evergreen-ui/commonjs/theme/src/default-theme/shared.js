"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ignore = exports.defaultControlStyles = void 0;

var _helpers = require("./helpers");

var _scales = _interopRequireDefault(require("./foundational-styles/scales"));

var defaultControlStyles = {
  disabled: {
    opacity: 0.8,
    backgroundImage: 'none',
    backgroundColor: _scales.default.neutral.N2A,
    boxShadow: 'none',
    color: _scales.default.neutral.N7A
  },
  base: {
    backgroundColor: 'white',
    backgroundImage: (0, _helpers.linearGradient)('#FFFFFF', '#F4F5F7'),
    boxShadow: "inset 0 0 0 1px ".concat(_scales.default.neutral.N4A, ", inset 0 -1px 1px 0 ").concat(_scales.default.neutral.N2A)
  },
  hover: {
    backgroundImage: (0, _helpers.linearGradient)('#FAFBFB', '#EAECEE')
  },
  focus: {
    boxShadow: "0 0 0 3px ".concat(_scales.default.blue.B4A, ", inset 0 0 0 1px ").concat(_scales.default.neutral.N5A, ", inset 0 -1px 1px 0 ").concat(_scales.default.neutral.N4A)
  },
  active: {
    backgroundImage: 'none',
    backgroundColor: _scales.default.blue.B3A,
    boxShadow: "inset 0 0 0 1px ".concat(_scales.default.neutral.N4A, ", inset 0 1px 1px 0 ").concat(_scales.default.neutral.N2A)
  },
  focusAndActive: {
    boxShadow: "0 0 0 3px ".concat(_scales.default.blue.B4A, ", inset 0 0 0 1px ").concat(_scales.default.neutral.N5A, ", inset 0 1px 1px 0 ").concat(_scales.default.neutral.N2A)
  } // Can't figure out to disable rule for xo linter.

};
exports.defaultControlStyles = defaultControlStyles;
var ignore = null;
exports.ignore = ignore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9zaGFyZWQuanMiXSwibmFtZXMiOlsiZGVmYXVsdENvbnRyb2xTdHlsZXMiLCJkaXNhYmxlZCIsIm9wYWNpdHkiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzY2FsZXMiLCJuZXV0cmFsIiwiTjJBIiwiYm94U2hhZG93IiwiY29sb3IiLCJON0EiLCJiYXNlIiwiTjRBIiwiaG92ZXIiLCJmb2N1cyIsImJsdWUiLCJCNEEiLCJONUEiLCJhY3RpdmUiLCJCM0EiLCJmb2N1c0FuZEFjdGl2ZSIsImlnbm9yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUc7QUFDM0JDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxPQUFPLEVBQUUsR0FERDtBQUVSQyxJQUFBQSxlQUFlLEVBQUUsTUFGVDtBQUdSQyxJQUFBQSxlQUFlLEVBQUVDLGdCQUFPQyxPQUFQLENBQWVDLEdBSHhCO0FBSVJDLElBQUFBLFNBQVMsRUFBRSxNQUpIO0FBS1JDLElBQUFBLEtBQUssRUFBRUosZ0JBQU9DLE9BQVAsQ0FBZUk7QUFMZCxHQURpQjtBQVEzQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pQLElBQUFBLGVBQWUsRUFBRSxPQURiO0FBRUpELElBQUFBLGVBQWUsRUFBRSw2QkFBZSxTQUFmLEVBQTBCLFNBQTFCLENBRmI7QUFHSkssSUFBQUEsU0FBUyw0QkFBcUJILGdCQUFPQyxPQUFQLENBQWVNLEdBQXBDLGtDQUNQUCxnQkFBT0MsT0FBUCxDQUFlQyxHQURSO0FBSEwsR0FScUI7QUFlM0JNLEVBQUFBLEtBQUssRUFBRTtBQUNMVixJQUFBQSxlQUFlLEVBQUUsNkJBQWUsU0FBZixFQUEwQixTQUExQjtBQURaLEdBZm9CO0FBa0IzQlcsRUFBQUEsS0FBSyxFQUFFO0FBQ0xOLElBQUFBLFNBQVMsc0JBQWVILGdCQUFPVSxJQUFQLENBQVlDLEdBQTNCLCtCQUNQWCxnQkFBT0MsT0FBUCxDQUFlVyxHQURSLGtDQUVlWixnQkFBT0MsT0FBUCxDQUFlTSxHQUY5QjtBQURKLEdBbEJvQjtBQXVCM0JNLEVBQUFBLE1BQU0sRUFBRTtBQUNOZixJQUFBQSxlQUFlLEVBQUUsTUFEWDtBQUVOQyxJQUFBQSxlQUFlLEVBQUVDLGdCQUFPVSxJQUFQLENBQVlJLEdBRnZCO0FBR05YLElBQUFBLFNBQVMsNEJBQXFCSCxnQkFBT0MsT0FBUCxDQUFlTSxHQUFwQyxpQ0FDUFAsZ0JBQU9DLE9BQVAsQ0FBZUMsR0FEUjtBQUhILEdBdkJtQjtBQThCM0JhLEVBQUFBLGNBQWMsRUFBRTtBQUNkWixJQUFBQSxTQUFTLHNCQUFlSCxnQkFBT1UsSUFBUCxDQUFZQyxHQUEzQiwrQkFDUFgsZ0JBQU9DLE9BQVAsQ0FBZVcsR0FEUixpQ0FFY1osZ0JBQU9DLE9BQVAsQ0FBZUMsR0FGN0I7QUFESyxHQTlCVyxDQXFDN0I7O0FBckM2QixDQUE3Qjs7QUFzQ0EsSUFBTWMsTUFBTSxHQUFHLElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsaW5lYXJHcmFkaWVudCB9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCBzY2FsZXMgZnJvbSAnLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3NjYWxlcydcblxuY29uc3QgZGVmYXVsdENvbnRyb2xTdHlsZXMgPSB7XG4gIGRpc2FibGVkOiB7XG4gICAgb3BhY2l0eTogMC44LFxuICAgIGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJBLFxuICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgIGNvbG9yOiBzY2FsZXMubmV1dHJhbC5ON0FcbiAgfSxcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IGxpbmVhckdyYWRpZW50KCcjRkZGRkZGJywgJyNGNEY1RjcnKSxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONEF9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtcbiAgICAgIHNjYWxlcy5uZXV0cmFsLk4yQVxuICAgIH1gXG4gIH0sXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBsaW5lYXJHcmFkaWVudCgnI0ZBRkJGQicsICcjRUFFQ0VFJylcbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAzcHggJHtzY2FsZXMuYmx1ZS5CNEF9LCBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgIHNjYWxlcy5uZXV0cmFsLk41QVxuICAgIH0sIGluc2V0IDAgLTFweCAxcHggMCAke3NjYWxlcy5uZXV0cmFsLk40QX1gXG4gIH0sXG4gIGFjdGl2ZToge1xuICAgIGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLmJsdWUuQjNBLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX0sIGluc2V0IDAgMXB4IDFweCAwICR7XG4gICAgICBzY2FsZXMubmV1dHJhbC5OMkFcbiAgICB9YFxuICB9LFxuICBmb2N1c0FuZEFjdGl2ZToge1xuICAgIGJveFNoYWRvdzogYDAgMCAwIDNweCAke3NjYWxlcy5ibHVlLkI0QX0sIGluc2V0IDAgMCAwIDFweCAke1xuICAgICAgc2NhbGVzLm5ldXRyYWwuTjVBXG4gICAgfSwgaW5zZXQgMCAxcHggMXB4IDAgJHtzY2FsZXMubmV1dHJhbC5OMkF9YFxuICB9XG59XG5cbi8vIENhbid0IGZpZ3VyZSBvdXQgdG8gZGlzYWJsZSBydWxlIGZvciB4byBsaW50ZXIuXG5jb25zdCBpZ25vcmUgPSBudWxsXG5cbmV4cG9ydCB7IGRlZmF1bHRDb250cm9sU3R5bGVzLCBpZ25vcmUgfVxuIl19