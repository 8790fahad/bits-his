{"ast":null,"code":"import _classCallCheck from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/frontend/src/components/Lab Module/PathologistComment.js\";\nimport React, { Component } from 'react';\nimport { Table, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\nimport { _fetchData, _customNotify, _updateData } from '../helpers';\nimport Notifications from 'react-notify-toast';\n\nvar PathologistComment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PathologistComment, _Component);\n\n  function PathologistComment(props) {\n    var _this;\n\n    _classCallCheck(this, PathologistComment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PathologistComment).call(this, props));\n\n    _this.onCommentChange = function (e) {\n      return _this.setState({\n        comment: e.target.value\n      });\n    };\n\n    _this.fetchAnalysedTest = function () {\n      var route = 'lab/sampleAnalyzed';\n\n      var success_callback = function success_callback(data) {\n        return _this.setState({\n          analysedTest: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this.setState({\n          error: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    };\n\n    _this.toggleCommentModal = function () {\n      return _this.setState(function (prevState) {\n        return {\n          commentModalOpen: !prevState.commentModalOpen\n        };\n      });\n    };\n\n    _this.openCommentModal = function (currentTest) {\n      _this.setState({\n        currentTest: currentTest\n      });\n\n      _this.toggleCommentModal();\n    };\n\n    _this.updateTable = function (test_id) {\n      var analysedTest = _this.state.analysedTest;\n      var newList = analysedTest.filter(function (test) {\n        return test.test_id !== test_id;\n      });\n\n      _this.setState({\n        analysedTest: newList\n      });\n    };\n\n    _this.clearCommentText = function () {\n      return _this.setState({\n        comment: ''\n      });\n    };\n\n    _this.onSaveCommentClick = function () {\n      var _this$state = _this.state,\n          comment = _this$state.comment,\n          currentTest = _this$state.currentTest;\n      var data = {\n        comment: comment,\n        test_id: currentTest.test_id\n      };\n      console.log(data);\n      var route = 'lab/savePathologicalComment';\n\n      var callback = function callback() {\n        return _customNotify('Results Saved!');\n      };\n\n      _updateData({\n        route: route,\n        data: data,\n        callback: callback\n      });\n\n      _this.clearCommentText();\n\n      _this.updateTable(currentTest.test_id);\n    };\n\n    _this.state = {\n      analysedTest: [],\n      comment: '',\n      commentModalOpen: false,\n      currentTest: {},\n      error: ''\n    };\n    return _this;\n  }\n\n  _createClass(PathologistComment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAnalysedTest();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(AnalysedTestTable, {\n        analysedTest: this.state.analysedTest,\n        openCommentModal: this.openCommentModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(Notifications, {\n        options: {\n          zIndex: 200,\n          top: '50px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(CommentModal, {\n        comment: this.state.comment,\n        onCommentChange: this.onCommentChange,\n        toggleCommentModal: this.toggleCommentModal,\n        commentModalOpen: this.state.commentModalOpen,\n        currentTest: this.state.currentTest,\n        onSaveCommentClick: this.onSaveCommentClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PathologistComment;\n}(Component);\n\nexport { PathologistComment as default };\n\nvar AnalysedTestTable = function AnalysedTestTable(_ref) {\n  var analysedTest = _ref.analysedTest,\n      openCommentModal = _ref.openCommentModal;\n  var rows = [];\n  analysedTest.forEach(function (test, i) {\n    rows.push(React.createElement(\"tr\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, i + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, test.test_id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, test.patient_id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, test.test), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, test.seen_by), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success col-md-12\",\n      onClick: function onClick() {\n        return openCommentModal(test);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Add Pathologist Comment\"))));\n  });\n  return React.createElement(Table, {\n    bordered: true,\n    striped: true,\n    hover: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"S/N\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Test ID\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Patient ID\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Test\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Requested By\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Add Comment\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, rows));\n};\n\nvar CommentModal = function CommentModal(_ref2) {\n  var commentModalOpen = _ref2.commentModalOpen,\n      toggleCommentModal = _ref2.toggleCommentModal,\n      currentTest = _ref2.currentTest,\n      onSaveCommentClick = _ref2.onSaveCommentClick,\n      comment = _ref2.comment,\n      onCommentChange = _ref2.onCommentChange;\n  return React.createElement(Modal, {\n    isOpen: commentModalOpen,\n    toggle: toggleCommentModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggleCommentModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Add Pathologist Comment\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Comment:\"), React.createElement(\"textarea\", {\n    className: \"form-control\",\n    value: comment,\n    onChange: onCommentChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-outline-primary\",\n    onClick: onSaveCommentClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Save Comment\")));\n};","map":{"version":3,"sources":["/root/Desktop/bits-his/frontend/src/components/Lab Module/PathologistComment.js"],"names":["React","Component","Table","Modal","ModalBody","ModalHeader","ModalFooter","_fetchData","_customNotify","_updateData","Notifications","PathologistComment","props","onCommentChange","e","setState","comment","target","value","fetchAnalysedTest","route","success_callback","data","analysedTest","error_callback","error","toggleCommentModal","prevState","commentModalOpen","openCommentModal","currentTest","updateTable","test_id","state","newList","filter","test","clearCommentText","onSaveCommentClick","console","log","callback","zIndex","top","AnalysedTestTable","rows","forEach","i","push","patient_id","seen_by","CommentModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Table, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\nimport { _fetchData, _customNotify, _updateData } from '../helpers';\nimport Notifications from 'react-notify-toast';\n\nexport default class PathologistComment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      analysedTest: [],\n      comment: '',\n      commentModalOpen: false,\n      currentTest: {},\n      error: '',\n    };\n  }\n\n  onCommentChange = e => this.setState({ comment: e.target.value });\n\n  fetchAnalysedTest = () => {\n    let route = 'lab/sampleAnalyzed';\n    let success_callback = data => this.setState({ analysedTest: data });\n    let error_callback = error => this.setState({ error });\n    _fetchData({ route, success_callback, error_callback });\n  };\n\n  componentDidMount() {\n    this.fetchAnalysedTest();\n  }\n\n  toggleCommentModal = () =>\n    this.setState(prevState => ({\n      commentModalOpen: !prevState.commentModalOpen,\n    }));\n\n  openCommentModal = currentTest => {\n    this.setState({ currentTest });\n    this.toggleCommentModal();\n  };\n\n  updateTable = test_id => {\n    const { analysedTest } = this.state;\n    let newList = analysedTest.filter(test => test.test_id !== test_id);\n    this.setState({ analysedTest: newList });\n  };\n\n  clearCommentText = () => this.setState({ comment: '' });\n\n  onSaveCommentClick = () => {\n    let { comment, currentTest } = this.state;\n    let data = {\n      comment,\n      test_id: currentTest.test_id,\n    };\n    console.log(data);\n    let route = 'lab/savePathologicalComment';\n    let callback = () => _customNotify('Results Saved!');\n    _updateData({ route, data, callback });\n    this.clearCommentText();\n    this.updateTable(currentTest.test_id);\n  };\n\n  render() {\n    return (\n      <div>\n        <AnalysedTestTable\n          analysedTest={this.state.analysedTest}\n          openCommentModal={this.openCommentModal}\n        />\n        <Notifications options={{ zIndex: 200, top: '50px' }} />\n\n        <CommentModal\n          comment={this.state.comment}\n          onCommentChange={this.onCommentChange}\n          toggleCommentModal={this.toggleCommentModal}\n          commentModalOpen={this.state.commentModalOpen}\n          currentTest={this.state.currentTest}\n          onSaveCommentClick={this.onSaveCommentClick}\n        />\n      </div>\n    );\n  }\n}\n\nconst AnalysedTestTable = ({ analysedTest, openCommentModal }) => {\n  let rows = [];\n  analysedTest.forEach((test, i) => {\n    rows.push(\n      <tr key={i}>\n        <td>{i + 1}</td>\n        <td>{test.test_id}</td>\n        <td>{test.patient_id}</td>\n        <td>{test.test}</td>\n        <td>{test.seen_by}</td>\n        <td>\n          <button\n            className=\"btn btn-success col-md-12\"\n            onClick={() => openCommentModal(test)}>\n            Add Pathologist Comment\n          </button>\n        </td>\n      </tr>\n    );\n  });\n  return (\n    <Table bordered striped hover>\n      <thead>\n        <tr>\n          <th>S/N</th>\n          <th>Test ID</th>\n          <th>Patient ID</th>\n          <th>Test</th>\n          <th>Requested By</th>\n          <th>Add Comment</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </Table>\n  );\n};\n\nconst CommentModal = ({\n  commentModalOpen,\n  toggleCommentModal,\n  currentTest,\n  onSaveCommentClick,\n  comment,\n  onCommentChange,\n}) => (\n  <Modal isOpen={commentModalOpen} toggle={toggleCommentModal}>\n    <ModalHeader toggle={toggleCommentModal}>\n      Add Pathologist Comment\n    </ModalHeader>\n    <ModalBody>\n      <label>Comment:</label>\n      <textarea\n        className=\"form-control\"\n        value={comment}\n        onChange={onCommentChange}\n      />\n    </ModalBody>\n    <ModalFooter>\n      <button className=\"btn btn-outline-primary\" onClick={onSaveCommentClick}>\n        Save Comment\n      </button>\n    </ModalFooter>\n  </Modal>\n);\n"]},"metadata":{},"sourceType":"module"}