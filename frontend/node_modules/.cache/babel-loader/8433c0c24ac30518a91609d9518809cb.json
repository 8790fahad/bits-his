{"ast":null,"code":"import _classCallCheck from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/src/components/Lab Module/SampleCollection.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Card, CardBody, CardFooter, CardHeader, Table, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap'; // import ProcessReq from './ProcessReq';\n\nimport PendingRequestProcess from './PendingRequestProcess';\nimport { _fetchData, _updateData } from '../helpers';\n\nvar SampleCollection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SampleCollection, _Component);\n\n  function SampleCollection(props) {\n    var _this;\n\n    _classCallCheck(this, SampleCollection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SampleCollection).call(this, props));\n\n    _this.toggleProcessModal = function () {\n      return _this.setState(function (prevState) {\n        return {\n          processModalIsOpen: !prevState.processModalIsOpen\n        };\n      });\n    };\n\n    _this.onRequestClick = function (req) {\n      // console.log(req)\n      _this.setState({\n        currentPatient: req\n      });\n\n      _this.toggleProcessModal();\n\n      _this.getLabRequest(req.id);\n    };\n\n    _this.state = {\n      labrequests: [],\n      processModalIsOpen: false,\n      currentPatient: [],\n      patients: [],\n      requestByPatient: [],\n      error: ''\n    };\n    return _this;\n  }\n\n  _createClass(SampleCollection, [{\n    key: \"getPendingReq\",\n    value: function getPendingReq() {\n      var _this2 = this;\n\n      var route = 'lab/pending';\n\n      var success_callback = function success_callback(data) {\n        return _this2.setState({\n          labrequests: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this2.setState({\n          error: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getPendingReq();\n    }\n  }, {\n    key: \"getLabRequest\",\n    value: function getLabRequest(id) {\n      var _this3 = this;\n\n      var route = 'lab/getReqById?id=' + id;\n\n      var success_callback = function success_callback(data) {\n        return _this3.setState({\n          requestByPatient: data\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          labrequests = _this$state.labrequests,\n          patients = _this$state.patients,\n          processModalIsOpen = _this$state.processModalIsOpen,\n          currentPatient = _this$state.currentPatient;\n      var toggleProcessModal = this.toggleProcessModal,\n          onRequestClick = this.onRequestClick;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Pending Lab Requests\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(RequestTable, {\n        labrequests: labrequests,\n        onRequestClick: this.onRequestClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        size: \"lg\",\n        isOpen: processModalIsOpen,\n        toggle: toggleProcessModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: toggleProcessModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Request List\")), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(PendingRequestProcess // requests={requestForThisPatient}\n      // resultModalOpen={resultModalOpen}\n      // previewModalOpen={previewModalOpen}\n      // toggleResultModal={toggleResultModal}\n      // togglePreviewModal={togglePreviewModal}\n      // saveLabResults={saveLabResults}\n      // onStatusChange={onStatusChange}\n      // onStatusUnchanged={onStatusUnchanged}\n      , {\n        currentReq: currentPatient // req={req}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }))), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SampleCollection;\n}(Component);\n\nexport { SampleCollection as default };\nexport var RequestTable = function RequestTable(_ref) {\n  var _ref$labrequests = _ref.labrequests,\n      labrequests = _ref$labrequests === void 0 ? [] : _ref$labrequests,\n      _ref$onRequestClick = _ref.onRequestClick,\n      onRequestClick = _ref$onRequestClick === void 0 ? function (f) {\n    return f;\n  } : _ref$onRequestClick;\n  // const rows = [];\n  var date = new Date();\n  return React.createElement(React.Fragment, null, !labrequests.length ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Fetching\")) : React.createElement(Table, {\n    bordered: true,\n    striped: true,\n    hover: true,\n    responsive: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Patient ID\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Gender\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, labrequests.map(function (req, i) {\n    return React.createElement(\"tr\", {\n      key: i,\n      onClick: function onClick() {\n        return onRequestClick(req);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, req.id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, req.firstname, req.surname), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, req.gender));\n  }))));\n};","map":{"version":3,"sources":["/root/Desktop/bits-his/src/components/Lab Module/SampleCollection.js"],"names":["React","Component","Fragment","Card","CardBody","CardFooter","CardHeader","Table","Modal","ModalBody","ModalHeader","ModalFooter","PendingRequestProcess","_fetchData","_updateData","SampleCollection","props","toggleProcessModal","setState","prevState","processModalIsOpen","onRequestClick","req","currentPatient","getLabRequest","id","state","labrequests","patients","requestByPatient","error","route","success_callback","data","error_callback","getPendingReq","RequestTable","f","date","Date","length","map","i","cursor","firstname","surname","gender"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,UAArC,EAAiDC,KAAjD,EAAwDC,KAAxD,EAA8DC,SAA9D,EAAyEC,WAAzE,EAAsFC,WAAtF,QAAyG,YAAzG,C,CACA;;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,YAAxC;;IAEqBC,gB;;;;;AACnB,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,0FAAMA,KAAN;;AADiB,UAwBnBC,kBAxBmB,GAwBE;AAAA,aACnB,MAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BC,UAAAA,kBAAkB,EAAE,CAACD,SAAS,CAACC;AADL,SAAL;AAAA,OAAvB,CADmB;AAAA,KAxBF;;AAAA,UA6BnBC,cA7BmB,GA6BF,UAAAC,GAAG,EAAI;AACtB;AACA,YAAKJ,QAAL,CAAc;AAAEK,QAAAA,cAAc,EAAED;AAAlB,OAAd;;AACA,YAAKL,kBAAL;;AACA,YAAKO,aAAL,CAAmBF,GAAG,CAACG,EAAvB;AACD,KAlCkB;;AAGjB,UAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,EADF;AAEXP,MAAAA,kBAAkB,EAAE,KAFT;AAGXG,MAAAA,cAAc,EAAE,EAHL;AAIXK,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,gBAAgB,EAAE,EALP;AAMXC,MAAAA,KAAK,EAAE;AANI,KAAb;AAHiB;AAWlB;;;;oCAEe;AAAA;;AACd,UAAIC,KAAK,GAAG,aAAZ;;AACA,UAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,IAAI;AAAA,eAAI,MAAI,CAACf,QAAL,CAAc;AAAES,UAAAA,WAAW,EAAEM;AAAf,SAAd,CAAJ;AAAA,OAA3B;;AACA,UAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAAJ,KAAK;AAAA,eAAI,MAAI,CAACZ,QAAL,CAAc;AAAEY,UAAAA,KAAK,EAALA;AAAF,SAAd,CAAJ;AAAA,OAA1B;;AACAjB,MAAAA,UAAU,CAAC;AAAEkB,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,gBAAgB,EAAhBA,gBAAT;AAA2BE,QAAAA,cAAc,EAAdA;AAA3B,OAAD,CAAV;AACD;;;wCAEmB;AAClB,WAAKC,aAAL;AACD;;;kCAcaV,E,EAAI;AAAA;;AAChB,UAAIM,KAAK,GAAG,uBAAuBN,EAAnC;;AACA,UAAIO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,IAAI;AAAA,eAAI,MAAI,CAACf,QAAL,CAAc;AAAEW,UAAAA,gBAAgB,EAAEI;AAApB,SAAd,CAAJ;AAAA,OAA3B;;AAEApB,MAAAA,UAAU,CAAC;AAAEkB,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,gBAAgB,EAAhBA;AAAT,OAAD,CAAV;AACD;;;6BAEQ;AAAA,wBAC4D,KAAKN,KADjE;AAAA,UACDC,WADC,eACDA,WADC;AAAA,UACYC,QADZ,eACYA,QADZ;AAAA,UACqBR,kBADrB,eACqBA,kBADrB;AAAA,UACyCG,cADzC,eACyCA,cADzC;AAAA,UAEDN,kBAFC,GAEsC,IAFtC,CAEDA,kBAFC;AAAA,UAEmBI,cAFnB,GAEsC,IAFtC,CAEmBA,cAFnB;AAGP,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CADF,EAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AACE,QAAA,WAAW,EAAEM,WADf;AAEE,QAAA,cAAc,EAAE,KAAKN,cAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,IAAZ;AAAiB,QAAA,MAAM,EAAED,kBAAzB;AAA6C,QAAA,MAAM,EAAEH,kBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,oBAAC,WAAD;AAAa,QAAA,MAAM,EAAEA,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADI,EAIJ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI,oBAAC,qBAAD,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA,QAAA,UAAU,EAAEM,cATZ,CAUA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CAJI,EAyBJ,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBI,CALF,CAJF,EAyCE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzCF,CADF,CADF;AA+CD;;;;EA9F2CtB,S;;SAAzBc,gB;AAiGrB,OAAO,IAAMqB,YAAY,GAAG,SAAfA,YAAe,OAAmD;AAAA,8BAAhDT,WAAgD;AAAA,MAAhDA,WAAgD,iCAAlC,EAAkC;AAAA,iCAA9BN,cAA8B;AAAA,MAA9BA,cAA8B,oCAAb,UAAAgB,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAAY;AAC7E;AACA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AAEA,SACE,0CACG,CAACZ,WAAW,CAACa,MAAb,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADD,GAKC,oBAAC,KAAD;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,OAAO,MAAvB;AAAwB,IAAA,KAAK,MAA7B;AAA8B,IAAA,UAAU,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CADF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,WAAW,CAACc,GAAZ,CAAgB,UAACnB,GAAD,EAAMoB,CAAN;AAAA,WACf;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMrB,cAAc,CAACC,GAAD,CAApB;AAAA,OAFX;AAGE,MAAA,KAAK,EAAE;AAAEqB,QAAAA,MAAM,EAAE;AAAV,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKrB,GAAG,CAACG,EAAT,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,GAAG,CAACsB,SADP,EAEGtB,GAAG,CAACuB,OAFP,CALF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKvB,GAAG,CAACwB,MAAT,CAVF,CADe;AAAA,GAAhB,CADH,CATF,CANJ,CADF;AAoCD,CAxCM","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Card, CardBody, CardFooter, CardHeader, Table, Modal,ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\n// import ProcessReq from './ProcessReq';\nimport PendingRequestProcess from './PendingRequestProcess'\nimport { _fetchData, _updateData } from '../helpers';\n\nexport default class SampleCollection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      labrequests: [],\n      processModalIsOpen: false,\n      currentPatient: [],\n      patients: [],\n      requestByPatient: [],\n      error: '',\n    };\n  }\n\n  getPendingReq() {\n    let route = 'lab/pending';\n    let success_callback = data => this.setState({ labrequests: data });\n    let error_callback = error => this.setState({ error });\n    _fetchData({ route, success_callback, error_callback });\n  }\n\n  componentDidMount() {\n    this.getPendingReq();\n  }\n\n  toggleProcessModal = () =>\n    this.setState(prevState => ({\n      processModalIsOpen: !prevState.processModalIsOpen,\n    }));\n\n  onRequestClick = req => {\n    // console.log(req)\n    this.setState({ currentPatient: req });\n    this.toggleProcessModal();\n    this.getLabRequest(req.id);\n  };\n\n  getLabRequest(id) {\n    let route = 'lab/getReqById?id=' + id;\n    let success_callback = data => this.setState({ requestByPatient: data });\n\n    _fetchData({ route, success_callback });\n  }\n\n  render() {\n    let { labrequests, patients,processModalIsOpen, currentPatient } = this.state;\n    let { toggleProcessModal, onRequestClick } = this;\n    return (\n      <Fragment>\n        <Card>\n          <CardHeader color=\"primary\">\n            <h5 className=\"text-center\">Pending Lab Requests</h5>\n          </CardHeader>\n          <CardBody>\n            <RequestTable\n              labrequests={labrequests}\n              onRequestClick={this.onRequestClick}\n            />\n            <Modal size=\"lg\" isOpen={processModalIsOpen} toggle={toggleProcessModal}>\n        <ModalHeader toggle={toggleProcessModal}>\n          <p className=\"text-center\">Request List</p>\n        </ModalHeader>\n        <ModalBody>\n            {/* <ProcessReq\n              patient={this.state.currentPatient}\n              toggleProcessModal={this.toggleProcessModal}\n              processModalIsOpen={this.state.processModalIsOpen}\n              updatePendingRequestTable={this.props.updatePendingRequestTable}\n              requests={this.state.requestByPatient}\n            /> */}\n            <PendingRequestProcess\n            // requests={requestForThisPatient}\n            // resultModalOpen={resultModalOpen}\n            // previewModalOpen={previewModalOpen}\n            // toggleResultModal={toggleResultModal}\n            // togglePreviewModal={togglePreviewModal}\n            // saveLabResults={saveLabResults}\n            // onStatusChange={onStatusChange}\n            // onStatusUnchanged={onStatusUnchanged}\n            currentReq={currentPatient}\n            // req={req}\n          />\n            </ModalBody>\n        <ModalFooter>\n          {/* <button className=\"btn btn-primary\" onClick={this.onSaveClick}>\n            Save\n          </button> */}\n        </ModalFooter>\n      </Modal>\n          </CardBody>\n          <CardFooter />\n        </Card>\n      </Fragment>\n    );\n  }\n}\n\nexport const RequestTable = ({ labrequests = [], onRequestClick = f => f }) => {\n  // const rows = [];\n  let date = new Date();\n\n  return (\n    <>\n      {!labrequests.length ? (\n        <p>\n          <i>Fetching</i>\n        </p>\n      ) : (\n        <Table bordered striped hover responsive>\n          <thead>\n            <tr>\n              <th>Patient ID</th>\n              <th>Name</th>\n              {/* <th>Age</th> */}\n              <th>Gender</th>\n            </tr>\n          </thead>\n          <tbody>\n            {labrequests.map((req, i) => (\n              <tr\n                key={i}\n                onClick={() => onRequestClick(req)}\n                style={{ cursor: 'pointer' }}>\n                <td>{req.id}</td>\n                <td>\n                  {req.firstname}\n                  {req.surname}\n                </td>\n                {/* <td>{date.getFullYear() - parseInt(req.DOB.slice(0, 4))}</td> */}\n                <td>{req.gender}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}