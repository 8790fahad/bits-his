{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"IconNames\", {\n  enumerable: true,\n  get: function get() {\n    return _icons.IconNames;\n  }\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _uiBox = _interopRequireDefault(require(\"ui-box\"));\n\nvar _icons = require(\"@blueprintjs/icons\");\n\nvar _theme = require(\"../../theme\");\n/* eslint react/no-array-index-key: 0, eqeqeq: 0, no-eq-null: 0 */\n\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\n\nvar Icon =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  (0, _inherits2.default)(Icon, _PureComponent);\n\n  function Icon() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Icon);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"renderSvgPaths\", function (pathsSize, iconName) {\n      var svgPathsRecord = pathsSize === Icon.SIZE_STANDARD ? _icons.IconSvgPaths16 : _icons.IconSvgPaths20;\n      var pathStrings = svgPathsRecord[iconName];\n\n      if (pathStrings == null) {\n        return null;\n      }\n\n      return pathStrings.map(function (d, i) {\n        return _react.default.createElement(\"path\", {\n          key: i,\n          d: d,\n          fillRule: \"evenodd\"\n        });\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Icon, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          color = _this$props.color,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          _this$props$title = _this$props.title,\n          title = _this$props$title === void 0 ? icon : _this$props$title,\n          svgProps = (0, _objectWithoutProperties2.default)(_this$props, [\"theme\", \"color\", \"icon\", \"size\", \"title\"]);\n      var _this$props$style = this.props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style;\n\n      if (icon == null) {\n        return null;\n      }\n\n      if (typeof icon !== 'string') {\n        return icon;\n      } // Choose which pixel grid is most appropriate for given icon size\n\n\n      var pixelGridSize = size >= Icon.SIZE_LARGE ? Icon.SIZE_LARGE : Icon.SIZE_STANDARD;\n      var paths = this.renderSvgPaths(pixelGridSize, icon);\n\n      if (paths == null) {\n        return null;\n      }\n\n      var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n\n      if (color != null) {\n        style = (0, _objectSpread2.default)({}, style, {\n          fill: theme.getIconColor(color)\n        });\n      }\n\n      return _react.default.createElement(_uiBox.default, (0, _extends2.default)({\n        is: \"svg\"\n      }, svgProps, {\n        style: style,\n        \"data-icon\": icon,\n        width: size,\n        height: size,\n        viewBox: viewBox\n      }), title ? _react.default.createElement(\"title\", null, title) : null, paths);\n    }\n  }]);\n  return Icon;\n}(_react.PureComponent);\n\nIcon.displayName = \"Icon\";\n(0, _defineProperty2.default)(Icon, \"SIZE_STANDARD\", 16);\n(0, _defineProperty2.default)(Icon, \"SIZE_LARGE\", 20);\n(0, _defineProperty2.default)(Icon, \"propTypes\", {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: _propTypes.default.string,\n\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: _propTypes.default.string.isRequired,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: _propTypes.default.number.isRequired,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: _propTypes.default.string,\n\n  /**\n   * CSS style properties.\n   */\n  style: _propTypes.default.object,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: _propTypes.default.object.isRequired\n});\n(0, _defineProperty2.default)(Icon, \"defaultProps\", {\n  size: 16,\n  color: 'currentColor'\n});\n\nvar _default = (0, _theme.withTheme)(Icon);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}