{"ast":null,"code":"import { notify } from 'react-notify-toast';\nvar url = 'https://bits-his-back-end.herokuapp.com';\n/**\n * _fetchData()\n * helper function that fetches data from the database using a\n * specified route and performs the callback function on the returned data\n * @params route (string) => the api route\n * @params callback (func) => the action to perform on that data\n *      that is being returned\n */\n// const _fetchData = ({ route, callback }) => {\n//   fetch(`http://localhost:4000/${route}`, {\n//     method: 'GET',\n//   })\n//     .then(function(response) {\n//       if (response.ok) return response.json();\n//       else\n//         return Promise.reject({\n//           status: response.status,\n//           statusText: response.statusText,\n//         });\n//     })\n//     .then(function(data) {\n//       // console.log(data)\n//       callback(data);\n//     })\n//     .catch(err => console.log(err));\n// };\n\nvar _fetchData = function _fetchData(_ref) {\n  var route = _ref.route,\n      success_callback = _ref.success_callback,\n      error_callback = _ref.error_callback;\n  fetch(\"\".concat(url, \"/\").concat(route)).then(function (data) {\n    return data.json();\n  }).then(function (response) {\n    return success_callback(response);\n  }).catch(function (error) {\n    return error_callback ? error_callback(error.toString()) : console.log(error);\n  });\n};\n/**\n * _postData()\n * An helper function that posts data to the database\n * @params route (string) => the api route to submit on\n * @params data (object) => item to be submitted\n * @params callback => optional callback function\n */\n\n\nvar _postData = function _postData(_ref2) {\n  var route = _ref2.route,\n      data = _ref2.data,\n      callback = _ref2.callback,\n      _ref2$error_cb = _ref2.error_cb,\n      error_cb = _ref2$error_cb === void 0 ? function (f) {\n    return f;\n  } : _ref2$error_cb;\n  fetch(\"\".concat(url, \"/\").concat(route), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    if (response.status >= 400) {\n      // throw new Error('Bad response from server');\n      error_cb();\n    }\n\n    return response.json();\n  }).then(function (data) {\n    // console.log(data);\n    if (data === 'success') {\n      if (callback) callback();\n    }\n  }).catch(function (err) {\n    return err;\n  });\n};\n/**\n * _deleteData()\n * An helper function that deletes data from the database\n * @params route (String) => the api route\n * @params data (object) => object containing the details of\n * the item to be deleted\n * @params callback (func) => optional callback\n */\n\n\nvar _deleteData = function _deleteData(_ref3) {\n  var route = _ref3.route,\n      data = _ref3.data,\n      callback = _ref3.callback;\n  fetch(\"\".concat(url, \"/\").concat(route), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    if (response.status >= 400) {\n      throw new Error('Bad response from server');\n    }\n\n    return response.json();\n  }).then(function (data) {\n    // console.log(data);\n    if (data === 'success') {\n      if (callback) callback();\n    }\n  }).catch(function (err) {\n    return err;\n  });\n};\n\nvar _updateData = function _updateData(_ref4) {\n  var route = _ref4.route,\n      data = _ref4.data,\n      callback = _ref4.callback;\n  fetch(\"\".concat(url, \"/\").concat(route), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    // if the status of the response is greater than 400, then error is returned\n    if (response.status >= 400) {\n      throw new Error('Bad response from server');\n    }\n\n    return response.json();\n  }).then(function (data) {\n    // console.log(data);\n    if (data === 'success') {\n      if (callback) callback();\n    }\n  }).catch(function (err) {\n    return err;\n  });\n};\n\nvar toCamelCase = function toCamelCase(str) {\n  return str[0].toUpperCase() + str.substr(1);\n};\n\nvar _customNotify = function _customNotify(msg) {\n  var myColor = {\n    background: '#239',\n    text: '#FFFFFF'\n  };\n  notify.show(msg, 'custom', 3000, myColor);\n};\n\nvar _warningNotify = function _warningNotify(msg) {\n  var myColor = {\n    background: '#f11',\n    text: '#FFFFFF'\n  };\n  notify.show(msg, 'custom', 3000, myColor);\n};\n\nvar _convertArrOfObjToArr = function _convertArrOfObjToArr(arr) {\n  var result = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var o = _step.value;\n      result.push(Object.values(o));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n}; // const _checkPresence = (arr, testId) => {\n//   let errArr = [];\n//   for (let i = 0; i < arr.length; i++) {\n//     arr[i].id === testId ? errArr.push(true) : errArr.push(false);\n//   }\n//   return errArr.includes(true) ? true : false;\n// };\n\n\nexport { _fetchData, _postData, _deleteData, _updateData, toCamelCase, _customNotify, _warningNotify, _convertArrOfObjToArr };","map":{"version":3,"sources":["/root/Desktop/bits-his/src/components/helpers.js"],"names":["notify","url","_fetchData","route","success_callback","error_callback","fetch","then","data","json","response","catch","error","toString","console","log","_postData","callback","error_cb","f","method","headers","body","JSON","stringify","status","err","_deleteData","Error","_updateData","toCamelCase","str","toUpperCase","substr","_customNotify","msg","myColor","background","text","show","_warningNotify","_convertArrOfObjToArr","arr","result","o","push","Object","values"],"mappings":"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","sourcesContent":["import { notify } from 'react-notify-toast';\n\nconst url = 'https://bits-his-back-end.herokuapp.com'\n\n/**\n * _fetchData()\n * helper function that fetches data from the database using a\n * specified route and performs the callback function on the returned data\n * @params route (string) => the api route\n * @params callback (func) => the action to perform on that data\n *      that is being returned\n */\n// const _fetchData = ({ route, callback }) => {\n//   fetch(`http://localhost:4000/${route}`, {\n//     method: 'GET',\n//   })\n//     .then(function(response) {\n//       if (response.ok) return response.json();\n//       else\n//         return Promise.reject({\n//           status: response.status,\n//           statusText: response.statusText,\n//         });\n//     })\n//     .then(function(data) {\n//       // console.log(data)\n//       callback(data);\n//     })\n//     .catch(err => console.log(err));\n// };\n\nconst _fetchData = ({ route, success_callback, error_callback }) => {\n  fetch(`${url}/${route}`)\n    .then(data => data.json())\n    .then(response => success_callback(response))\n    .catch(error => error_callback ? error_callback(error.toString()) : console.log(error));\n};\n\n/**\n * _postData()\n * An helper function that posts data to the database\n * @params route (string) => the api route to submit on\n * @params data (object) => item to be submitted\n * @params callback => optional callback function\n */\nconst _postData = ({ route, data, callback, error_cb=f=>f }) => {\n  fetch(`${url}/${route}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  })\n    .then(function(response) {\n      if (response.status >= 400) {\n        // throw new Error('Bad response from server');\n        error_cb()\n      }\n      return response.json();\n    })\n    .then(function(data) {\n      // console.log(data);\n      if (data === 'success') {\n        if (callback) callback();\n      }\n    })\n    .catch(function(err) {\n      return err;\n    });\n};\n\n/**\n * _deleteData()\n * An helper function that deletes data from the database\n * @params route (String) => the api route\n * @params data (object) => object containing the details of\n * the item to be deleted\n * @params callback (func) => optional callback\n */\nconst _deleteData = ({ route, data, callback }) => {\n  fetch(`${url}/${route}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  })\n    .then(function(response) {\n      if (response.status >= 400) {\n        throw new Error('Bad response from server');\n      }\n      return response.json();\n    })\n    .then(function(data) {\n      // console.log(data);\n      if (data === 'success') {\n        if (callback) callback();\n      }\n    })\n    .catch(function(err) {\n      return err;\n    });\n};\n\nconst _updateData = ({ route, data, callback }) => {\n  fetch(`${url}/${route}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  })\n    .then(function(response) {\n      // if the status of the response is greater than 400, then error is returned\n      if (response.status >= 400) {\n        throw new Error('Bad response from server');\n      }\n      return response.json();\n    })\n    .then(function(data) {\n      // console.log(data);\n      if (data === 'success') {\n        if (callback) callback();\n      }\n    })\n    .catch(function(err) {\n      return err;\n    });\n};\n\nconst toCamelCase = str => {\n  return str[0].toUpperCase() + str.substr(1);\n};\n\nconst _customNotify = msg => {\n  let myColor = { background: '#239', text: '#FFFFFF' };\n  notify.show(msg, 'custom', 3000, myColor);\n};\n\nconst _warningNotify = msg => {\n  let myColor = { background: '#f11', text: '#FFFFFF' };\n  notify.show(msg, 'custom', 3000, myColor);\n};\n\nconst _convertArrOfObjToArr = arr => {\n  let result = [];\n  for (let o of arr) {\n    result.push(Object.values(o));\n  }\n  return result;\n};\n\n// const _checkPresence = (arr, testId) => {\n//   let errArr = [];\n//   for (let i = 0; i < arr.length; i++) {\n//     arr[i].id === testId ? errArr.push(true) : errArr.push(false);\n//   }\n//   return errArr.includes(true) ? true : false;\n// };\n\nexport {\n  _fetchData,\n  _postData,\n  _deleteData,\n  _updateData,\n  toCamelCase,\n  _customNotify,\n  _warningNotify,\n  _convertArrOfObjToArr,\n};\n"]},"metadata":{},"sourceType":"module"}