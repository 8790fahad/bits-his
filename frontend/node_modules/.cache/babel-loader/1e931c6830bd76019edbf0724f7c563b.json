{"ast":null,"code":"import _classCallCheck from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/src/components/Pharmacy Module/PrescriptionProcessingForm.js\";\nimport React, { Component } from 'react';\nimport { Card, CardBody, Table, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport FreeScrollBar from 'react-free-scrollbar';\nimport Loading from '../loading';\nimport { _fetchData, _postData, _customNotify, _warningNotify, _updateData } from '../helpers';\nimport Notifications from 'react-notify-toast';\n\nvar PrescriptionProcessingForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PrescriptionProcessingForm, _Component);\n\n  function PrescriptionProcessingForm(props) {\n    var _this;\n\n    _classCallCheck(this, PrescriptionProcessingForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PrescriptionProcessingForm).call(this, props)); // the inital state is being set here\n\n    _this.fetchDrugList = function () {\n      var route = \"drugs/allDrugs\";\n\n      var success_callback = function success_callback(data) {\n        return _this.setState({\n          drugList: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this.setState({\n          drugListErr: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    };\n\n    _this.onQuantityDispensedInputChange = function (e, price, i) {\n      var value = e.target.value;\n      var initialPrice = _this.state.price;\n      initialPrice[i] = price * value;\n      var quantityDispensed = _this.state.quantityDispensed;\n      quantityDispensed[i] = value;\n      var total = initialPrice.reduce(function (a, b) {\n        return a + b;\n      }); // console.log(total);\n\n      _this.setState({\n        quantityDispensed: quantityDispensed,\n        price: initialPrice,\n        total: total\n      });\n    };\n\n    _this.onQuantityDispensed = function (e, prescription, i) {\n      var value = parseInt(e.target.value);\n      var prescriptions = _this.state.prescriptions;\n      var newPres = Object.assign({}, prescription, {\n        quantity_dispensed: value\n      });\n      prescriptions[i] = newPres; // console.log(prescriptions)\n\n      _this.setState({\n        prescriptions: prescriptions\n      });\n    };\n\n    _this.toggle = function () {\n      _this.setState(function (prevState) {\n        return {\n          addDrugMmodal: !prevState.addDrugMmodal\n        };\n      });\n    };\n\n    _this.onDrugChange = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        drugDetails: Object.assign({}, _this.state.drugDetails, {\n          drug: value\n        })\n      });\n    };\n\n    _this.onQuantityChange = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        drugDetails: Object.assign({}, _this.state.drugDetails, {\n          quantity: value\n        })\n      });\n    };\n\n    _this.onPrescriptionChange = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        drugDetails: Object.assign({}, _this.state.drugDetails, {\n          prescription: value\n        })\n      });\n    };\n\n    _this.onPriceChange = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        drugDetails: Object.assign({}, _this.state.drugDetails, {\n          price: value\n        })\n      });\n    };\n\n    _this.updatePrescriptionList = function (data) {\n      var prescriptionList = _this.state.prescriptions;\n      var newPrescriptionList = prescriptionList.concat(data);\n\n      _this.setState({\n        prescriptions: newPrescriptionList\n      });\n    };\n\n    _this.addDrug = function () {\n      //gets the values of the new form from the state\n      var _this$state$drugDetai = _this.state.drugDetails,\n          prescription = _this$state$drugDetai.prescription,\n          price = _this$state$drugDetai.price,\n          drug = _this$state$drugDetai.drug,\n          quantity = _this$state$drugDetai.quantity; // gets basic details about the patient which would be appended to the request\n\n      var details = _this.props.details; // performs the validation\n\n      if (prescription === '' || price === '' || drug === '' || quantity === '') {\n        return _this.setState({\n          validationText: 'Please fill all the fields'\n        });\n      } // all the data about the new drug to be added, id = patient's id\n\n\n      var data = {\n        id: details.id,\n        dosage: prescription,\n        drug_status: 'pending',\n        date: new Date(),\n        price: price,\n        drug: drug,\n        seen_by: details.seen_by,\n        quantity: quantity\n      }; // the submission to the database is done here\n\n      var route = 'prescriptionrequests/addDrugWithQuantity';\n\n      var cb = function cb() {\n        return console.log(data);\n      };\n\n      _postData({\n        route: route,\n        data: data,\n        cb: cb\n      });\n\n      _this.updatePrescriptionList(data);\n\n      _customNotify('Drug added Successfully');\n\n      _this.toggle();\n    };\n\n    _this.toggleDrugModal = function () {\n      _this.setState(function (prevState) {\n        return {\n          changeDrugModal: !prevState.changeDrugModal\n        };\n      });\n    };\n\n    _this.handleDispense = function () {\n      var prescriptions = _this.state.prescriptions;\n      prescriptions.forEach(function (prescription) {\n        return _this.dispense(prescription);\n      }); // let quantity = this.state.quantityDispensed;\n      // if (!quantity.length)\n      //   return _warningNotify('Empty form cannot be Submitted!');\n      // prescriptions.forEach((p, i) => (p.quantity = quantity[i]));\n      // let result = {}\n      // for(let i=0; i<prescriptions.length; i++){\n      //   result[prescriptions[i].drug_request_id] = quantityDispensed[i]\n      // }\n      // this.props.dispenseDrugs(prescriptions);\n      // console.log(quantityDispensed);\n      // let route = 'prescriptionrequests/dispenseSingle';\n      // let newList = []\n      // newList.push(prescriptions.map(obj => obj.drug_request_id),prescriptions.map(obj => obj.quantity_dispensed))\n      // let data = \n      // let callback = () => _customNotify(\"record submitted\")\n      // _updateData({ route, data: prescriptions, callback })\n      // console.log(prescriptions)\n    };\n\n    _this.changeDrug = function (drugDetails) {\n      var _this$state = _this.state,\n          drugToChange = _this$state.drugToChange,\n          prescriptions = _this$state.prescriptions; // console.log(`Please change ${drugToChange} to ${drug.drug} on ${prescriptions}`);\n      // let newPrescription = prescriptions.map(p => {\n      //     p.drug === drugToChange ? p = Object.assign({}, p, {drug: drug.drug}) : p\n      // })\n\n      var newDrugsList = prescriptions.map(function (item) {\n        return item.drug === drugToChange ? item = Object.assign({}, item, {\n          drug: drugDetails.drug,\n          price: drugDetails.price\n        }) : item;\n      }); // console.log(newDrugsList);\n\n      _this.setState({\n        prescriptions: newDrugsList\n      }); // change the drugToChange to the newly selected drug\n      // _customNotify(\"Drug replaced successfully!\")\n\n\n      _this.toggleDrugModal();\n    };\n\n    _this.onSearchTermChange = function (e) {\n      var searchTerm = e.target.value;\n\n      _this.setState({\n        searchTerm: searchTerm\n      }); // this.search(searchTerm);\n\n    };\n\n    _this.search = function (searchTerm) {\n      var drugList = _this.state.drugList;\n      var newList = drugList.filter(function (drug) {\n        return drug.drug === searchTerm;\n      });\n\n      _this.setState({\n        drugList: newList\n      });\n    };\n\n    _this.openChangeDrugTable = function (drug) {\n      _this.setState({\n        drugToChange: drug\n      });\n\n      _this.toggleDrugModal();\n    };\n\n    _this.state = {\n      // userDetails: {},\n      prescriptions: [],\n      quantityDispensed: [],\n      price: [],\n      total: 0,\n      addDrugMmodal: false,\n      changeDrugModal: false,\n      drugList: [],\n      searchTerm: '',\n      validationText: '',\n      drugToChange: '',\n      prescriptionByIdErr: '',\n      drugListErr: '',\n      drugDetails: {\n        drug: '',\n        quantity: '',\n        price: '',\n        prescription: ''\n      }\n    };\n    return _this;\n  } // fetchUserDetails(id) {\n  //   let self = this;\n  //   let route = `patientrecords/fetchUserById?id=${id}`;\n  //   let cb = data => {\n  //     self.setState({ userDetails: Object.assign({}, data[0]) });\n  //   };\n  //   _fetchData({ route, callback: cb });\n  // }\n\n\n  _createClass(PrescriptionProcessingForm, [{\n    key: \"fetchPrescription\",\n    value: function fetchPrescription(id) {\n      var _this2 = this;\n\n      var route = \"prescriptionrequests/getPrescriptionById?id=\".concat(id);\n\n      var success_callback = function success_callback(data) {\n        return _this2.setState({\n          prescriptions: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this2.setState({\n          prescriptionByIdErr: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.details.id; // this.fetchUserDetails(id);\n\n      this.fetchPrescription(id);\n      this.fetchDrugList();\n    }\n    /**\n     * onQuantityDispensedInputChange()\n     * Does major calculations when the quantity of the drugs\n     * to be dispensed changes and updates the state of the neccessary\n     * changes.\n     */\n\n  }, {\n    key: \"dispense\",\n    value: function dispense(prescription) {\n      var patient_id = prescription.patient_id,\n          drug_request_id = prescription.drug_request_id,\n          quantity_dispensed = prescription.quantity_dispensed; //submit dispension\n\n      var route = 'prescriptionrequests/dispenseSingle';\n      var data = {\n        patient_id: patient_id,\n        drug_request_id: drug_request_id,\n        quantity_dispensed: quantity_dispensed\n      };\n\n      var callback = function callback() {\n        return _customNotify(\"record submitted\");\n      };\n\n      _updateData({\n        route: route,\n        data: data,\n        callback: callback\n      }); //reduce the quantity in stock\n      //reduce the patient's balance\n\n    }\n    /**\n     * handleDispense()\n     * event handler for dispense button click\n     * Submits the data and dispenses drugs to the customers\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          details = _this$props.details,\n          toggleProcessingForm = _this$props.toggleProcessingForm;\n      var _this$state2 = this.state,\n          userDetails = _this$state2.userDetails,\n          drugList = _this$state2.drugList,\n          drugDetails = _this$state2.drugDetails,\n          validationText = _this$state2.validationText,\n          prescriptions = _this$state2.prescriptions,\n          prescriptionByIdErr = _this$state2.prescriptionByIdErr;\n      var onDrugChange = this.onDrugChange,\n          onQuantityChange = this.onQuantityChange,\n          onPriceChange = this.onPriceChange,\n          onPrescriptionChange = this.onPrescriptionChange,\n          addDrug = this.addDrug;\n      var drug = drugDetails.drug,\n          quantity = drugDetails.quantity,\n          price = drugDetails.price,\n          prescription = drugDetails.prescription;\n      var rows = [];\n      prescriptions.forEach(function (prescription, i) {\n        rows.push(React.createElement(\"tr\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          onClick: function onClick() {\n            return _this3.openChangeDrugTable(prescription.drug);\n          },\n          className: \"anchor\",\n          title: \"change this drug\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, prescription.drug)), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }, prescription.dosage), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326\n          },\n          __self: this\n        }, prescription.price), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          name: \"quantityDispensed\",\n          className: \"form-control\" // value={this.state.quantityDispensed[i]}\n          ,\n          value: prescription.quantity_dispensed,\n          onFocus: function onFocus(e) {\n            return e.target.value = '';\n          },\n          onChange: function onChange(e) {\n            return (// this.onQuantityDispensedInputChange(e, prescription.price, i)\n              _this3.onQuantityDispensed(e, prescription, i)\n            );\n          } // console.log(prescription.quantityDispensed)\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328\n          },\n          __self: this\n        }))));\n      });\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group col-md-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          marginRight: '.5em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, \"ID: \"), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, details.id)), React.createElement(\"div\", {\n        className: \"form-group col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          marginRight: '.5em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, \"Name: \"), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, \"\".concat(details.surname, \" \").concat(details.firstname))), React.createElement(\"div\", {\n        className: \"form-group col-md-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          marginRight: '.5em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, \"Gender: \"), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, details.gender)), React.createElement(\"div\", {\n        className: \"form-group col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        style: {\n          marginRight: '.5em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, \"Date of Birth:\"), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, details.DOB))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, \"Pending Drugs\"), !prescriptions.length ? !prescriptionByIdErr.length ? React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, \"No record found\")) : React.createElement(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        responsive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, \"Drugs\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, \"Prescription\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, \"Unit Price\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, \"Qty Dispensed\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, rows)), React.createElement(\"button\", {\n        className: \"btn btn-outline-primary btnS offset-xs-1 offset-sm-2 offset-md-3\",\n        onClick: this.handleDispense,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, \"Dispense\"), React.createElement(\"button\", {\n        className: \"btn btn-outline-success offset-xs-1 offset-sm-1 offset-md-1\",\n        title: \"Add a drug to the list\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }, \"Add Drug\"), React.createElement(\"button\", {\n        className: \"btn btn-outline-danger offset-xs-1 offset-sm-1 offset-md-1\",\n        title: \"close\",\n        onClick: toggleProcessingForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Modal, {\n        size: \"lg\",\n        isOpen: this.state.addDrugMmodal,\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, \"Add Drugs\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }, React.createElement(AddDrugForm, {\n        drug: drug,\n        quantity: quantity,\n        price: price,\n        prescription: prescription,\n        onDrugChange: onDrugChange,\n        onQuantityChange: onQuantityChange,\n        onPriceChange: onPriceChange,\n        onPrescriptionChange: onPrescriptionChange,\n        addDrug: addDrug,\n        validationText: validationText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }))))), React.createElement(Modal, {\n        isOpen: this.state.changeDrugModal,\n        toggle: this.toggleDrugModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleDrugModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }, \"Change this drug\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        searchTerm: this.state.searchTerm,\n        onSearchTermChange: this.onSearchTermChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        },\n        __self: this\n      }), React.createElement(DrugsTable, {\n        searchTerm: this.state.searchTerm,\n        changeDrug: this.changeDrug,\n        drugList: drugList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return PrescriptionProcessingForm;\n}(Component);\n\nexport { PrescriptionProcessingForm as default };\n\nvar AddDrugForm = function AddDrugForm(_ref) {\n  var drug = _ref.drug,\n      quantity = _ref.quantity,\n      price = _ref.price,\n      prescription = _ref.prescription,\n      onDrugChange = _ref.onDrugChange,\n      onQuantityChange = _ref.onQuantityChange,\n      onPriceChange = _ref.onPriceChange,\n      onPrescriptionChange = _ref.onPrescriptionChange,\n      addDrug = _ref.addDrug,\n      validationText = _ref.validationText;\n  return React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496\n    },\n    __self: this\n  }, \"Drug\"), React.createElement(\"input\", {\n    className: \"form-control col-md-4\",\n    value: drug,\n    onChange: onDrugChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502\n    },\n    __self: this\n  }, \"Quantity\"), React.createElement(\"input\", {\n    className: \"form-control col-md-4\",\n    value: quantity,\n    onChange: onQuantityChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, \"Price\"), React.createElement(\"input\", {\n    className: \"form-control col-md-4\",\n    value: price,\n    onChange: onPriceChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"col-md-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517\n    },\n    __self: this\n  }, \"Prescription\"), React.createElement(\"input\", {\n    className: \"form-control col-md-4\",\n    value: prescription,\n    onChange: onPrescriptionChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524\n    },\n    __self: this\n  }, validationText), React.createElement(\"button\", {\n    onClick: function onClick(e) {\n      e.preventDefault();\n      addDrug();\n    },\n    className: \"btn btn-outline-secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525\n    },\n    __self: this\n  }, \"Add\"));\n};\n\nvar SearchBar = function SearchBar(_ref2) {\n  var searchTerm = _ref2.searchTerm,\n      onSearchTermChange = _ref2.onSearchTermChange;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"search for a drug by name\",\n    value: searchTerm,\n    onChange: onSearchTermChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538\n    },\n    __self: this\n  }));\n};\n\nvar DrugsTable = function DrugsTable(_ref3) {\n  var drugList = _ref3.drugList,\n      changeDrug = _ref3.changeDrug,\n      searchTerm = _ref3.searchTerm;\n  var rows = [];\n  drugList.forEach(function (drug, i) {\n    if (drug.drug.toLowerCase().indexOf(searchTerm.toLowerCase()) === -1) {\n      return;\n    }\n\n    rows.push(React.createElement(\"tr\", {\n      key: i,\n      onClick: function onClick() {\n        return changeDrug(drug);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, drug.drug), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561\n      },\n      __self: this\n    }, drug.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, drug.price)));\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '50vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567\n    },\n    __self: this\n  }, React.createElement(FreeScrollBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  }, React.createElement(Notifications, {\n    options: {\n      zIndex: 200,\n      top: '50px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569\n    },\n    __self: this\n  }), React.createElement(Table, {\n    hover: true,\n    bordered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }, \"Quantity in Stock\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575\n    },\n    __self: this\n  }, \"Price\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578\n    },\n    __self: this\n  }, rows))));\n};","map":{"version":3,"sources":["/root/Desktop/bits-his/src/components/Pharmacy Module/PrescriptionProcessingForm.js"],"names":["React","Component","Card","CardBody","Table","Modal","ModalHeader","ModalBody","FreeScrollBar","Loading","_fetchData","_postData","_customNotify","_warningNotify","_updateData","Notifications","PrescriptionProcessingForm","props","fetchDrugList","route","success_callback","data","setState","drugList","error_callback","error","drugListErr","onQuantityDispensedInputChange","e","price","i","value","target","initialPrice","state","quantityDispensed","total","reduce","a","b","onQuantityDispensed","prescription","parseInt","prescriptions","newPres","Object","assign","quantity_dispensed","toggle","prevState","addDrugMmodal","onDrugChange","drugDetails","drug","onQuantityChange","quantity","onPrescriptionChange","onPriceChange","updatePrescriptionList","prescriptionList","newPrescriptionList","concat","addDrug","details","validationText","id","dosage","drug_status","date","Date","seen_by","cb","console","log","toggleDrugModal","changeDrugModal","handleDispense","forEach","dispense","changeDrug","drugToChange","newDrugsList","map","item","onSearchTermChange","searchTerm","search","newList","filter","openChangeDrugTable","prescriptionByIdErr","fetchPrescription","patient_id","drug_request_id","callback","toggleProcessingForm","userDetails","rows","push","marginRight","surname","firstname","gender","DOB","length","AddDrugForm","color","preventDefault","SearchBar","DrugsTable","toLowerCase","indexOf","cursor","width","height","zIndex","top"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Card,\n  CardBody,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n} from 'reactstrap';\nimport FreeScrollBar from 'react-free-scrollbar';\nimport Loading from '../loading';\nimport {\n  _fetchData,\n  _postData,\n  _customNotify,\n  _warningNotify,\n  _updateData\n} from '../helpers';\nimport Notifications from 'react-notify-toast';\n\nexport default class PrescriptionProcessingForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // the inital state is being set here\n    this.state = {\n      // userDetails: {},\n      prescriptions: [],\n      quantityDispensed: [],\n      price: [],\n      total: 0,\n      addDrugMmodal: false,\n      changeDrugModal: false,\n      drugList: [],\n      searchTerm: '',\n      validationText: '',\n      drugToChange: '',\n      prescriptionByIdErr: '',\n      drugListErr: '',\n      drugDetails: {\n        drug: '',\n        quantity: '',\n        price: '',\n        prescription: '',\n      },\n    };\n  }\n\n  // fetchUserDetails(id) {\n  //   let self = this;\n\n  //   let route = `patientrecords/fetchUserById?id=${id}`;\n  //   let cb = data => {\n  //     self.setState({ userDetails: Object.assign({}, data[0]) });\n  //   };\n  //   _fetchData({ route, callback: cb });\n  // }\n\n  fetchPrescription(id) {\n    let route = `prescriptionrequests/getPrescriptionById?id=${id}`;\n    let success_callback = data => this.setState({ prescriptions: data });\n      \n    let error_callback = error => this.setState({ prescriptionByIdErr: error });\n\n    _fetchData({ route, success_callback, error_callback });\n  }\n\n  fetchDrugList = () => {\n    let route = `drugs/allDrugs`;\n    let success_callback = data => this.setState({ drugList: data });\n    let error_callback = error => this.setState({ drugListErr: error });\n\n    _fetchData({ route, success_callback, error_callback });\n  };\n\n  componentDidMount() {\n    let id = this.props.details.id;\n    // this.fetchUserDetails(id);\n    this.fetchPrescription(id);\n    this.fetchDrugList();\n  }\n\n  /**\n   * onQuantityDispensedInputChange()\n   * Does major calculations when the quantity of the drugs\n   * to be dispensed changes and updates the state of the neccessary\n   * changes.\n   */\n  onQuantityDispensedInputChange = (e, price, i) => {\n    let value = e.target.value;\n    let initialPrice = this.state.price;\n    initialPrice[i] = price * value;\n    let quantityDispensed = this.state.quantityDispensed;\n    quantityDispensed[i] = value;\n    let total = initialPrice.reduce((a, b) => a + b);\n    // console.log(total);\n    this.setState({\n      quantityDispensed,\n      price: initialPrice,\n      total,\n    });\n  };\n\n  onQuantityDispensed = (e, prescription, i) => {\n    let value = parseInt(e.target.value);\n    let { prescriptions } = this.state;\n    let newPres = Object.assign({}, prescription, {\n      quantity_dispensed: value,\n    });\n    prescriptions[i] = newPres;\n    // console.log(prescriptions)\n    this.setState({ prescriptions });\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({ addDrugMmodal: !prevState.addDrugMmodal }));\n  };\n\n  /**\n   * The following four methods onDrugChange(), onQuantityChange(), onPrescriptionChange()\n   * onPriceChange() takes care of the onChange event of the Add Drug Form\n   */\n  onDrugChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, { drug: value }),\n    });\n  };\n\n  onQuantityChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, {\n        quantity: value,\n      }),\n    });\n  };\n\n  onPrescriptionChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, {\n        prescription: value,\n      }),\n    });\n  };\n\n  onPriceChange = e => {\n    let value = e.target.value;\n    this.setState({\n      drugDetails: Object.assign({}, this.state.drugDetails, { price: value }),\n    });\n  };\n\n  /**\n   * updatePrescriptionList()\n   * Updates the prescription list accordingly with the newly\n   * passed in drug.\n   */\n  updatePrescriptionList = data => {\n    let prescriptionList = this.state.prescriptions;\n    let newPrescriptionList = prescriptionList.concat(data);\n    this.setState({ prescriptions: newPrescriptionList });\n  };\n\n  /**\n   * addDrug()\n   * Takes care of adding drug to the drugs list, it submits\n   * the newly added drug to the database, does validation before\n   * taking any action, also updates the state so that the changes\n   * can reflect without having to reload the browser.\n   */\n  addDrug = () => {\n    //gets the values of the new form from the state\n    let { prescription, price, drug, quantity } = this.state.drugDetails;\n    // gets basic details about the patient which would be appended to the request\n    const { details } = this.props;\n    // performs the validation\n    if (prescription === '' || price === '' || drug === '' || quantity === '') {\n      return this.setState({ validationText: 'Please fill all the fields' });\n    }\n\n    // all the data about the new drug to be added, id = patient's id\n    let data = {\n      id: details.id,\n      dosage: prescription,\n      drug_status: 'pending',\n      date: new Date(),\n      price,\n      drug,\n      seen_by: details.seen_by,\n      quantity,\n    };\n    // the submission to the database is done here\n    let route = 'prescriptionrequests/addDrugWithQuantity';\n    let cb = () => console.log(data);\n    _postData({ route, data, cb });\n    this.updatePrescriptionList(data);\n    _customNotify('Drug added Successfully');\n    this.toggle();\n  };\n\n  /**\n   * toggleDrugModal()\n   * Toggles the modal containing the list of all drugs\n   */\n  toggleDrugModal = () => {\n    this.setState(prevState => ({\n      changeDrugModal: !prevState.changeDrugModal,\n    }));\n  };\n\n  dispense(prescription) {\n    let { patient_id, drug_request_id, quantity_dispensed} = prescription;\n    //submit dispension\n    let route = 'prescriptionrequests/dispenseSingle';\n    let data = {patient_id,  drug_request_id, quantity_dispensed }\n    let callback = () => _customNotify(\"record submitted\")\n    _updateData({ route, data, callback })\n    //reduce the quantity in stock\n    //reduce the patient's balance\n\n  }\n\n  /**\n   * handleDispense()\n   * event handler for dispense button click\n   * Submits the data and dispenses drugs to the customers\n   */\n  handleDispense = () => {\n    const { prescriptions } = this.state;\n    prescriptions.forEach(prescription => this.dispense(prescription))\n\n    // let quantity = this.state.quantityDispensed;\n    // if (!quantity.length)\n    //   return _warningNotify('Empty form cannot be Submitted!');\n\n    // prescriptions.forEach((p, i) => (p.quantity = quantity[i]));\n    // let result = {}\n    // for(let i=0; i<prescriptions.length; i++){\n    //   result[prescriptions[i].drug_request_id] = quantityDispensed[i]\n    // }\n    // this.props.dispenseDrugs(prescriptions);\n    // console.log(quantityDispensed);\n    // let route = 'prescriptionrequests/dispenseSingle';\n    // let newList = []\n  \n    // newList.push(prescriptions.map(obj => obj.drug_request_id),prescriptions.map(obj => obj.quantity_dispensed))\n    // let data = \n    // let callback = () => _customNotify(\"record submitted\")\n    // _updateData({ route, data: prescriptions, callback })\n    // console.log(prescriptions)\n  };\n\n  changeDrug = drugDetails => {\n    let { drugToChange, prescriptions } = this.state;\n    // console.log(`Please change ${drugToChange} to ${drug.drug} on ${prescriptions}`);\n    // let newPrescription = prescriptions.map(p => {\n    //     p.drug === drugToChange ? p = Object.assign({}, p, {drug: drug.drug}) : p\n    // })\n    let newDrugsList = prescriptions.map(item =>\n      item.drug === drugToChange\n        ? (item = Object.assign({}, item, {\n            drug: drugDetails.drug,\n            price: drugDetails.price,\n          }))\n        : item\n    );\n    // console.log(newDrugsList);\n    this.setState({ prescriptions: newDrugsList });\n    // change the drugToChange to the newly selected drug\n    // _customNotify(\"Drug replaced successfully!\")\n    this.toggleDrugModal();\n  };\n\n  onSearchTermChange = e => {\n    let searchTerm = e.target.value;\n    this.setState({ searchTerm: searchTerm });\n    // this.search(searchTerm);\n  };\n\n  search = searchTerm => {\n    let drugList = this.state.drugList;\n    let newList = drugList.filter(drug => drug.drug === searchTerm);\n    this.setState({ drugList: newList });\n  };\n\n  openChangeDrugTable = drug => {\n    this.setState({ drugToChange: drug });\n    this.toggleDrugModal();\n  };\n\n  render() {\n    const { details, toggleProcessingForm } = this.props;\n    const {\n      userDetails,\n      drugList,\n      drugDetails,\n      validationText,\n      prescriptions,\n      prescriptionByIdErr,\n    } = this.state;\n    const {\n      onDrugChange,\n      onQuantityChange,\n      onPriceChange,\n      onPrescriptionChange,\n      addDrug,\n    } = this;\n    const { drug, quantity, price, prescription } = drugDetails;\n    const rows = [];\n    prescriptions.forEach((prescription, i) => {\n      rows.push(\n        <tr key={i}>\n          <td>\n            <span\n              onClick={() => this.openChangeDrugTable(prescription.drug)}\n              className=\"anchor\"\n              title=\"change this drug\">\n              {prescription.drug}\n            </span>\n          </td>\n          <td>{prescription.dosage}</td>\n          {/* <td>fdds{prescription.drug_request_jd}</td> */}\n\n          <td>{prescription.price}</td>\n          <td>\n            <input\n              type=\"text\"\n              name=\"quantityDispensed\"\n              className=\"form-control\"\n              // value={this.state.quantityDispensed[i]}\n              value={prescription.quantity_dispensed}\n              onFocus={e => e.target.value = ''}\n              onChange={\n                e =>\n                  // this.onQuantityDispensedInputChange(e, prescription.price, i)\n                  this.onQuantityDispensed(e, prescription, i)\n                // console.log(prescription.quantityDispensed)\n              }\n            />\n          </td>\n          {/* <td>{this.state.price[i]}</td> */}\n          \n          {/* <td>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.dispense(prescription)}>\n              Dispense\n            </button>\n          </td> */}\n        </tr>\n      );\n    });\n\n    return (\n      <>\n        <form className=\"row\">\n          <div className=\"form-group col-md-2\">\n            <label style={{marginRight:'.5em'}}>ID: </label>\n            <strong>{details.id}</strong>\n          </div>\n          <div className=\"form-group col-md-4\">\n            <label style={{marginRight:'.5em'}}>Name: </label>\n            <strong>{`${details.surname} ${details.firstname}`}</strong>\n          </div>\n          <div className=\"form-group col-md-2\">\n            <label style={{marginRight:'.5em'}}>Gender: </label>\n            <strong>{details.gender}</strong>\n          </div>\n          <div className=\"form-group col-md-4\">\n            <label style={{marginRight:'.5em'}}>Date of Birth:</label>\n            <strong>{details.DOB}</strong>\n          </div>\n        </form>\n\n        <br />\n\n        <h5 className=\"text-center\">Pending Drugs</h5>\n\n        {/* <div style={{ width: '100%', height: '28vh' }}>\n              <FreeScrollBar> */}\n        {!prescriptions.length ? (\n          !prescriptionByIdErr.length ? (\n            <Loading />\n          ) : (\n            <p className=\"text-center\">\n              <em>No record found</em>\n            </p>\n          )\n        ) : (\n          <Table striped bordered hover responsive>\n            <thead>\n              <tr>\n                <th>Drugs</th>\n                <th>Prescription</th>\n                <th>Unit Price</th>\n                <th>Qty Dispensed</th>\n                {/* <th>Price</th> */}\n                {/* <th>Dispense</th> */}\n              </tr>\n            </thead>\n            <tbody>\n              {rows}\n              {/* <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <th>Total</th>\n                        <th>{this.state.total}</th>\n                      </tr> */}\n            </tbody>\n          </Table>\n        )}\n        {/* </FreeScrollBar>\n            </div> */}\n\n        <button\n          className=\"btn btn-outline-primary btnS offset-xs-1 offset-sm-2 offset-md-3\"\n          onClick={this.handleDispense}>\n          Dispense\n        </button>\n\n        <button\n          className=\"btn btn-outline-success offset-xs-1 offset-sm-1 offset-md-1\"\n          title=\"Add a drug to the list\"\n          onClick={this.toggle}>\n          Add Drug\n        </button>\n\n        <button\n          className=\"btn btn-outline-danger offset-xs-1 offset-sm-1 offset-md-1\"\n          title=\"close\"\n          onClick={toggleProcessingForm}>\n          Close\n        </button>\n\n        <Modal size=\"lg\" isOpen={this.state.addDrugMmodal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>Add Drugs</ModalHeader>\n          <ModalBody>\n            <Card>\n              <CardBody>\n                <AddDrugForm\n                  drug={drug}\n                  quantity={quantity}\n                  price={price}\n                  prescription={prescription}\n                  onDrugChange={onDrugChange}\n                  onQuantityChange={onQuantityChange}\n                  onPriceChange={onPriceChange}\n                  onPrescriptionChange={onPrescriptionChange}\n                  addDrug={addDrug}\n                  validationText={validationText}\n                />\n              </CardBody>\n            </Card>\n          </ModalBody>\n        </Modal>\n        <Modal\n          isOpen={this.state.changeDrugModal}\n          toggle={this.toggleDrugModal}>\n          <ModalHeader toggle={this.toggleDrugModal}>\n            Change this drug\n          </ModalHeader>\n          <ModalBody>\n            <SearchBar\n              searchTerm={this.state.searchTerm}\n              onSearchTermChange={this.onSearchTermChange}\n            />\n            <DrugsTable\n              searchTerm={this.state.searchTerm}\n              changeDrug={this.changeDrug}\n              drugList={drugList}\n            />\n          </ModalBody>\n        </Modal>\n      </>\n    );\n  }\n}\n\nconst AddDrugForm = ({\n  drug,\n  quantity,\n  price,\n  prescription,\n  onDrugChange,\n  onQuantityChange,\n  onPriceChange,\n  onPrescriptionChange,\n  addDrug,\n  validationText,\n}) => (\n  <form>\n    <div className=\"row\">\n      <label className=\"col-md-2\">Drug</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={drug}\n        onChange={onDrugChange}\n      />\n      <label className=\"col-md-2\">Quantity</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={quantity}\n        onChange={onQuantityChange}\n      />\n    </div>\n    <br />\n    <div className=\"row\">\n      <label className=\"col-md-2\">Price</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={price}\n        onChange={onPriceChange}\n      />\n      <label className=\"col-md-2\">Prescription</label>\n      <input\n        className=\"form-control col-md-4\"\n        value={prescription}\n        onChange={onPrescriptionChange}\n      />\n    </div>\n    <p style={{ color: 'red' }}>{validationText}</p>\n    <button\n      onClick={e => {\n        e.preventDefault();\n        addDrug();\n      }}\n      className=\"btn btn-outline-secondary\">\n      Add\n    </button>\n  </form>\n);\n\nconst SearchBar = ({ searchTerm, onSearchTermChange }) => (\n  <div>\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      placeholder=\"search for a drug by name\"\n      value={searchTerm}\n      onChange={onSearchTermChange}\n    />\n  </div>\n);\n\nconst DrugsTable = ({ drugList, changeDrug, searchTerm }) => {\n  let rows = [];\n  drugList.forEach((drug, i) => {\n    if (drug.drug.toLowerCase().indexOf(searchTerm.toLowerCase()) === -1) {\n      return;\n    }\n\n    rows.push(\n      <tr\n        key={i}\n        onClick={() => changeDrug(drug)}\n        style={{ cursor: 'pointer' }}>\n        <td>{drug.drug}</td>\n        <td>{drug.quantity}</td>\n        <td>{drug.price}</td>\n      </tr>\n    );\n  });\n  return (\n    <div style={{ width: '100%', height: '50vh' }}>\n      <FreeScrollBar>\n        <Notifications options={{ zIndex: 200, top: '50px' }} />\n        <Table hover bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Quantity in Stock</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </Table>\n      </FreeScrollBar>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}