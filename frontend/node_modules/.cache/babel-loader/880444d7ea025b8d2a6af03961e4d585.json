{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\n\nvar _themer = require(\"../../../../themer\");\n\nvar _memoizeClassName = _interopRequireDefault(require(\"../utils/memoizeClassName\"));\n\nvar _palette = _interopRequireDefault(require(\"../foundational-styles/palette\"));\n/**\n * The link appearance unlike the Button is based on the color property.\n * Currently the Link does not support the Intent or the appearance interface.\n * @param {string} color\n * @return {Object} appearance of the link.\n */\n\n\nvar getLinkAppearance = function getLinkAppearance(color) {\n  switch (color) {\n    case 'neutral':\n      return _themer.Themer.createLinkAppearance({\n        base: {\n          color: _palette.default.neutral.base\n        },\n        hover: {\n          color: (0, _tinycolor.default)(_palette.default.neutral.base).lighten(10).toString()\n        },\n        active: {\n          color: (0, _tinycolor.default)(_palette.default.neutral.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat((0, _tinycolor.default)(_palette.default.neutral.base).setAlpha(0.4).toString())\n        }\n      });\n\n    case 'green':\n      return _themer.Themer.createLinkAppearance({\n        base: {\n          color: _palette.default.green.base\n        },\n        hover: {\n          color: (0, _tinycolor.default)(_palette.default.green.base).lighten(10).toString()\n        },\n        active: {\n          color: (0, _tinycolor.default)(_palette.default.green.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat((0, _tinycolor.default)(_palette.default.green.base).setAlpha(0.4).toString())\n        }\n      });\n\n    case 'default':\n    case 'blue':\n    default:\n      return _themer.Themer.createLinkAppearance({\n        base: {\n          color: _palette.default.blue.base\n        },\n        hover: {\n          color: (0, _tinycolor.default)(_palette.default.blue.base).lighten(10).toString()\n        },\n        active: {\n          color: (0, _tinycolor.default)(_palette.default.blue.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat((0, _tinycolor.default)(_palette.default.blue.base).setAlpha(0.4).toString())\n        }\n      });\n  }\n};\n/**\n * Get the className of a `Link` component.\n * @param {string} color\n * @return {string} the appearance class name.\n */\n\n\nvar _default = (0, _memoizeClassName.default)(getLinkAppearance);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}