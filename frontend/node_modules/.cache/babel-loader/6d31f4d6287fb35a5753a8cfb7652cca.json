{"ast":null,"code":"import _defineProperty from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/frontend/src/components/Lab Module/ProcessingSection.js\";\nimport React, { Component, Suspense, lazy } from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { _fetchData, _postData, _customNotify, _updateData, _warningNotify } from '../helpers';\nimport Loading from '../loading';\nvar SampleAnalysis = lazy(function () {\n  return import('./SampleAnalysis');\n});\nvar PathologistComment = lazy(function () {\n  return import('./PathologistComment');\n});\nvar PendingRequestProcess = lazy(function () {\n  return import('./PendingRequestProcess');\n});\n\nvar ProcessingSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProcessingSection, _Component);\n\n  function ProcessingSection(props) {\n    var _this;\n\n    _classCallCheck(this, ProcessingSection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProcessingSection).call(this, props));\n\n    _this.onStatusChange = function (test_id) {\n      return !_this.state.testIdArr.includes(test_id) ? _this.saveId(test_id) : null;\n    };\n\n    _this.onStatusUnchanged = function (test_id) {\n      return _this.state.testIdArr.includes(test_id) ? _this.removeId(test_id) : null;\n    };\n\n    _this.saveLabInvestigation = function (lab_investigation) {\n      var appearance = lab_investigation.appearance,\n          microscopy = lab_investigation.microscopy,\n          culture = lab_investigation.culture,\n          antibiotic = lab_investigation.antibiotic,\n          test_id = lab_investigation.test_id; // console.log(lab_investigation)\n      // let data = _convertArrOfObjToArr(lab_investigation);\n\n      var route = 'lab/analyzeSample';\n      var data = {\n        appearance: appearance,\n        microscopy: microscopy,\n        culture: culture,\n        antibiotic: antibiotic,\n        test_id: test_id\n      };\n\n      var callback = function callback() {\n        return _customNotify('record submitted');\n      };\n\n      _updateData({\n        route: route,\n        data: data,\n        callback: callback\n      });\n    };\n\n    _this.saveResults = function () {\n      var testResultsArr = _this.state.testResultsArr; // console.log(testResultsArr);\n      // testResultsArr.forEach(test => this.saveLabInvestigation(test));\n\n      var testIdArr = [];\n      testResultsArr.forEach(function (res) {\n        return testIdArr.push(res.test_id);\n      });\n\n      _this.autoUpdate(testIdArr);\n    };\n\n    _this.saveCollectedSamples = function () {\n      var data = _this.state.testIdArr;\n      if (data.length === 0) return _warningNotify('no changes made');\n      var route = 'lab/submitSamplesCollected';\n\n      var cb = function cb() {\n        return _customNotify('Record has been submitted successfully.');\n      }; // _updateData({ route, data, cb });\n      // this.props.updateTable(this.props.req.id);\n\n\n      _this.autoUpdate(data);\n\n      console.log(_this.state.testIdArr);\n    };\n\n    _this.onBlurCaptured = function (sample, cellName, cellValue) {\n      var id = sample.test_id;\n      var testResultsArr = _this.state.testResultsArr; // let newArr = [];\n\n      if (testResultsArr.length === 0) {\n        testResultsArr = testResultsArr.concat(_defineProperty({\n          test_id: id\n        }, cellName, cellValue));\n      } else {\n        var res = [];\n        testResultsArr.forEach(function (test) {\n          if (test.test_id === id) res.push(true);else res.push(false);\n        });\n\n        if (res.includes(true)) {\n          testResultsArr.map(function (a) {\n            return a.test_id === id ? a[cellName] = cellValue : a;\n          });\n        } else {\n          testResultsArr = testResultsArr.concat(_defineProperty({\n            test_id: id\n          }, cellName, cellValue));\n        }\n      }\n\n      _this.setState({\n        testResultsArr: testResultsArr\n      });\n    };\n\n    _this.state = {\n      requestForThisPatient: [],\n      testIdArr: [],\n      testResultsArr: []\n    };\n    return _this;\n  }\n\n  _createClass(ProcessingSection, [{\n    key: \"fetchData\",\n    value: function fetchData(id, mode) {\n      var _this2 = this;\n\n      var route = mode === 'pending' ? \"lab/pendingReqById?id=\".concat(id) : mode === 'collected' ? \"lab/collectedSamplesById?id=\".concat(id) : mode === 'analyzed' ? \"lab/analyzedSamplesById?id=\".concat(id) : null;\n\n      var success_callback = function success_callback(data) {\n        return _this2.setState({\n          requestForThisPatient: data\n        });\n      };\n\n      var error_callback = function error_callback(err) {\n        return _this2.setState({\n          requestErr: err\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var mode = this.props.mode;\n      var id = this.props.req.id;\n      this.fetchData(id, mode);\n    }\n  }, {\n    key: \"saveId\",\n    value: function saveId(test_id) {\n      var testIdArr = this.state.testIdArr;\n      var newArr = testIdArr.concat(test_id);\n      this.setState({\n        testIdArr: newArr\n      });\n    }\n  }, {\n    key: \"removeId\",\n    value: function removeId(test_id) {\n      var testIdArr = this.state.testIdArr;\n      var newArr = testIdArr.filter(function (id) {\n        return id !== test_id;\n      });\n      this.setState({\n        testIdArr: newArr\n      });\n    }\n  }, {\n    key: \"autoUpdate\",\n    value: function autoUpdate(testIdArr) {\n      var requestForThisPatient = this.state.requestForThisPatient;\n      console.log(requestForThisPatient);\n      var newList = [];\n      requestForThisPatient.forEach(function (req) {\n        return !testIdArr.includes(req.test_id) ? newList.push(req) : null;\n      }); // for(let i=0; i<testIdArr.length; i++){\n      // requestForThisPatient = requestForThisPatient.filter(req => req.id !== testIdArr[i]);\n      // if(testIdArr[i])\n      // }\n\n      this.setState({\n        requestForThisPatient: newList\n      }); // console.log(newList)\n    } // saveChanges = () => {\n    //   const { mode } = this.props;\n    //   if (mode === 'pending') {\n    //     this.saveCollectedSamples();\n    //   } else if (mode === 'collected') this.saveResults();\n    //   // let id = this.props.req.id;\n    //   // this.props.updateTable(id);\n    // };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          req = _this$props.req,\n          mode = _this$props.mode,\n          cancel = _this$props.cancel;\n      var onStatusChange = this.onStatusChange,\n          onStatusUnchanged = this.onStatusUnchanged,\n          saveCollectedSamples = this.saveCollectedSamples,\n          saveResults = this.saveResults,\n          onBlurCaptured = this.onBlurCaptured;\n      var requestForThisPatient = this.state.requestForThisPatient;\n      return React.createElement(Suspense, {\n        fallback: React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, mode), //   requestForThisPatient.length === 0 ? (\n      //   <p className=\"text-center\">No record found</p>\n      // ) :\n      mode === 'pending' ? React.createElement(PendingRequestProcess, {\n        requests: requestForThisPatient // resultModalOpen={resultModalOpen}\n        // previewModalOpen={previewModalOpen}\n        // toggleResultModal={toggleResultModal}\n        // togglePreviewModal={togglePreviewModal}\n        // saveLabResults={saveLabResults}\n        ,\n        onStatusChange: onStatusChange,\n        onStatusUnchanged: onStatusUnchanged,\n        saveCollectedSamples: saveCollectedSamples,\n        cancel: cancel // currentReq={requestForThisPatient}\n        ,\n        req: req,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }) : mode === 'collected' ? React.createElement(SampleAnalysis, {\n        saveResults: saveResults,\n        currentReq: requestForThisPatient,\n        onBlurCaptured: onBlurCaptured,\n        cancel: cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }) : mode === 'analyzed' ? React.createElement(PathologistComment, {\n        currentReq: requestForThisPatient,\n        cancel: cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }) : // ) : mode === 'commented' ? (\n      //   <\n      // <SampleAnalysis currentReq={requestForThisPatient} />\n      React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Record not found\"));\n    }\n  }]);\n\n  return ProcessingSection;\n}(Component);\n\nexport { ProcessingSection as default };\n\nvar PatientDetails = function PatientDetails(_ref) {\n  var _ref$userDetails = _ref.userDetails,\n      userDetails = _ref$userDetails === void 0 ? [] : _ref$userDetails,\n      _ref$currentReq = _ref.currentReq,\n      currentReq = _ref$currentReq === void 0 ? {} : _ref$currentReq;\n  return React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"col-md-4\",\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Patient:\", ' '), React.createElement(\"label\", {\n    className: \"col-md-6\",\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, userDetails.surname, \" \", userDetails.firstname), React.createElement(\"label\", {\n    className: \"col-md-4\",\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Test:\", ' '), React.createElement(\"label\", {\n    className: \"col-md-6\",\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, currentReq.test), React.createElement(\"label\", {\n    className: \"col-md-4\",\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"Sample:\", ' '), React.createElement(\"label\", {\n    className: \"col-md-6\",\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, currentReq.sample));\n};\n\nexport var ResultModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ResultModal, _React$Component);\n\n  function ResultModal(props) {\n    var _this3;\n\n    _classCallCheck(this, ResultModal);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ResultModal).call(this, props));\n\n    _this3.onInputChange = function (e) {\n      var _this3$setState;\n\n      _this3.setState((_this3$setState = {}, _defineProperty(_this3$setState, e.target.name, e.target.value), _defineProperty(_this3$setState, \"warning\", ''), _this3$setState));\n    };\n\n    _this3.saveLabResults = function (e) {\n      e.preventDefault();\n      var _this3$state = _this3.state,\n          result = _this3$state.result,\n          appearance = _this3$state.appearance,\n          microscopy = _this3$state.microscopy,\n          culture = _this3$state.culture,\n          antibiotic = _this3$state.antibiotic;\n      if (result === '' && appearance === '' && microscopy === '' && culture === '' && antibiotic === '') return _this3.setState({\n        warning: 'All fields cannot be left blank'\n      });\n      var formData = {\n        result: result,\n        appearance: appearance,\n        microscopy: microscopy,\n        culture: culture,\n        antibiotic: antibiotic\n      };\n\n      _this3.props.saveLabResults(formData);\n\n      _this3.clearText();\n    };\n\n    _this3.clearText = function () {\n      return _this3.setState({\n        result: '',\n        appearance: '',\n        microscopy: '',\n        culture: '',\n        antibiotic: ''\n      });\n    };\n\n    _this3.state = {\n      result: '',\n      appearance: '',\n      microscopy: '',\n      culture: '',\n      antibiotic: '',\n      warning: ''\n    };\n    return _this3;\n  }\n\n  _createClass(ResultModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          resultModalOpen = _this$props2.resultModalOpen,\n          toggleResultModal = _this$props2.toggleResultModal,\n          currentReq = _this$props2.currentReq,\n          userDetails = _this$props2.userDetails;\n      var _this$state = this.state,\n          result = _this$state.result,\n          appearance = _this$state.appearance,\n          microscopy = _this$state.microscopy,\n          culture = _this$state.culture,\n          antibiotic = _this$state.antibiotic,\n          warning = _this$state.warning;\n      return React.createElement(Modal, {\n        isOpen: resultModalOpen,\n        toggle: toggleResultModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: toggleResultModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, \"Add Result\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.saveLabResults,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(PatientDetails, {\n        currentReq: currentReq,\n        userDetails: userDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"col-md-3 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, \"Result:\"), React.createElement(\"input\", {\n        name: \"result\",\n        className: \"form-control col-md-9\",\n        value: result,\n        onChange: this.onInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"col-md-3 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \"Appearance:\"), React.createElement(\"input\", {\n        name: \"appearance\",\n        className: \"form-control col-md-9\",\n        value: appearance,\n        onChange: this.onInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"col-md-3 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Microscopy:\"), React.createElement(\"input\", {\n        name: \"microscopy\",\n        className: \"form-control col-md-9\",\n        value: microscopy,\n        onChange: this.onInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"col-md-3 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"Culture:\"), React.createElement(\"input\", {\n        name: \"culture\",\n        className: \"form-control col-md-9\",\n        value: culture,\n        onChange: this.onInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"col-md-3 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, \"Antibiotic:\"), React.createElement(\"input\", {\n        name: \"antibiotic\",\n        className: \"form-control col-md-9\",\n        value: antibiotic,\n        onChange: this.onInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }), warning && React.createElement(\"span\", {\n        className: \"alert alert-danger text-center offset-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, warning), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-outline-success offset-md-5\",\n        value: \"Save Result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ResultModal;\n}(React.Component);\n\nvar Result = function Result(_ref2) {\n  var result = _ref2.result,\n      appearance = _ref2.appearance,\n      microscopy = _ref2.microscopy,\n      culture = _ref2.culture,\n      antibiotic = _ref2.antibiotic;\n  var divideStyle = {\n    margin: '.7em',\n    width: '50%'\n  };\n  var labelStyle = {\n    textAlign: 'left',\n    width: '30%'\n  };\n  var valStyle = {\n    textAlign: 'left',\n    width: '70%'\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385\n    },\n    __self: this\n  }, \"Lab Test Result\"), React.createElement(\"div\", {\n    style: divideStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, \"Result: \"), React.createElement(\"label\", {\n    style: valStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, result)), React.createElement(\"div\", {\n    style: divideStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, \"Appearance: \"), React.createElement(\"label\", {\n    style: valStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  }, appearance)), React.createElement(\"div\", {\n    style: divideStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395\n    },\n    __self: this\n  }, \"Microscopy: \"), React.createElement(\"label\", {\n    style: valStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396\n    },\n    __self: this\n  }, microscopy)), React.createElement(\"div\", {\n    style: divideStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, \"Culture: \"), React.createElement(\"label\", {\n    style: valStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    },\n    __self: this\n  }, culture)), React.createElement(\"div\", {\n    style: divideStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }, \"Antibiotic: \"), React.createElement(\"label\", {\n    style: valStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    },\n    __self: this\n  }, antibiotic)));\n};\n\nvar PrintPreview = function PrintPreview(_ref3) {\n  var req = _ref3.req,\n      userDetails = _ref3.userDetails,\n      previewModalOpen = _ref3.previewModalOpen,\n      togglePreviewModal = _ref3.togglePreviewModal;\n\n  var onPrintClick = function onPrintClick() {\n    window.frames['print_frame'].document.body.innerHTML = document.getElementById('labResult').innerHTML;\n    window.frames['print_frame'].window.focus();\n    window.frames['print_frame'].window.print();\n  };\n\n  return React.createElement(Modal, {\n    size: \"lg\",\n    isOpen: previewModalOpen,\n    toggle: togglePreviewModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: togglePreviewModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425\n    },\n    __self: this\n  }, \"Add Result\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"labResult\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427\n    },\n    __self: this\n  }, React.createElement(Result, {\n    result: \"cleared\",\n    appearance: \"cleared\",\n    microscopy: \"cleared\",\n    culture: \"cleared\",\n    antibiotic: \"cleared\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429\n    },\n    __self: this\n  })), React.createElement(\"iframe\", {\n    name: \"print_frame\",\n    width: \"0\",\n    height: \"0\",\n    src: \"about:blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-outline-success\",\n    onClick: onPrintClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }, \"Print\")));\n};","map":{"version":3,"sources":["/root/Desktop/bits-his/frontend/src/components/Lab Module/ProcessingSection.js"],"names":["React","Component","Suspense","lazy","Modal","ModalHeader","ModalBody","_fetchData","_postData","_customNotify","_updateData","_warningNotify","Loading","SampleAnalysis","PathologistComment","PendingRequestProcess","ProcessingSection","props","onStatusChange","test_id","state","testIdArr","includes","saveId","onStatusUnchanged","removeId","saveLabInvestigation","lab_investigation","appearance","microscopy","culture","antibiotic","route","data","callback","saveResults","testResultsArr","forEach","res","push","autoUpdate","saveCollectedSamples","length","cb","console","log","onBlurCaptured","sample","cellName","cellValue","id","concat","test","map","a","setState","requestForThisPatient","mode","success_callback","error_callback","err","requestErr","req","fetchData","newArr","filter","newList","cancel","PatientDetails","userDetails","currentReq","textAlign","surname","firstname","ResultModal","onInputChange","e","target","name","value","saveLabResults","preventDefault","result","warning","formData","clearText","resultModalOpen","toggleResultModal","Result","divideStyle","margin","width","labelStyle","valStyle","PrintPreview","previewModalOpen","togglePreviewModal","onPrintClick","window","frames","document","body","innerHTML","getElementById","focus","print"],"mappings":"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","sourcesContent":["import React, { Component, Suspense, lazy } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n} from 'reactstrap';\nimport {\n  _fetchData,\n  _postData,\n  _customNotify,\n  _updateData,\n  _warningNotify,\n} from '../helpers';\nimport Loading from '../loading';\nconst SampleAnalysis = lazy(() => import('./SampleAnalysis'));\nconst PathologistComment = lazy(() => import('./PathologistComment'));\nconst PendingRequestProcess = lazy(() => import('./PendingRequestProcess'));\n\nexport default class ProcessingSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      requestForThisPatient: [],\n      testIdArr: [],\n      testResultsArr: [],\n    };\n  }\n\n  fetchData(id, mode) {\n    let route =\n      mode === 'pending'\n        ? `lab/pendingReqById?id=${id}`\n        : mode === 'collected'\n        ? `lab/collectedSamplesById?id=${id}`\n        : mode === 'analyzed'\n        ? `lab/analyzedSamplesById?id=${id}`\n        : null;\n    let success_callback = data =>\n      this.setState({ requestForThisPatient: data });\n    let error_callback = err => this.setState({ requestErr: err });\n    _fetchData({ route, success_callback, error_callback });\n  }\n\n  componentDidMount() {\n    const { mode } = this.props;\n    const { id } = this.props.req;\n    this.fetchData(id, mode);\n  }\n\n  saveId(test_id) {\n    const { testIdArr } = this.state;\n    let newArr = testIdArr.concat(test_id);\n    this.setState({ testIdArr: newArr });\n  }\n\n  removeId(test_id) {\n    const { testIdArr } = this.state;\n    let newArr = testIdArr.filter(id => id !== test_id);\n    this.setState({ testIdArr: newArr });\n  }\n\n  onStatusChange = test_id =>\n    !this.state.testIdArr.includes(test_id) ? this.saveId(test_id) : null;\n\n  onStatusUnchanged = test_id =>\n    this.state.testIdArr.includes(test_id) ? this.removeId(test_id) : null;\n\n  saveLabInvestigation = lab_investigation => {\n    let {\n      appearance,\n      microscopy,\n      culture,\n      antibiotic,\n      test_id,\n    } = lab_investigation;\n\n    // console.log(lab_investigation)\n    // let data = _convertArrOfObjToArr(lab_investigation);\n    let route = 'lab/analyzeSample';\n    let data = { appearance, microscopy, culture, antibiotic, test_id };\n    let callback = () => _customNotify('record submitted');\n    _updateData({ route, data, callback });\n  };\n\n  saveResults = () => {\n    const { testResultsArr } = this.state;\n    // console.log(testResultsArr);\n    // testResultsArr.forEach(test => this.saveLabInvestigation(test));\n    let testIdArr = [];\n    testResultsArr.forEach(res => testIdArr.push(res.test_id))\n    this.autoUpdate(testIdArr)\n  };\n\n  saveCollectedSamples = () => {\n    let data = this.state.testIdArr;\n\n    if (data.length === 0) return _warningNotify('no changes made');\n\n    let route = 'lab/submitSamplesCollected';\n    let cb = () => _customNotify('Record has been submitted successfully.');\n    // _updateData({ route, data, cb });\n    // this.props.updateTable(this.props.req.id);\n    this.autoUpdate(data)\n    console.log(this.state.testIdArr);\n  };\n\n  autoUpdate(testIdArr){\n    let { requestForThisPatient } = this.state;\n    console.log(requestForThisPatient)\n    let newList = [];\n    requestForThisPatient.forEach(req => !testIdArr.includes(req.test_id) ? newList.push(req) : null);\n\n    // for(let i=0; i<testIdArr.length; i++){\n      // requestForThisPatient = requestForThisPatient.filter(req => req.id !== testIdArr[i]);\n      // if(testIdArr[i])\n    // }\n    \n    this.setState({ requestForThisPatient: newList })\n    // console.log(newList)\n  }\n\n  // saveChanges = () => {\n  //   const { mode } = this.props;\n  //   if (mode === 'pending') {\n  //     this.saveCollectedSamples();\n  //   } else if (mode === 'collected') this.saveResults();\n\n  //   // let id = this.props.req.id;\n  //   // this.props.updateTable(id);\n  // };\n\n  onBlurCaptured = (sample, cellName, cellValue) => {\n    let id = sample.test_id;\n    let { testResultsArr } = this.state;\n    // let newArr = [];\n    if (testResultsArr.length === 0) {\n      testResultsArr = testResultsArr.concat({\n        test_id: id,\n        [cellName]: cellValue,\n      });\n    } else {\n      let res = [];\n      testResultsArr.forEach(test => {\n        if (test.test_id === id) res.push(true);\n        else res.push(false);\n      });\n\n      if (res.includes(true)) {\n        testResultsArr.map(a =>\n          a.test_id === id ? (a[cellName] = cellValue) : a\n        );\n      } else {\n        testResultsArr = testResultsArr.concat({\n          test_id: id,\n          [cellName]: cellValue,\n        });\n      }\n    }\n    this.setState({ testResultsArr });\n  };\n\n  render() {\n    const { req, mode, cancel } = this.props\n    const {\n      // resultModalOpen,\n      // previewModalOpen,\n      // toggleResultModal,\n      // togglePreviewModal,\n      // saveLabResults,\n      onStatusChange,\n      onStatusUnchanged,\n      // currentReq,\n      saveCollectedSamples,\n      saveResults,\n      onBlurCaptured,\n    } = this;\n    const { requestForThisPatient } = this.state;\n    \n\n    return (\n      <Suspense fallback={<Loading />}>\n      <p>{mode}</p>\n        {//   requestForThisPatient.length === 0 ? (\n        //   <p className=\"text-center\">No record found</p>\n        // ) :\n        mode === 'pending' ? (\n          <PendingRequestProcess\n            requests={requestForThisPatient}\n            // resultModalOpen={resultModalOpen}\n            // previewModalOpen={previewModalOpen}\n            // toggleResultModal={toggleResultModal}\n            // togglePreviewModal={togglePreviewModal}\n            // saveLabResults={saveLabResults}\n            onStatusChange={onStatusChange}\n            onStatusUnchanged={onStatusUnchanged}\n            saveCollectedSamples={saveCollectedSamples}\n            cancel={cancel}\n            // currentReq={requestForThisPatient}\n            req={req}\n          />\n        ) : mode === 'collected' ? (\n          <SampleAnalysis\n            saveResults={saveResults}\n            currentReq={requestForThisPatient}\n            onBlurCaptured={onBlurCaptured}\n            cancel={cancel}\n          />\n        ) : mode === 'analyzed' ? ( \n          <PathologistComment currentReq={requestForThisPatient} cancel={cancel} />\n        ) : (\n          // ) : mode === 'commented' ? (\n          //   <\n          // <SampleAnalysis currentReq={requestForThisPatient} />\n          <p>Record not found</p>\n        )}\n      </Suspense>\n    );\n  }\n}\n\nconst PatientDetails = ({ userDetails = [], currentReq = {} }) => (\n  <div className=\"form-group\">\n    <label className=\"col-md-4\" style={{ textAlign: 'left' }}>\n      Patient:{' '}\n    </label>\n    <label className=\"col-md-6\" style={{ textAlign: 'left' }}>\n      {userDetails.surname} {userDetails.firstname}\n    </label>\n    <label className=\"col-md-4\" style={{ textAlign: 'left' }}>\n      Test:{' '}\n    </label>\n    <label className=\"col-md-6\" style={{ textAlign: 'left' }}>\n      {currentReq.test}\n    </label>\n    <label className=\"col-md-4\" style={{ textAlign: 'left' }}>\n      Sample:{' '}\n    </label>\n    <label className=\"col-md-6\" style={{ textAlign: 'left' }}>\n      {currentReq.sample}\n    </label>\n  </div>\n);\n\nexport class ResultModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: '',\n      appearance: '',\n      microscopy: '',\n      culture: '',\n      antibiotic: '',\n      warning: '',\n    };\n  }\n  onInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n      warning: '',\n    });\n  };\n\n  saveLabResults = e => {\n    e.preventDefault();\n    const { result, appearance, microscopy, culture, antibiotic } = this.state;\n    if (\n      result === '' &&\n      appearance === '' &&\n      microscopy === '' &&\n      culture === '' &&\n      antibiotic === ''\n    )\n      return this.setState({ warning: 'All fields cannot be left blank' });\n\n    const formData = { result, appearance, microscopy, culture, antibiotic };\n    this.props.saveLabResults(formData);\n    this.clearText();\n  };\n\n  clearText = () =>\n    this.setState({\n      result: '',\n      appearance: '',\n      microscopy: '',\n      culture: '',\n      antibiotic: '',\n    });\n\n  render() {\n    const {\n      resultModalOpen,\n      toggleResultModal,\n      currentReq,\n      userDetails,\n    } = this.props;\n    const {\n      result,\n      appearance,\n      microscopy,\n      culture,\n      antibiotic,\n      warning,\n    } = this.state;\n    return (\n      <Modal isOpen={resultModalOpen} toggle={toggleResultModal}>\n        <ModalHeader toggle={toggleResultModal}>Add Result</ModalHeader>\n        <ModalBody>\n          <form onSubmit={this.saveLabResults}>\n            <PatientDetails currentReq={currentReq} userDetails={userDetails} />\n            <label className=\"col-md-3 control-label\">Result:</label>\n            <input\n              name=\"result\"\n              className=\"form-control col-md-9\"\n              value={result}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Appearance:</label>\n            <input\n              name=\"appearance\"\n              className=\"form-control col-md-9\"\n              value={appearance}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Microscopy:</label>\n            <input\n              name=\"microscopy\"\n              className=\"form-control col-md-9\"\n              value={microscopy}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Culture:</label>\n            <input\n              name=\"culture\"\n              className=\"form-control col-md-9\"\n              value={culture}\n              onChange={this.onInputChange}\n            />\n\n            <label className=\"col-md-3 control-label\">Antibiotic:</label>\n            <input\n              name=\"antibiotic\"\n              className=\"form-control col-md-9\"\n              value={antibiotic}\n              onChange={this.onInputChange}\n            />\n\n            {warning && (\n              <span className=\"alert alert-danger text-center offset-md-4\">\n                {warning}\n              </span>\n            )}\n            <hr />\n            <input\n              type=\"submit\"\n              className=\"btn btn-outline-success offset-md-5\"\n              value=\"Save Result\"\n            />\n          </form>\n        </ModalBody>\n      </Modal>\n    );\n  }\n}\n\nconst Result = ({ result, appearance, microscopy, culture, antibiotic }) => {\n  const divideStyle = {\n    margin: '.7em',\n    width: '50%',\n  };\n  const labelStyle = {\n    textAlign: 'left',\n    width: '30%',\n  };\n  const valStyle = {\n    textAlign: 'left',\n    width: '70%',\n  };\n  return (\n    <div>\n      <h2>Lab Test Result</h2>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Result: </label>\n        <label style={valStyle}>{result}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Appearance: </label>\n        <label style={valStyle}>{appearance}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Microscopy: </label>\n        <label style={valStyle}>{microscopy}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Culture: </label>\n        <label style={valStyle}>{culture}</label>\n      </div>\n      <div style={divideStyle}>\n        <label style={labelStyle}>Antibiotic: </label>\n        <label style={valStyle}>{antibiotic}</label>\n      </div>\n    </div>\n  );\n};\n\nconst PrintPreview = ({\n  req,\n  userDetails,\n  previewModalOpen,\n  togglePreviewModal,\n}) => {\n  const onPrintClick = () => {\n    window.frames[\n      'print_frame'\n    ].document.body.innerHTML = document.getElementById('labResult').innerHTML;\n    window.frames['print_frame'].window.focus();\n    window.frames['print_frame'].window.print();\n  };\n  return (\n    <Modal size=\"lg\" isOpen={previewModalOpen} toggle={togglePreviewModal}>\n      <ModalHeader toggle={togglePreviewModal}>Add Result</ModalHeader>\n      <ModalBody>\n        <div id=\"labResult\">\n          {/* <PatientInfo req={req} userDetails={userDetails} /> */}\n          <Result\n            result=\"cleared\"\n            appearance=\"cleared\"\n            microscopy=\"cleared\"\n            culture=\"cleared\"\n            antibiotic=\"cleared\"\n          />\n        </div>\n        <iframe name=\"print_frame\" width=\"0\" height=\"0\" src=\"about:blank\" />\n        <button className=\"btn btn-outline-success\" onClick={onPrintClick}>\n          Print\n        </button>\n      </ModalBody>\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}