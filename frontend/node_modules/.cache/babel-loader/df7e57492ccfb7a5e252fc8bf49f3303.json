{"ast":null,"code":"import _classCallCheck from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/frontend/src/components/Records Module/DoctorsListModal.js\";\nimport React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport SearchBar from './SearchBar';\nimport Notifications, { notify } from 'react-notify-toast';\nimport { _fetchData, _postData } from '../helpers';\n/**\n * This renders the row in the table\n */\n\nvar TableRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TableRow, _React$Component);\n\n  function TableRow() {\n    _classCallCheck(this, TableRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableRow).apply(this, arguments));\n  }\n\n  _createClass(TableRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var doctor = this.props.doctor;\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, doctor.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, doctor.speciality), React.createElement(\"td\", {\n        className: \"moveToCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick(e) {\n          e.preventDefault();\n\n          _this.props.assignDoctor(doctor.name);\n        },\n        style: {\n          marginBottom: '1rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"Assign\")));\n    }\n  }]);\n\n  return TableRow;\n}(React.Component);\n/**\n * This component renders the table\n */\n\n\nvar DoctorsTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(DoctorsTable, _React$Component2);\n\n  function DoctorsTable() {\n    _classCallCheck(this, DoctorsTable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DoctorsTable).apply(this, arguments));\n  }\n\n  _createClass(DoctorsTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var filterText = this.props.filterText;\n      var rows = [];\n      this.props.doctorsList.forEach(function (doctor) {\n        if (doctor.name.toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\n          return;\n        }\n\n        rows.push(React.createElement(TableRow, {\n          doctor: doctor,\n          key: doctor.name,\n          assignDoctor: _this2.props.assignDoctor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Table, {\n        bordered: true,\n        hover: true,\n        striped: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Speciality\"), React.createElement(\"th\", {\n        className: \"moveToCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Assign Doctor\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, rows)));\n    }\n  }]);\n\n  return DoctorsTable;\n}(React.Component);\n/**\n * This component renders the table and the search text field\n * It also fetches the data that is being displayed on the table\n * It is rendered as a modal page\n */\n\n\nvar DoctorsListModal =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(DoctorsListModal, _React$Component3);\n\n  function DoctorsListModal(props) {\n    var _this3;\n\n    _classCallCheck(this, DoctorsListModal);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DoctorsListModal).call(this, props));\n\n    _this3.fetchData = function () {\n      var route = 'users/doctorsList';\n\n      var success_callback = function success_callback(data) {\n        return _this3.setState({\n          doctorsList: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this3.setState({\n          error: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    };\n\n    _this3.handleFilterTextChange = function (filterText) {\n      _this3.setState({\n        filterText: filterText\n      });\n    };\n\n    _this3.assignDoctor = function (name) {\n      var myColor = {\n        background: '#55ba98',\n        text: '#FFFFFF'\n      };\n      var data = {\n        assigned_to: name,\n        id: _this3.props.patientId\n      };\n      var route = 'patientrecords/assign';\n\n      var callback = function callback() {\n        /**\n        * this part implement the notification that pops up\n        * after we have assigned a patient to a doctor.\n        * The notification color was set with the variable myColor above.\n        */\n        notify.show(\"Patient with id: \".concat(_this3.props.patientId, \" has been assigned to Dr. \").concat(name, \"!\"), 'custom', 3000, myColor);\n      };\n\n      var error_cb = function error_cb(error) {\n        return notify.show(\"Bad response from server\", 'custom', 3000, 'red');\n      };\n\n      _postData({\n        route: route,\n        data: data,\n        callback: callback,\n        error_cb: error_cb\n      });\n\n      _this3.props.closeDoctorsModal();\n    };\n\n    _this3.state = {\n      filterText: '',\n      doctorsList: [],\n      id: '',\n      name: '',\n      date: '',\n      error: ''\n    };\n    return _this3;\n  } //the method that fetches the data using fetch API\n\n\n  _createClass(DoctorsListModal, [{\n    key: \"componentDidMount\",\n    //when component is mounted, the data is displayed\n    value: function componentDidMount() {\n      this.fetchData();\n    } // this handles the search filter text field change\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        isOpen: this.props.doctorsModalIsOpen,\n        toggle: this.props.closeDoctorsModal,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.props.closeDoctorsModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Assign a doctor to \", this.props.patientId), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Notifications, {\n        options: {\n          zIndex: 200,\n          top: '50px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(SearchBar, {\n        filterText: this.state.filterText,\n        onFilterTextChange: this.handleFilterTextChange,\n        placeholder: \"Search for a doctor...\",\n        width: \"60rem\",\n        size: 45,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(DoctorsTable, {\n        doctorsList: this.state.doctorsList,\n        filterText: this.state.filterText,\n        assignDoctor: this.assignDoctor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.props.closeDoctorsModal,\n        className: \"btn btn-secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Next Patient\"))));\n    }\n  }]);\n\n  return DoctorsListModal;\n}(React.Component);\n\nexport default DoctorsListModal;","map":{"version":3,"sources":["/root/Desktop/bits-his/frontend/src/components/Records Module/DoctorsListModal.js"],"names":["React","Table","Modal","ModalHeader","ModalBody","SearchBar","Notifications","notify","_fetchData","_postData","TableRow","doctor","props","name","speciality","e","preventDefault","assignDoctor","marginBottom","Component","DoctorsTable","filterText","rows","doctorsList","forEach","toLowerCase","indexOf","push","DoctorsListModal","fetchData","route","success_callback","data","setState","error_callback","error","handleFilterTextChange","myColor","background","text","assigned_to","id","patientId","callback","show","error_cb","closeDoctorsModal","state","date","doctorsModalIsOpen","zIndex","top"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport SearchBar from './SearchBar';\nimport Notifications, { notify } from 'react-notify-toast';\nimport { _fetchData, _postData } from '../helpers'\n\n/**\n * This renders the row in the table\n */\nclass TableRow extends React.Component {\n  render() {\n    const doctor = this.props.doctor;\n\n    return (\n      <tr>\n        <td>{doctor.name}</td>\n        <td>{doctor.speciality}</td>\n        <td className=\"moveToCenter\">\n          <button\n            className=\"btn btn-primary\"\n            onClick={(e) => {\n              e.preventDefault(); \n              this.props.assignDoctor(doctor.name)\n            }}\n            style={{ marginBottom: '1rem' }}>\n            Assign\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\n/**\n * This component renders the table\n */\nclass DoctorsTable extends React.Component {\n  render() {\n    const filterText = this.props.filterText;\n\n    const rows = [];\n\n    this.props.doctorsList.forEach(doctor => {\n      if (doctor.name.toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\n        return;\n      }\n\n      rows.push(\n        <TableRow\n          doctor={doctor}\n          key={doctor.name}\n          assignDoctor={this.props.assignDoctor}\n        />\n      );\n    });\n\n    return (\n      <form>\n        <Table bordered hover striped>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Speciality</th>\n              <th className=\"moveToCenter\">Assign Doctor</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </Table>\n      </form>\n    );\n  }\n}\n\n/**\n * This component renders the table and the search text field\n * It also fetches the data that is being displayed on the table\n * It is rendered as a modal page\n */\nclass DoctorsListModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText: '',\n      doctorsList: [],\n      id: '',\n      name: '',\n      date: '',\n      error: ''\n    };\n  }\n\n  //the method that fetches the data using fetch API\n  fetchData = () => {\n    let route = 'users/doctorsList';\n    let success_callback = data => this.setState({ doctorsList: data })\n    let error_callback = error => this.setState({ error })\n    _fetchData({ route, success_callback, error_callback})\n  };\n\n  //when component is mounted, the data is displayed\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  // this handles the search filter text field change\n  handleFilterTextChange = filterText => {\n    this.setState({\n      filterText: filterText,\n    });\n  };\n\n  /**\n   * on clicking the assign doctor, this submit the form\n   * where we assigned a doctor to a patient\n   */\n  assignDoctor = name => {\n    let myColor = { background: '#55ba98', text: '#FFFFFF' };\n\n    var data = {\n      assigned_to: name,\n      id: this.props.patientId,\n    };\n\n    let route = 'patientrecords/assign';\n    let callback = () => {\n      /**\n     * this part implement the notification that pops up\n     * after we have assigned a patient to a doctor.\n     * The notification color was set with the variable myColor above.\n     */\n      notify.show(\n        `Patient with id: ${\n          this.props.patientId\n        } has been assigned to Dr. ${name}!`,\n        'custom',\n        3000,\n        myColor\n      );\n    }\n\n    let error_cb = error => {\n      return notify.show(\n        `Bad response from server`,\n        'custom',\n        3000,\n        'red'\n      );\n    }\n    _postData({ route, data, callback, error_cb });\n\n    this.props.closeDoctorsModal()\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal\n          isOpen={this.props.doctorsModalIsOpen}\n          toggle={this.props.closeDoctorsModal}\n          size=\"lg\">\n          <ModalHeader toggle={this.props.closeDoctorsModal}>\n            Assign a doctor to {this.props.patientId}\n          </ModalHeader>\n          <ModalBody>\n            <Notifications options={{ zIndex: 200, top: '50px' }} />\n            <SearchBar\n              filterText={this.state.filterText}\n              onFilterTextChange={this.handleFilterTextChange}\n              placeholder=\"Search for a doctor...\"\n              width=\"60rem\"\n              size={45}\n            />\n            <br />\n            {/* This renders the table displaying the list doctor */}\n            <DoctorsTable\n              doctorsList={this.state.doctorsList}\n              filterText={this.state.filterText}\n              assignDoctor={this.assignDoctor}\n            />\n            <button\n              onClick={this.props.closeDoctorsModal}\n              className=\"btn btn-secondary\">\n              Next Patient\n            </button>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default DoctorsListModal;\n"]},"metadata":{},"sourceType":"module"}