{"ast":null,"code":"import _defineProperty from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/src/components/Records Module/Patientlist.js\";\nimport React, { Component } from 'react';\nimport { Collapse } from 'reactstrap';\nimport ModalPage from './ModalPage';\nimport DoctorsListModal from './DoctorsListModal';\nimport { RecordGuide } from '../Guides';\nimport image from './../../images/Record 1.png';\nimport PatientAssignedToday from './PatientAssignedToday';\nimport RenderPatientList from './RenderPatientList';\nimport { _fetchData, _deleteData, _updateData } from '../helpers';\nimport EditModal from './EditModal';\n\nvar Patientlist =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Patientlist, _Component);\n\n  function Patientlist(props) {\n    var _this;\n\n    _classCallCheck(this, Patientlist);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Patientlist).call(this, props));\n    /**\n     * setting the initial state of the component\n     */\n\n    _this.openEditModal = function (patient) {\n      console.log(patient);\n\n      _this.setState({\n        editModalIsOpen: true,\n        details: patient,\n        filterText: ''\n      });\n    };\n\n    _this.closeModal = function () {\n      _this.setState({\n        editModalIsOpen: false\n      });\n    };\n\n    _this.openDoctorsModal = function (id) {\n      _this.setState({\n        patientId: id,\n        doctorsModalIsOpen: true\n      });\n    };\n\n    _this.closeDoctorsModal = function () {\n      _this.setState({\n        doctorsModalIsOpen: false\n      });\n\n      window.location.reload();\n    };\n\n    _this.deletepatientrecords = function (patientrecords) {\n      var data = {\n        id: patientrecords.id\n      };\n      var route = 'patientrecords/delete';\n\n      var cb = function cb() {\n        return _this.setState({\n          msg: 'User has been deleted.'\n        });\n      };\n\n      _deleteData({\n        route: route,\n        data: data,\n        cb: cb\n      });\n    };\n\n    _this.fetchAll = function () {\n      var route = 'patientrecords/patientlist';\n\n      var success_callback = function success_callback(data) {\n        return _this.setState({\n          allpatientrecords: data.results\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this.setState({\n          allPatientError: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    };\n\n    _this.setGender = function (e) {\n      _this.setState({\n        gender: e.target.value\n      });\n    };\n\n    _this.logChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.ref, e.target.value));\n    };\n\n    _this.receiveState = function (data) {\n      _this.setState(function (prevState) {\n        return {\n          patientrecords: prevState.patientrecords.concat(data)\n        };\n      });\n    };\n\n    _this.handleFilterTextChange = function (filterText) {\n      _this.setState({\n        filterText: filterText\n      });\n    };\n\n    _this.getUnassignedPatients = function (doctor) {\n      var patientrecords = _this.state.allpatientrecords;\n      var unassignedPatients = patientrecords.filter(function (f) {\n        return f.assigned_to === \"\".concat(doctor);\n      });\n\n      _this.setState({\n        unassignedPatients: unassignedPatients\n      }); // console.log(this.state.unassignedPatients)\n\n    };\n\n    _this.getNewListByDoctor = function (doctor) {\n      _this.getUnassignedPatients(doctor);\n\n      _this.setState({\n        collapse: false\n      });\n    };\n\n    _this.state = {\n      patientrecords: [],\n      patientId: '',\n      searchText: '',\n      searchResult: [],\n      editModalIsOpen: false,\n      doctorsModalIsOpen: false,\n      collapse: true,\n      firstname: '',\n      surname: '',\n      gender: '',\n      id: '',\n      age: '',\n      maritalstatus: '',\n      dob: '',\n      tribe: '',\n      religion: '',\n      phoneNo: '',\n      email: '',\n      nationality: '',\n      state: '',\n      lga: '',\n      occupation: '',\n      address: '',\n      kinName: '',\n      kinRelationship: '',\n      kinPhone: '',\n      kinEmail: '',\n      kinOccupation: '',\n      kinAddress: '',\n      newListByDoctor: [],\n      unassignedPatients: [],\n      allpatientrecords: [],\n      details: {},\n      unassignedError: '',\n      allPatientError: ''\n    };\n    return _this;\n  }\n  /**\n   * method for opening the \"edit modal\"\n   * the method passes the information about the patient\n   * along from the parent component\n   */\n\n\n  _createClass(Patientlist, [{\n    key: \"fetchData\",\n    // fetching the data to display on componentDidMount using the\n    // helper function _fetchData()\n    value: function fetchData() {\n      var _this2 = this;\n\n      var route = 'patientrecords/unassignedPatientlist';\n\n      var success_callback = function success_callback(data) {\n        //  console.log(data)\n        _this2.setState({\n          patientrecords: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this2.setState({\n          unassignedError: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    //when component has been mounted\n    value: function componentDidMount() {\n      //fetch the list of unassigned patients\n      this.fetchData(); //fetch all the patients list\n\n      this.fetchAll();\n    } //method for setting gender in the edit modal\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"row\",\n        style: {\n          backgroundColor: '#ffffff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-xs-12 col-sm-12 col-md-4 col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(RecordGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(PatientAssignedToday, {\n        getNewListByDoctor: this.getNewListByDoctor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          border: '1px solid #007bff'\n        },\n        className: \"col-xs-12 col-sm-12 col-md-8 col-lg-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(ModalPage, {\n        receiveState: this.receiveState.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(Collapse, {\n        isOpen: this.state.collapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"render-patient-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(RenderPatientList, {\n        patientlist: this.state.patientrecords,\n        error: this.state.unassignedError,\n        openDoctorsModal: this.openDoctorsModal,\n        openModal: this.openEditModal,\n        filterText: this.state.filterText,\n        renderEditButton: true\n        /*\n            this part is used to enable in-records delete operations\n            to activate this action, uncomment the code below\n        */\n        // deletepatientrecords={this.deletepatientrecords}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }))), React.createElement(Collapse, {\n        isOpen: !this.state.collapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(RenderPatientList, {\n        patientlist: this.state.unassignedPatients,\n        openDoctorsModal: this.openDoctorsModal,\n        openModal: this.openEditModal,\n        renderEditButton: false,\n        error: this.state.allPatientError\n        /*\n            this part is used to enable in-records delete operations\n            to activate this action, uncomment the code below\n        */\n        // deletepatientrecords={this.deletepatientrecords}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })), React.createElement(DoctorsListModal, {\n        patientId: this.state.patientId,\n        doctorsModalIsOpen: this.state.doctorsModalIsOpen,\n        closeDoctorsModal: this.closeDoctorsModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-xs-12 col-sm-12 col-md-3 col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: image,\n        alt: \"module-pic\",\n        className: \"module-pic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      })), React.createElement(EditModal, {\n        editModalIsOpen: this.state.editModalIsOpen,\n        closeEditModal: this.closeModal,\n        details: this.state.details,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Patientlist;\n}(Component);\n\nexport { Patientlist as default };","map":{"version":3,"sources":["/root/Desktop/bits-his/src/components/Records Module/Patientlist.js"],"names":["React","Component","Collapse","ModalPage","DoctorsListModal","RecordGuide","image","PatientAssignedToday","RenderPatientList","_fetchData","_deleteData","_updateData","EditModal","Patientlist","props","openEditModal","patient","console","log","setState","editModalIsOpen","details","filterText","closeModal","openDoctorsModal","id","patientId","doctorsModalIsOpen","closeDoctorsModal","window","location","reload","deletepatientrecords","patientrecords","data","route","cb","msg","fetchAll","success_callback","allpatientrecords","results","error_callback","error","allPatientError","setGender","e","gender","target","value","logChange","ref","receiveState","prevState","concat","handleFilterTextChange","getUnassignedPatients","doctor","state","unassignedPatients","filter","f","assigned_to","getNewListByDoctor","collapse","searchText","searchResult","firstname","surname","age","maritalstatus","dob","tribe","religion","phoneNo","email","nationality","lga","occupation","address","kinName","kinRelationship","kinPhone","kinEmail","kinOccupation","kinAddress","newListByDoctor","unassignedError","fetchData","backgroundColor","border","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {  Collapse } from 'reactstrap';\nimport ModalPage from './ModalPage';\nimport DoctorsListModal from './DoctorsListModal';\nimport { RecordGuide } from '../Guides';\nimport image from './../../images/Record 1.png';\nimport PatientAssignedToday from './PatientAssignedToday';\nimport RenderPatientList from './RenderPatientList';\nimport { _fetchData, _deleteData, _updateData } from '../helpers';\nimport EditModal from './EditModal';\n\nexport default class Patientlist extends Component {\n  constructor(props) {\n    super(props);\n    /**\n     * setting the initial state of the component\n     */\n    this.state = {\n      patientrecords: [],\n      patientId: '',\n      searchText: '',\n      searchResult: [],\n      editModalIsOpen: false,\n      doctorsModalIsOpen: false,\n      collapse: true,\n      firstname: '',\n      surname: '',\n      gender: '',\n      id: '',\n      age: '',\n      maritalstatus: '',\n      dob: '',\n      tribe: '',\n      religion: '',\n      phoneNo: '',\n      email: '',\n      nationality: '',\n      state: '',\n      lga: '',\n      occupation: '',\n      address: '',\n      kinName: '',\n      kinRelationship: '',\n      kinPhone: '',\n      kinEmail: '',\n      kinOccupation: '',\n      kinAddress: '',\n      newListByDoctor: [],\n      unassignedPatients: [],\n      allpatientrecords: [],\n      details: {},\n      unassignedError: '',\n      allPatientError: '',\n    };\n  }\n\n  /**\n   * method for opening the \"edit modal\"\n   * the method passes the information about the patient\n   * along from the parent component\n   */\n  openEditModal = patient => {\n    console.log(patient);\n    this.setState({\n      editModalIsOpen: true,\n      details: patient,\n      filterText: '',\n    });\n  };\n  //   To Close The Edit Modal\n  closeModal = () => {\n    this.setState({\n      editModalIsOpen: false,\n    });\n  };\n  //   to open the assignTo modal\n  openDoctorsModal = id => {\n    this.setState({\n      patientId: id,\n      doctorsModalIsOpen: true,\n    });\n  };\n\n  // closing the assignTo modal\n  closeDoctorsModal = () => {\n    this.setState({\n      doctorsModalIsOpen: false,\n    });\n    window.location.reload();\n  };\n\n  // onClick method for delete button\n  deletepatientrecords = patientrecords => {\n    let data = {\n      id: patientrecords.id,\n    };\n    let route = 'patientrecords/delete';\n    let cb = () => this.setState({ msg: 'User has been deleted.' });\n\n    _deleteData({ route, data, cb });\n  };\n\n  // fetching the data to display on componentDidMount using the\n  // helper function _fetchData()\n  fetchData() {\n    let route = 'patientrecords/unassignedPatientlist';\n    \n    let success_callback = data => {\n      //  console.log(data)\n       this.setState({ patientrecords: data })\n      }\n     let error_callback = error => this.setState({ unassignedError: error });\n     _fetchData({ route, success_callback, error_callback });\n  }\n\n  fetchAll = () => {\n    let route = 'patientrecords/patientlist';\n    \n    let success_callback = data => this.setState({ allpatientrecords: data.results });\n    let error_callback = error => this.setState({ allPatientError: error });\n    _fetchData({ route, success_callback, error_callback });\n  };\n\n  //when component has been mounted\n  componentDidMount() {\n    //fetch the list of unassigned patients\n    this.fetchData();\n    //fetch all the patients list\n    this.fetchAll();\n  }\n\n  //method for setting gender in the edit modal\n  setGender = e => {\n    this.setState({ gender: e.target.value });\n  };\n\n  //onChange method for updating the state as soon as the value\n  logChange = e => {\n    this.setState({ [e.target.ref]: e.target.value });\n  };\n\n  /**\n   * to render the newly added patient in the patientList after\n   * the modal has been closed\n   */\n  receiveState = data => {\n    this.setState(prevState => ({\n      patientrecords: prevState.patientrecords.concat(data),\n    }));\n  };\n\n  //this method sets the value of the filter text\n  handleFilterTextChange = filterText => {\n    this.setState({\n      filterText: filterText,\n    });\n  };\n\n  getUnassignedPatients = doctor => {\n    const patientrecords = this.state.allpatientrecords;\n    const unassignedPatients = patientrecords.filter(\n      f => f.assigned_to === `${doctor}`\n    );\n    this.setState({ unassignedPatients: unassignedPatients });\n    // console.log(this.state.unassignedPatients)\n  };\n\n  getNewListByDoctor = doctor => {\n    this.getUnassignedPatients(doctor);\n    this.setState({ collapse: false });\n  };\n\n  render() {\n    return (\n      <div className=\"row\" style={{ backgroundColor: '#ffffff' }}>\n        {/* first empty column */}\n        <div className=\"col-xs-12 col-sm-12 col-md-4 col-lg-3\">\n          {/* component to render user's guide */}\n          <RecordGuide />\n          {/* component to render the table show patients assigned to doctors\n                    on a current day */}\n          <PatientAssignedToday getNewListByDoctor={this.getNewListByDoctor} />\n        </div>\n        <div\n          style={{ border: '1px solid #007bff' }}\n          className=\"col-xs-12 col-sm-12 col-md-8 col-lg-6\">\n          <div className=\"\">\n            {/* modal component to add a new patient  */}\n            <ModalPage receiveState={this.receiveState.bind(this)} />\n          </div>\n\n          <br />\n\n          <Collapse isOpen={this.state.collapse}>\n            <div className=\"render-patient-list\">\n              {/* this component renders the table of patients displaying some details */}\n              <RenderPatientList\n                patientlist={this.state.patientrecords}\n                error={this.state.unassignedError}\n                openDoctorsModal={this.openDoctorsModal}\n                openModal={this.openEditModal}\n                filterText={this.state.filterText}\n                renderEditButton={true}\n                /*\n                    this part is used to enable in-records delete operations\n                    to activate this action, uncomment the code below\n                */\n                // deletepatientrecords={this.deletepatientrecords}\n              />\n            </div>\n          </Collapse>\n\n          <Collapse isOpen={!this.state.collapse}>\n            {/* this component renders the table consisting patietns assigned\n                        to a particular patient */}\n            <RenderPatientList\n              patientlist={this.state.unassignedPatients}\n              openDoctorsModal={this.openDoctorsModal}\n              openModal={this.openEditModal}\n              renderEditButton={false}\n              error={this.state.allPatientError}\n              /*\n                  this part is used to enable in-records delete operations\n                  to activate this action, uncomment the code below\n              */\n              // deletepatientrecords={this.deletepatientrecords}\n            />\n          </Collapse>\n\n          {/* this component opens when the \"Assign Doctor\" button clicked\n                    it allows user to assign doctor to a patient */}\n          <DoctorsListModal\n            patientId={this.state.patientId}\n            doctorsModalIsOpen={this.state.doctorsModalIsOpen}\n            closeDoctorsModal={this.closeDoctorsModal}\n          />\n\n          <br />\n        </div>\n\n        {/* empty column by right  */}\n        <div className=\"col-xs-12 col-sm-12 col-md-3 col-lg-3\">\n          {/* image displayed by the side of the Records Module */}\n          <img src={image} alt=\"module-pic\" className=\"module-pic\" />\n        </div>\n\n        {/* <MyForm /> */}\n        {/* this modal renders the edit modal when you click on \"edit\" button on a user\n                this modal allows you to edit information about a particular patient */}\n        <EditModal\n          editModalIsOpen={this.state.editModalIsOpen}\n          closeEditModal={this.closeModal}\n          details={this.state.details}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}