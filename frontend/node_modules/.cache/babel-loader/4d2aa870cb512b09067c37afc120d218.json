{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTextColor = exports.getFontFamily = exports.getParagraphStyle = exports.getTextStyle = exports.getHeadingStyle = exports.getIconForIntent = exports.getIconColor = exports.getElevation = exports.getBackground = exports.getIconSizeForIconButton = exports.getIconSizeForSelect = exports.getIconSizeForInput = exports.getIconSizeForButton = exports.getTextSizeForControlHeight = exports.getBorderRadiusForControlHeight = void 0;\n\nvar _constants = require(\"../../../../constants\");\n\nvar _themedProperty = _interopRequireDefault(require(\"../utils/themedProperty\"));\n\nvar _foundationalStyles = require(\"../foundational-styles\");\n\nvar _typography = require(\"../typography\");\n/**\n * Controls include:\n * - Button\n * - IconButton\n * - TextInput\n * @param {number} height\n * @return {number} border radius\n */\n\n\nvar getBorderRadiusForControlHeight = function getBorderRadiusForControlHeight(height) {\n  if (height <= 40) return 3;\n  return 4;\n};\n/**\n * Get the text size for a control with a certain height.\n * @param {number} height\n * @return {number} text size of the control height.\n */\n\n\nexports.getBorderRadiusForControlHeight = getBorderRadiusForControlHeight;\n\nvar getTextSizeForControlHeight = function getTextSizeForControlHeight(height) {\n  if (height <= 24) return 300;\n  if (height <= 28) return 300;\n  if (height <= 32) return 300;\n  if (height <= 36) return 400;\n  if (height <= 40) return 400;\n  return 500;\n};\n/**\n * Get the size for a icon in a Button with a certain height.\n * @param {number} height\n * @return {number} icon size\n */\n\n\nexports.getTextSizeForControlHeight = getTextSizeForControlHeight;\n\nvar getIconSizeForButton = function getIconSizeForButton(height) {\n  if (height <= 28) return 12;\n  if (height <= 32) return 12;\n  if (height <= 40) return 16;\n  if (height <= 48) return 18;\n  return 20;\n}; // Use the same for input components.\n\n\nexports.getIconSizeForButton = getIconSizeForButton;\nvar getIconSizeForInput = getIconSizeForButton;\nexports.getIconSizeForInput = getIconSizeForInput;\nvar getIconSizeForSelect = getIconSizeForButton;\n/**\n * Get the size for a icon in a IconButton with a certain height.\n * @param {number} height\n * @return {number} icon size\n */\n\nexports.getIconSizeForSelect = getIconSizeForSelect;\n\nvar getIconSizeForIconButton = function getIconSizeForIconButton(height) {\n  if (height <= 28) return 12;\n  if (height <= 32) return 14; // Slightly bigger than getIconSizeForButton\n\n  if (height <= 40) return 16;\n  if (height <= 48) return 18;\n  return 20;\n};\n/**\n * Get background property.\n * @param {string} background\n * @return {string} background property.\n */\n\n\nexports.getIconSizeForIconButton = getIconSizeForIconButton;\n\nvar getBackground = function getBackground(background) {\n  /**\n   * Return one of theme presets or the original value.\n   */\n  return (0, _themedProperty.default)(_foundationalStyles.colors.background, background);\n};\n/**\n * Get box-shadow (elevation).\n * @param {string} level — level of elevation.\n * @return {string} elevation box-shadow.\n */\n\n\nexports.getBackground = getBackground;\n\nvar getElevation = function getElevation(level) {\n  /**\n   * There is no fallback, undefined will be returned.\n   */\n  return _foundationalStyles.elevations[level];\n};\n/**\n * Get the color for an icon.\n * @param {string} color\n * @return {string} color of the icon\n */\n\n\nexports.getElevation = getElevation;\n\nvar getIconColor = function getIconColor(color) {\n  /**\n   * Check if there is a preset in the theme for the icon color.\n   */\n  return (0, _themedProperty.default)(_foundationalStyles.colors.icon, color);\n};\n/**\n * Get the properties for an icon based on the intent.\n * @param {Intent} intent\n * @return {Object} properties\n */\n\n\nexports.getIconColor = getIconColor;\n\nvar getIconForIntent = function getIconForIntent(intent) {\n  switch (intent) {\n    case _constants.Intent.SUCCESS:\n      return {\n        icon: 'tick-circle',\n        color: 'success'\n      };\n\n    case _constants.Intent.DANGER:\n      return {\n        icon: 'error',\n        color: 'danger'\n      };\n\n    case _constants.Intent.WARNING:\n      return {\n        icon: 'warning-sign',\n        color: 'warning'\n      };\n\n    case _constants.Intent.NONE:\n    default:\n      return {\n        icon: 'info-sign',\n        color: 'info'\n      };\n  }\n};\n/**\n * Heading styles.\n * @param {number} size - 100–900. 500 is default.\n * @return {Object} heading style.\n */\n\n\nexports.getIconForIntent = getIconForIntent;\n\nvar getHeadingStyle = function getHeadingStyle(size) {\n  return (0, _themedProperty.default)(_typography.headings, String(size));\n};\n/**\n * Text styles for single line text.\n * This is used in the Text component. The Text component is used by:\n * - Small\n * - Strong\n * - Code\n * - ListItem\n * - Label\n * @param {number} size - 300–500. 400 is default.\n * @return {Object} text style.\n */\n\n\nexports.getHeadingStyle = getHeadingStyle;\n\nvar getTextStyle = function getTextStyle(size) {\n  return (0, _themedProperty.default)(_typography.text, String(size));\n};\n/**\n * Text styles for paragraphs (multi line text).\n * This is used in the Paragraph.\n * @param {number} size - 300–500. 400 is default.\n * @return {Object} text style.\n */\n\n\nexports.getTextStyle = getTextStyle;\n\nvar getParagraphStyle = function getParagraphStyle(size) {\n  return (0, _themedProperty.default)(_typography.paragraph, String(size));\n};\n/**\n * Get the font family. This is used to override the font family.\n * @param {string} fontFamily\n * @return {string} font family\n */\n\n\nexports.getParagraphStyle = getParagraphStyle;\n\nvar getFontFamily = function getFontFamily(fontFamily) {\n  /**\n   * Allow for passing in a custom fontFamily not in the theme.\n   */\n  return (0, _themedProperty.default)(_typography.fontFamilies, fontFamily);\n};\n/**\n * Get the text color. This is used to override the color.\n * @param {string} fontFamily\n * @return {string} font family\n */\n\n\nexports.getFontFamily = getFontFamily;\n\nvar getTextColor = function getTextColor(color) {\n  /**\n   * Allow for passing in a custom text color not in the theme.\n   */\n  return (0, _themedProperty.default)(_foundationalStyles.colors.text, color);\n};\n\nexports.getTextColor = getTextColor;","map":null,"metadata":{},"sourceType":"script"}