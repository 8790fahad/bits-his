{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _uiBox = require(\"ui-box\");\n\nvar _typography = require(\"../../typography\");\n\nvar _icon = require(\"../../icon\");\n\nvar _spinner = require(\"../../spinner\");\n\nvar _theme = require(\"../../theme\");\n\nvar Button =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  (0, _inherits2.default)(Button, _PureComponent);\n\n  function Button() {\n    (0, _classCallCheck2.default)(this, Button);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Button).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          intent = _this$props.intent,\n          height = _this$props.height,\n          isActive = _this$props.isActive,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          appearance = _this$props.appearance,\n          isLoading = _this$props.isLoading,\n          paddingRight = _this$props.paddingRight,\n          paddingLeft = _this$props.paddingLeft,\n          paddingTop = _this$props.paddingTop,\n          paddingBottom = _this$props.paddingBottom,\n          iconBeforeKey = _this$props.iconBefore,\n          iconAfterKey = _this$props.iconAfter,\n          props = (0, _objectWithoutProperties2.default)(_this$props, [\"theme\", \"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"iconBefore\", \"iconAfter\"]);\n      var themedClassName = theme.getButtonClassName(appearance, intent);\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      var iconSize = theme.getIconSizeForButton(height);\n      var pr = paddingRight !== undefined ? paddingRight : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var iconBefore;\n\n      if (iconBeforeKey) {\n        iconBefore = _react.default.createElement(_icon.Icon, {\n          icon: iconBeforeKey,\n          size: iconSize,\n          marginLeft: -Math.round(pl * 0.2),\n          marginRight: Math.round(iconSize * 0.7)\n        });\n      }\n\n      var iconAfter;\n\n      if (iconAfterKey) {\n        iconAfter = _react.default.createElement(_icon.Icon, {\n          icon: iconAfterKey,\n          size: iconSize,\n          marginRight: -Math.round(pl * 0.2),\n          marginLeft: Math.round(iconSize * 0.7)\n        });\n      }\n\n      return _react.default.createElement(_typography.Text, (0, _extends2.default)({\n        is: \"button\",\n        className: (0, _classnames.default)(themedClassName, className),\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        paddingRight: pr,\n        paddingLeft: pl,\n        marginLeft: 0 // Removes weird margins in Safari\n        ,\n        marginRight: 0 // Removes weird margins in Safari\n        ,\n        marginTop: 0 // Removes weird margins in Safari\n        ,\n        marginBottom: 0 // Removes weird margins in Safari\n        ,\n        size: textSize,\n        color: null // Prevent the Text color overriding the glamor appearanceStyle color\n        ,\n        height: height,\n        lineHeight: \"\".concat(height, \"px\")\n      }, isActive ? {\n        'data-active': true\n      } : {}, Button.styles, props, {\n        disabled: disabled || isLoading\n      }), isLoading && _react.default.createElement(_spinner.Spinner, {\n        marginLeft: -Math.round(height / 8),\n        marginRight: Math.round(height / 4),\n        size: Math.round(height / 2)\n      }), iconBefore || null, children, iconAfter || null);\n    }\n  }]);\n  return Button;\n}(_react.PureComponent);\n\nButton.displayName = \"Button\";\n(0, _defineProperty2.default)(Button, \"propTypes\", (0, _objectSpread2.default)({}, _uiBox.dimensions.propTypes, _uiBox.spacing.propTypes, _uiBox.position.propTypes, _uiBox.layout.propTypes, {\n  /**\n   * The intent of the button.\n   */\n  intent: _propTypes.default.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: _propTypes.default.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: _propTypes.default.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: _propTypes.default.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen.\n   */\n  iconBefore: _propTypes.default.string,\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen.\n   */\n  iconAfter: _propTypes.default.string,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: _propTypes.default.string\n}));\n(0, _defineProperty2.default)(Button, \"defaultProps\", {\n  appearance: 'default',\n  height: 32,\n  intent: 'none',\n  isActive: false,\n  paddingBottom: 0,\n  paddingTop: 0\n});\n(0, _defineProperty2.default)(Button, \"styles\", {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n});\n\nvar _default = (0, _theme.withTheme)(Button);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}