{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _uiBox = require(\"ui-box\");\n\nvar _icon = require(\"../../icon\");\n\nvar _theme = require(\"../../theme\");\n\nvar _Button = _interopRequireDefault(require(\"./Button\"));\n\nvar IconButton =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  (0, _inherits2.default)(IconButton, _PureComponent);\n\n  function IconButton() {\n    (0, _classCallCheck2.default)(this, IconButton);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IconButton).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(IconButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          iconAim = _this$props.iconAim,\n          icon = _this$props.icon,\n          iconSize = _this$props.iconSize,\n          height = _this$props.height,\n          intent = _this$props.intent,\n          props = (0, _objectWithoutProperties2.default)(_this$props, [\"theme\", \"iconAim\", \"icon\", \"iconSize\", \"height\", \"intent\"]);\n      var size = iconSize || theme.getIconSizeForIconButton(height);\n      return _react.default.createElement(_Button.default, (0, _extends2.default)({\n        intent: intent,\n        height: height,\n        width: height,\n        paddingLeft: 0,\n        paddingRight: 0,\n        display: \"flex\",\n        justifyContent: \"center\"\n      }, props), _react.default.createElement(_icon.Icon, {\n        icon: icon,\n        size: size,\n        color: intent === 'none' ? 'default' : 'currentColor'\n      }));\n    }\n  }]);\n  return IconButton;\n}(_react.PureComponent);\n\nIconButton.displayName = \"IconButton\";\n(0, _defineProperty2.default)(IconButton, \"propTypes\", (0, _objectSpread2.default)({}, _uiBox.dimensions.propTypes, _uiBox.spacing.propTypes, _uiBox.position.propTypes, _uiBox.layout.propTypes, {\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: _propTypes.default.string,\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: _propTypes.default.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: _propTypes.default.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: _propTypes.default.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: _propTypes.default.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: _propTypes.default.string\n}));\n(0, _defineProperty2.default)(IconButton, \"defaultProps\", {\n  intent: 'none',\n  appearance: 'default',\n  height: 32\n});\n\nvar _default = (0, _theme.withTheme)(IconButton);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}