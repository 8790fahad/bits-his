{"ast":null,"code":"import _classCallCheck from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Desktop/bits-his/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/root/Desktop/bits-his/frontend/src/components/Doctor Module/PatientClarking.js\";\nimport React from 'react';\nimport { Col, Collapse } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport PreviousVisits from './PreviousVisits';\nimport { DoctorGuide } from '../Guides';\nimport Image from './Image';\nimport AssignedList from './AssignedList';\nimport LastDiagnosis from './LastDiagnosis';\nimport Diagnosis from './Diagnosis'; // import './doctor.css';\n\nimport { _fetchData, _postData, _convertArrOfObjToArr } from '../helpers';\nimport { FaPaperPlane, FaPrint } from 'react-icons/fa';\nimport Preview from './Preview';\nimport { error } from 'util';\n/**\n * This is the first Doctors Module container\n * it contains all the components that is rendered in the\n * doctors module\n */\n\nvar PatienClarking =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatienClarking, _React$Component);\n\n  function PatienClarking(props) {\n    var _this;\n\n    _classCallCheck(this, PatienClarking);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatienClarking).call(this, props));\n\n    _this.toggle = function (currentRecord) {\n      // we fetch the diagnosis passing the patient id\n      _this.fetchDiagnosis(currentRecord.id);\n\n      _this.back();\n\n      _this.setState({\n        currentRecord: currentRecord,\n        id: currentRecord.id\n      });\n    };\n\n    _this.clearLocalStorage = function () {\n      localStorage.removeItem('presenting_complaints');\n      localStorage.removeItem('history');\n      localStorage.removeItem('system_examination');\n      localStorage.removeItem('vital_signs');\n      localStorage.removeItem('problems');\n      localStorage.removeItem('lab_investigation');\n      localStorage.removeItem('provisional_diagnosis');\n      localStorage.removeItem('athropometry');\n      localStorage.removeItem('management_plan');\n      localStorage.removeItem('prescription_request');\n      localStorage.removeItem('dressing_request');\n      localStorage.removeItem('observation_request');\n      localStorage.removeItem('previous_medical_history');\n    };\n\n    _this.handleCancel = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        collapse: true\n      });\n    };\n\n    _this.getPrescription = function (p) {\n      var arr = _convertArrOfObjToArr(p);\n\n      _this.setState({\n        prescription: arr\n      });\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n      var user = localStorage.getItem('username');\n      if (!_this.state.currentRecord.id) return window.alert('Hell no!');\n      /**\n       * We get all the data entered in each form in the diagnosis\n       * section.\n       */\n\n      var presenting_complaints = JSON.parse(localStorage.getItem('presenting_complaints'));\n      var history = JSON.parse(localStorage.getItem('history'));\n      var system_examination = JSON.parse(localStorage.getItem('system_examination'));\n      var vital_signs = JSON.parse(localStorage.getItem('vital_signs'));\n      var problems = JSON.parse(localStorage.getItem('problems'));\n      var lab_investigation = JSON.parse(localStorage.getItem('lab_investigation'));\n      var provisional_diagnosis = JSON.parse(localStorage.getItem('provisional_diagnosis'));\n      var athropometry = JSON.parse(localStorage.getItem('athropometry'));\n      var management_plan = localStorage.getItem('management_plan');\n      var prescription_request = JSON.parse(localStorage.getItem('prescription_request'));\n      var dressing_request = JSON.parse(localStorage.getItem('dressing_request'));\n      var observation_request = localStorage.getItem('observation_request');\n      var previous_medical_history = JSON.parse(localStorage.getItem('previous_medical_history')); // console.log( presenting_complaints, history, system_examination,\n      //     vital_signs, problems, lab_investigation, provisional_diagnosis, athropometry, \n      //     management_plan, prescription_request, dressing_request, observation_request, \n      //     previous_medical_history)\n\n      /**\n       * We send this to the prescription request table\n       * for the pharmarcy departement\n       */\n      // let req = this.state.prescription;\n\n      if (prescription_request) {\n        _this.saveDrugs(prescription_request, user);\n      } //...and this goes to the radiological table for the laboratory dept.\n\n\n      if (lab_investigation) {\n        _this.saveLabInvestigation(lab_investigation, user);\n      }\n\n      var data = Object.assign({}, history, system_examination, vital_signs, problems, provisional_diagnosis, athropometry, dressing_request, previous_medical_history, {\n        management_plan: management_plan,\n        observation_request: observation_request,\n        date: new Date(),\n        id: _this.state.id,\n        seen_by: user\n      }); //...and the rest go to the patient diagnosis table\n\n      _this.postData('diagnosis/clarking', data); // console.log(data);\n\n\n      _this.clearLocalStorage();\n    };\n\n    _this.saveDrugs = function (prescription_request, user) {\n      var newList = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = prescription_request[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var o = _step.value;\n          newList.push(Object.assign({}, o, {\n            drugStatus: 'pending',\n            date: _this.state.date,\n            id: _this.state.id,\n            seen_by: user\n          }));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var data = _convertArrOfObjToArr(newList);\n\n      var route = 'prescriptionrequests/submitDrug';\n\n      _postData({\n        route: route,\n        data: data\n      });\n    };\n\n    _this.saveLabInvestigation = function (lab_investigation, user) {\n      var newInvestigationList = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = lab_investigation[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var o = _step2.value;\n          newInvestigationList.push(Object.assign({}, o, {\n            date: _this.state.date,\n            id: _this.state.id,\n            seen_by: user,\n            test_status: 'pending'\n          }));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var data = _convertArrOfObjToArr(newInvestigationList);\n\n      var route = 'lab/submitLab';\n\n      _postData({\n        route: route,\n        data: data\n      });\n    };\n\n    _this.getFullDiagnosisByTransactionId = function (transactionId) {\n      // const fullDiagnosis = JSON.parse(localStorage.getItem('fullDiagnosis'));\n      var fullDiagnosis = _this.state.fullDiagnosis;\n      var fullDiagnosisByTransactionId = fullDiagnosis.filter(function (diag) {\n        return diag.transactionId === transactionId;\n      })[0];\n\n      _this.setState({\n        records: fullDiagnosisByTransactionId\n      });\n    };\n\n    _this.back = function () {\n      return _this.setState(function (prevState) {\n        return {\n          collapse: !prevState.collapse\n        };\n      });\n    };\n\n    _this.toggleCollapse2 = function () {\n      return _this.setState({\n        collapse2: true\n      });\n    };\n\n    _this.onPreviewClick = function () {\n      _this.getSavedData();\n\n      _this.setState(function (prevState) {\n        return {\n          previewModal: !prevState.previewModal\n        };\n      });\n    };\n\n    _this.getSavedData = function () {\n      var presenting_complaints = JSON.parse(localStorage.getItem('presenting_complaints'));\n      var history = JSON.parse(localStorage.getItem('history'));\n      var system_examination = JSON.parse(localStorage.getItem('system_examination'));\n      var vital_signs = JSON.parse(localStorage.getItem('vital_signs'));\n      var problems = JSON.parse(localStorage.getItem('problems'));\n      var lab_investigation = JSON.parse(localStorage.getItem('lab_investigation'));\n      var provisional_diagnosis = JSON.parse(localStorage.getItem('provisional_diagnosis'));\n      var athropometry = JSON.parse(localStorage.getItem('athropometry'));\n      var management_plan = localStorage.getItem('management_plan');\n      var prescription_request = JSON.parse(localStorage.getItem('prescription_request'));\n      var dressing_request = JSON.parse(localStorage.getItem('dressing_request'));\n      var observation_request = localStorage.getItem('observation_request');\n      var previous_medical_history = JSON.parse(localStorage.getItem('previous_medical_history'));\n\n      _this.setState({\n        presenting_complaints: presenting_complaints,\n        history: history,\n        system_examination: system_examination,\n        vital_signs: vital_signs,\n        problems: problems,\n        lab_investigation: lab_investigation,\n        provisional_diagnosis: provisional_diagnosis,\n        athropometry: athropometry,\n        management_plan: management_plan,\n        prescription_request: prescription_request,\n        dressing_request: dressing_request,\n        observation_request: observation_request,\n        previous_medical_history: previous_medical_history\n      });\n    };\n\n    var _user = localStorage.getItem('username');\n\n    var date = new Date(); //setting the initial state\n\n    _this.state = {\n      collapse: true,\n      collapse2: false,\n      patientrecords: [],\n      fullDiagnosis: [],\n      status: 'admission',\n      id: '',\n      records: [],\n      seen_by: _user,\n      prescription: [],\n      previewModal: false,\n      presenting_complaints: [],\n      history: [],\n      system_examination: [],\n      vital_signs: [],\n      problems: [],\n      lab_investigation: [],\n      provisional_diagnosis: [],\n      athropometry: [],\n      management_plan: \"\",\n      prescription_request: [],\n      dressing_request: [],\n      observation_request: \"\",\n      currentRecord: {},\n      error: '',\n      date: date\n    };\n    return _this;\n  }\n  /**\n   * This method fetches all the data in the diagnosis table and \n   * save it directly into localstorage for further use\n   */\n\n\n  _createClass(PatienClarking, [{\n    key: \"fetchDiagnosis\",\n    value: function fetchDiagnosis(patientId) {\n      var _this2 = this;\n\n      var route = \"diagnosis/fullDiagnosis?q=\".concat(patientId); // let cb = (data) => localStorage.setItem('fullDiagnosis', JSON.stringify(data));\n\n      var success_callback = function success_callback(data) {\n        return _this2.setState({\n          fullDiagnosis: data\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback\n      });\n    }\n    /**\n     * This controls the collapse page for the patient diagnosis\n     */\n\n  }, {\n    key: \"postData\",\n\n    /**\n     * This is a helper function which helps to post data to \n     * the database depending on the value of the paramaters \n     * passed in\n     * postData()\n     * @params route - that takes the backend route we want to use\n     * @params data - the information we want to submit\n     */\n    value: function postData(route, data) {\n      var cb = function cb() {\n        return console.log(data);\n      };\n\n      _postData({\n        route: route,\n        data: data,\n        cb: cb\n      });\n    }\n    /**\n     * This method make use of the helper function _fetchData\n     * to fetch data.\n     * fetchData()\n     */\n\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this3 = this;\n\n      // const username = localStorage.getItem('user');\n      var route = \"patientrecords/doctor?q=\".concat('aminu');\n\n      var success_callback = function success_callback(data) {\n        return _this3.setState({\n          patientrecords: data\n        });\n      };\n\n      var error_callback = function error_callback(error) {\n        return _this3.setState({\n          error: error\n        });\n      };\n\n      _fetchData({\n        route: route,\n        success_callback: success_callback,\n        error_callback: error_callback\n      });\n    }\n    /**\n     * Immediately before the component is mounted, we get the \n     * patient's data that has been save to the localStorage to\n     * render it without having to fetch from the database again.\n     */\n    // componentWillMount() {\n    //     localStorage.getItem('patientrecords') && this.setState({\n    //         patientrecords: JSON.parse(localStorage.getItem('patientrecords'))\n    //     })\n    // } \n\n    /**\n     * Immediately after the component is mounted, we fetch the list\n     * of patients currently assigned to the current doctor.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n    /**\n     * This happens when we want to update the component\n     */\n\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      localStorage.setItem('patientrecords', JSON.stringify(nextState.patientrecords));\n    }\n    /**\n     * getFullDiagnosisByTransactionId()\n     * @param transactionId\n     * This method filters the fullDiagnosis list and returns the\n     * record that contains the particular transactionId\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          collapse = _this$state.collapse,\n          patientrecords = _this$state.patientrecords,\n          fullDiagnosis = _this$state.fullDiagnosis,\n          records = _this$state.records,\n          previewModal = _this$state.previewModal,\n          presenting_complaints = _this$state.presenting_complaints,\n          vital_signs = _this$state.vital_signs,\n          problems = _this$state.problems,\n          lab_investigation = _this$state.lab_investigation,\n          provisional_diagnosis = _this$state.provisional_diagnosis,\n          athropometry = _this$state.athropometry,\n          management_plan = _this$state.management_plan,\n          prescription_request = _this$state.prescription_request,\n          dressing_request = _this$state.dressing_request,\n          observation_request = _this$state.observation_request,\n          previous_medical_history = _this$state.previous_medical_history,\n          history = _this$state.history,\n          system_examination = _this$state.system_examination,\n          error = _this$state.error,\n          collapse2 = _this$state.collapse2;\n      var toggle = this.toggle,\n          back = this.back,\n          toggleCollapse2 = this.toggleCollapse2,\n          onPreviewClick = this.onPreviewClick,\n          getFullDiagnosisByTransactionId = this.getFullDiagnosisByTransactionId,\n          handleSubmit = this.handleSubmit;\n      return React.createElement(\"div\", {\n        className: \"row patient-clarking\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-xs-12 col-sm-12 col-md-4 col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(DoctorGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(Collapse, {\n        isOpen: collapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(AssignedList, {\n        toggle: toggle,\n        error: error,\n        patientrecords: patientrecords,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(Collapse, {\n        isOpen: !collapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(PreviousVisits, {\n        toggle: back,\n        toggleCollapse2: toggleCollapse2,\n        currentRecord: this.state.currentRecord,\n        fullDiagnosis: fullDiagnosis,\n        getFullDiagnosisByTransactionId: getFullDiagnosisByTransactionId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        style: {\n          border: '1px solid #007bff'\n        },\n        className: \"col-xs-12 col-sm-12 col-md-8 col-lg-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(Diagnosis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-outline-primary offset-md-3 col-xs-6 col-sm-5 col-md-3 col-lg-3\",\n        onClick: onPreviewClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, \"Preview & Print \", React.createElement(FaPrint, {\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"btn btn-outline-danger col-xs-6 col-sm-5 col-md-3 col-lg-3\",\n        onClick: handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"Submit \", React.createElement(FaPaperPlane, {\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }))), React.createElement(Preview, {\n        patientrecord: this.state.patientrecord,\n        modal: previewModal,\n        toggle: onPreviewClick,\n        presenting_complaints: presenting_complaints,\n        history: history,\n        system_examination: system_examination,\n        vital_signs: vital_signs,\n        problems: problems,\n        lab_investigation: lab_investigation,\n        provisional_diagnosis: provisional_diagnosis,\n        athropometry: athropometry,\n        management_plan: management_plan,\n        prescription_request: prescription_request,\n        dressing_request: dressing_request,\n        observation_request: observation_request,\n        previous_medical_history: previous_medical_history,\n        submit: handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-sm-12 col-md-3 col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, React.createElement(Collapse, {\n        isOpen: !collapse2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(Image, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      })), React.createElement(Collapse, {\n        isOpen: collapse2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(LastDiagnosis, {\n        records: records,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return PatienClarking;\n}(React.Component);\n\nexport default PatienClarking;","map":{"version":3,"sources":["/root/Desktop/bits-his/frontend/src/components/Doctor Module/PatientClarking.js"],"names":["React","Col","Collapse","PreviousVisits","DoctorGuide","Image","AssignedList","LastDiagnosis","Diagnosis","_fetchData","_postData","_convertArrOfObjToArr","FaPaperPlane","FaPrint","Preview","error","PatienClarking","props","toggle","currentRecord","fetchDiagnosis","id","back","setState","clearLocalStorage","localStorage","removeItem","handleCancel","e","preventDefault","collapse","getPrescription","p","arr","prescription","handleSubmit","event","user","getItem","state","window","alert","presenting_complaints","JSON","parse","history","system_examination","vital_signs","problems","lab_investigation","provisional_diagnosis","athropometry","management_plan","prescription_request","dressing_request","observation_request","previous_medical_history","saveDrugs","saveLabInvestigation","data","Object","assign","date","Date","seen_by","postData","newList","o","push","drugStatus","route","newInvestigationList","test_status","getFullDiagnosisByTransactionId","transactionId","fullDiagnosis","fullDiagnosisByTransactionId","filter","diag","records","prevState","toggleCollapse2","collapse2","onPreviewClick","getSavedData","previewModal","patientrecords","status","patientId","success_callback","cb","console","log","error_callback","fetchData","nextProps","nextState","setItem","stringify","border","patientrecord","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Collapse } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport PreviousVisits from './PreviousVisits';\nimport { DoctorGuide } from '../Guides';\nimport Image from './Image';\nimport AssignedList from './AssignedList';\nimport LastDiagnosis from './LastDiagnosis';\nimport Diagnosis from './Diagnosis';\n// import './doctor.css';\nimport { _fetchData, _postData, _convertArrOfObjToArr } from '../helpers';\nimport {FaPaperPlane, FaPrint} from 'react-icons/fa';\nimport Preview from './Preview';\nimport { error } from 'util';\n\n\n/**\n * This is the first Doctors Module container\n * it contains all the components that is rendered in the\n * doctors module\n */\n\nclass PatienClarking extends React.Component {\n    constructor(props) {\n        super(props);\n        let user = localStorage.getItem('username');\n        let date = new Date();\n        //setting the initial state\n        this.state = { \n            collapse: true,\n            collapse2: false,\n            patientrecords: [],\n            fullDiagnosis: [],\n            status: 'admission',\n            id:'',\n            records: [],\n            seen_by: user,\n            prescription: [],\n            previewModal: false,\n            presenting_complaints: [],\n            history: [],\n            system_examination: [],\n            vital_signs: [],\n            problems: [],\n            lab_investigation: [],\n            provisional_diagnosis: [],\n            athropometry: [],\n            management_plan: \"\",\n            prescription_request: [],\n            dressing_request: [],\n            observation_request: \"\",\n            currentRecord: {},\n            error: '',\n            date: date,\n        };\n    }\n\n    /**\n     * This method fetches all the data in the diagnosis table and \n     * save it directly into localstorage for further use\n     */\n    fetchDiagnosis(patientId){\n        let route = `diagnosis/fullDiagnosis?q=${patientId}`;\n        // let cb = (data) => localStorage.setItem('fullDiagnosis', JSON.stringify(data));\n        let success_callback = data => this.setState({ fullDiagnosis: data })\n        _fetchData({ route, success_callback })\n    }\n\n\n    /**\n     * This controls the collapse page for the patient diagnosis\n     */\n    toggle=(currentRecord)=>{\n        // we fetch the diagnosis passing the patient id\n        this.fetchDiagnosis(currentRecord.id);\n        this.back();\n        this.setState({ \n            currentRecord,\n            id: currentRecord.id\n        });\n\n    }\n\n    clearLocalStorage = () => {\n        localStorage.removeItem('presenting_complaints');\n        localStorage.removeItem('history');\n        localStorage.removeItem('system_examination');\n        localStorage.removeItem('vital_signs');\n        localStorage.removeItem('problems');\n        localStorage.removeItem('lab_investigation');\n        localStorage.removeItem('provisional_diagnosis');\n        localStorage.removeItem('athropometry');\n        localStorage.removeItem('management_plan');\n        localStorage.removeItem('prescription_request');\n        localStorage.removeItem('dressing_request');\n        localStorage.removeItem('observation_request');\n        localStorage.removeItem('previous_medical_history');\n    }\n\n    //closes the collapse\n    handleCancel=(e)=>{\n        e.preventDefault();\n        this.setState({collapse: true});\n    }\n\n    getPrescription = (p) => {\n        const arr = _convertArrOfObjToArr(p);\n        this.setState({ prescription: arr });\n    }\n\n    handleSubmit=(event)=>{ \n        event.preventDefault()\n        let user = localStorage.getItem('username');\n        if(!this.state.currentRecord.id) return window.alert('Hell no!')\n        /**\n         * We get all the data entered in each form in the diagnosis\n         * section.\n         */\n        let presenting_complaints = JSON.parse(localStorage.getItem('presenting_complaints'));\n        let history = JSON.parse(localStorage.getItem('history'));\n        let system_examination = JSON.parse(localStorage.getItem('system_examination'));\n        let vital_signs = JSON.parse(localStorage.getItem('vital_signs'));\n        let problems = JSON.parse(localStorage.getItem('problems'));\n        let lab_investigation = JSON.parse(localStorage.getItem('lab_investigation'));\n        let provisional_diagnosis = JSON.parse(localStorage.getItem('provisional_diagnosis'));\n        let athropometry = JSON.parse(localStorage.getItem('athropometry'));\n        let management_plan = localStorage.getItem('management_plan');\n        let prescription_request = JSON.parse(localStorage.getItem('prescription_request'));   \n        let dressing_request = JSON.parse(localStorage.getItem('dressing_request'));\n        let observation_request = localStorage.getItem('observation_request');\n        let previous_medical_history = JSON.parse(localStorage.getItem('previous_medical_history'));\n        \n\n        // console.log( presenting_complaints, history, system_examination,\n        //     vital_signs, problems, lab_investigation, provisional_diagnosis, athropometry, \n        //     management_plan, prescription_request, dressing_request, observation_request, \n        //     previous_medical_history)\n\n        /**\n         * We send this to the prescription request table\n         * for the pharmarcy departement\n         */\n\n        // let req = this.state.prescription;\n        if(prescription_request){\n            this.saveDrugs(prescription_request, user);\n        }\n\n        //...and this goes to the radiological table for the laboratory dept.\n        if(lab_investigation){\n            this.saveLabInvestigation(lab_investigation, user);\n        }\n\n        let data = Object.assign({}, history, system_examination, vital_signs, problems, \n            provisional_diagnosis, athropometry, dressing_request, previous_medical_history, \n            { \n                management_plan, \n                observation_request, \n                date: new Date(), \n                id: this.state.id, \n                seen_by: user \n            }\n        );\n\n        //...and the rest go to the patient diagnosis table\n        this.postData('diagnosis/clarking', data);\n        // console.log(data);\n        this.clearLocalStorage();\n            \n    }\n\n    saveDrugs=(prescription_request, user)=>{\n        let newList=[];\n        for(let o of prescription_request){\n            newList.push(\n                Object.assign({}, o, { \n                    drugStatus:'pending', \n                    date: this.state.date, \n                    id: this.state.id, \n                    seen_by:user\n                })\n            )\n        }\n        \n        let data = _convertArrOfObjToArr(newList);\n        \n        let route = 'prescriptionrequests/submitDrug'\n        _postData({ route, data });\n      \n    }\n\n    saveLabInvestigation=(lab_investigation, user)=>{\n        let newInvestigationList =[];\n        for(let o of lab_investigation){\n            newInvestigationList.push(\n                Object.assign({}, o, {date : this.state.date,\n                    id : this.state.id,\n                    seen_by : user,\n                    test_status : 'pending'}\n                )\n            );\n        }\n        \n        let data = _convertArrOfObjToArr(newInvestigationList);\n    \n        let route = 'lab/submitLab';\n\n       _postData({ route, data });\n    }\n\n    /**\n     * This is a helper function which helps to post data to \n     * the database depending on the value of the paramaters \n     * passed in\n     * postData()\n     * @params route - that takes the backend route we want to use\n     * @params data - the information we want to submit\n     */\n    postData(route, data){\n        let cb = () => console.log(data);\n        _postData({ route, data, cb});\n    }\n\n    /**\n     * This method make use of the helper function _fetchData\n     * to fetch data.\n     * fetchData()\n     */\n    fetchData(){        \n        // const username = localStorage.getItem('user');\n        let route =  `patientrecords/doctor?q=${'aminu'}`;\n        let success_callback = (data) => this.setState({ patientrecords: data })\n        let error_callback = error => this.setState({error})\n        _fetchData({ route, success_callback, error_callback })\n    }\n\n    /**\n     * Immediately before the component is mounted, we get the \n     * patient's data that has been save to the localStorage to\n     * render it without having to fetch from the database again.\n     */\n    // componentWillMount() {\n    //     localStorage.getItem('patientrecords') && this.setState({\n    //         patientrecords: JSON.parse(localStorage.getItem('patientrecords'))\n    //     })\n    // } \n\n    /**\n     * Immediately after the component is mounted, we fetch the list\n     * of patients currently assigned to the current doctor.\n     */\n    componentDidMount() {\n        this.fetchData();   \n    }\n\n    /**\n     * This happens when we want to update the component\n     */\n    componentWillUpdate(nextProps, nextState){\n        localStorage.setItem('patientrecords', JSON.stringify(nextState.patientrecords));\n    }\n\n    /**\n     * getFullDiagnosisByTransactionId()\n     * @param transactionId\n     * This method filters the fullDiagnosis list and returns the\n     * record that contains the particular transactionId\n     */\n    getFullDiagnosisByTransactionId = (transactionId) => {\n        // const fullDiagnosis = JSON.parse(localStorage.getItem('fullDiagnosis'));\n        const {fullDiagnosis} = this.state;\n        \n        const fullDiagnosisByTransactionId = fullDiagnosis.filter(diag => diag.transactionId === transactionId)[0];\n        this.setState({ records: fullDiagnosisByTransactionId });\n    }\n\n    //to toggle with the back button\n    back=()=> this.setState(prevState => ({ collapse: !prevState.collapse }))\n\n    toggleCollapse2 = () => this.setState({ collapse2: true });\n\n    onPreviewClick=()=>{ \n        this.getSavedData()\n        this.setState(prevState => ({ \n            previewModal: !prevState.previewModal\n        })) \n    }\n\n    getSavedData=()=>{\n        let presenting_complaints = JSON.parse(localStorage.getItem('presenting_complaints'));\n        let history = JSON.parse(localStorage.getItem('history'));\n        let system_examination = JSON.parse(localStorage.getItem('system_examination'));\n        let vital_signs = JSON.parse(localStorage.getItem('vital_signs'));\n        let problems = JSON.parse(localStorage.getItem('problems'));\n        let lab_investigation = JSON.parse(localStorage.getItem('lab_investigation'));\n        let provisional_diagnosis = JSON.parse(localStorage.getItem('provisional_diagnosis'));\n        let athropometry = JSON.parse(localStorage.getItem('athropometry'));\n        let management_plan = localStorage.getItem('management_plan');\n        let prescription_request = JSON.parse(localStorage.getItem('prescription_request'));   \n        let dressing_request = JSON.parse(localStorage.getItem('dressing_request'));\n        let observation_request = localStorage.getItem('observation_request');\n        let previous_medical_history = JSON.parse(localStorage.getItem('previous_medical_history'));\n        this.setState({ presenting_complaints, history, system_examination, vital_signs, \n            problems, lab_investigation, provisional_diagnosis, athropometry, management_plan, \n            prescription_request, dressing_request, observation_request, previous_medical_history\n        })\n    }\n\n    \n\n    render(){\n        \n        let { collapse, patientrecords, fullDiagnosis, records, previewModal, presenting_complaints,\n            vital_signs, problems, lab_investigation, provisional_diagnosis, athropometry, \n            management_plan, prescription_request, dressing_request, observation_request, \n            previous_medical_history, history, system_examination,error,collapse2, } = this.state;\n        const { toggle, back, toggleCollapse2, onPreviewClick, getFullDiagnosisByTransactionId,\n             handleSubmit } = this;\n        return(\n            <div className=\"row patient-clarking\">\n                <div className=\"col-xs-12 col-sm-12 col-md-4 col-lg-3\" >\n                    {/* Doctor user guide component */}\n                    <DoctorGuide /> \n\n                    <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\" >\n                        <Collapse isOpen={collapse}>\n                            {/* \n                                This component display the list of patients assigned to the current\n                                doctor \n                            */}\n                            <AssignedList toggle={toggle} error={error} patientrecords={patientrecords} />\n                        </Collapse>\n                    </div>\n\n                    <div  className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                        <Collapse isOpen={!collapse}>\n                            {/* \n                                This component consists of the previous visits record for \n                                the patient whose name was clicked upon.\n                             */}\n                            <PreviousVisits \n                                toggle={back}\n                                toggleCollapse2={toggleCollapse2} \n                                currentRecord={this.state.currentRecord}\n                                fullDiagnosis={fullDiagnosis}\n                                getFullDiagnosisByTransactionId={getFullDiagnosisByTransactionId} \n                            />\n                        </Collapse>\n                    </div>\n                    \n                </div> \n\n                \n                <div style={{ border:'1px solid #007bff' }} className=\"col-xs-12 col-sm-12 col-md-8 col-lg-6\">\n                    <Diagnosis />\n                    <hr />\n                    <div>\n                        <button \n                            className=\"btn btn-outline-primary offset-md-3 col-xs-6 col-sm-5 col-md-3 col-lg-3\" \n                            onClick={onPreviewClick}>Preview & Print <FaPrint size={30} /></button>\n                        <button \n                            className=\"btn btn-outline-danger col-xs-6 col-sm-5 col-md-3 col-lg-3\" \n                            onClick={handleSubmit}\n                        >Submit <FaPaperPlane size={30} /></button>\n                    </div>\n                    <Preview \n                        patientrecord={this.state.patientrecord}\n                        modal={previewModal}\n                        toggle={onPreviewClick}\n                        presenting_complaints={presenting_complaints}\n                        history={history}\n                        system_examination={system_examination}\n                        vital_signs={vital_signs}\n                        problems={problems}\n                        lab_investigation={lab_investigation}\n                        provisional_diagnosis={provisional_diagnosis}\n                        athropometry={athropometry}\n                        management_plan={management_plan}\n                        prescription_request={prescription_request}\n                        dressing_request={dressing_request}\n                        observation_request={observation_request}\n                        previous_medical_history={previous_medical_history}\n                        submit={handleSubmit}\n                    />\n                </div>\n              \n\n                <div className=\"col-sm-12 col-md-3 col-lg-3\">\n                 {/* \n                    LastDiagnosis renders the patients diagnosis details with\n                    respect to the visit date clicked.\n                 */}\n                    <Collapse isOpen={!collapse2}>\n                        <Image /> \n                    </Collapse>\n                    <Collapse isOpen={collapse2}>\n                        <LastDiagnosis records={records} />\n                    </Collapse>\n                </div>\n\n            </div>\n        );\n    }\n}\nexport default PatienClarking;"]},"metadata":{},"sourceType":"module"}